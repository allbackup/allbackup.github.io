<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The copy_reg&nbsp;module</title></head><body data-page-id="499"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The copy_reg&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>This module provides a registry that you can use to register
your own extension types. The <b><a href="pickle.htm">pickle</a></b>
and <b><a href="copy.htm">copy</a></b> modules use this registry to
figure out how to process non-standard types.</p><p>For example, the standard <b><a href="pickle.htm">pickle</a></b>
implementation cannot deal with Python code objects, as shown by
the following example:</p><div class="example"><pre>
# File: <a href="copy-reg/copy-reg-example-1.py">copy-reg-example-1.py</a>

import pickle

CODE = """
print 'good evening'
"""

code = compile(CODE, "&lt;string&gt;", "exec")

exec code
exec pickle.loads(pickle.dumps(code))

</pre><pre class="computeroutput" moreinfo="NONE">
good evening
Traceback (innermost last):
...
pickle.PicklingError: can't pickle 'code' objects
</pre></div><p>You can work around this by registering a code object handler.
Such a handler consists of two parts; a <i>pickler</i> which takes
the code object and returns a tuple that can only contain simple
data types, and an <i>unpickler</i> which takes the contents of
such a tuple as its arguments:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the copy_reg
module to enable pickling of code objects</b>
<pre class="wide">
# File: <a href="copy-reg/copy-reg-example-2.py">copy-reg-example-2.py</a>

import copy_reg
import pickle, marshal, types

#
# register a pickle handler for code objects

def code_unpickler(data):
    return marshal.loads(data)

def code_pickler(code):
    return code_unpickler, (marshal.dumps(code),)

copy_reg.pickle(types.CodeType, code_pickler, code_unpickler)

#
# try it out

CODE = """
print "suppose he's got a pointed stick"
"""

code = compile(CODE, "&lt;string&gt;", "exec")

exec code
exec pickle.loads(pickle.dumps(code))

</pre><pre class="computeroutput wide" moreinfo="NONE">
suppose he's got a pointed stick
suppose he's got a pointed stick
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>If you&#8217;re transferring the pickled data across a network, or to
another program, the custom unpickler must of course be available
at the receiving end as well.</p><p>For the really adventurous, here&#8217;s a version that makes it possible
to pickle open file objects:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the copy_reg
module to enable pickling of file objects</b>
<pre class="wide">
# File: <a href="copy-reg/copy-reg-example-3.py">copy-reg-example-3.py</a>

import copy_reg
import pickle, types
import StringIO

#
# register a pickle handler for file objects

def file_unpickler(position, data):
    file = StringIO.StringIO(data)
    file.seek(position)
    return file

def file_pickler(code):
    position = file.tell()
    file.seek(0)
    data = file.read()
    file.seek(position)
    return file_unpickler, (position, data)

copy_reg.pickle(types.FileType, file_pickler, file_unpickler)

#
# try it out

file = open("samples/sample.txt", "rb")

print file.read(120),
print "&lt;here&gt;",
print pickle.loads(pickle.dumps(file)).read()

</pre><pre class="computeroutput wide" moreinfo="NONE">
We will perhaps eventually be writing only small
modules which are identified by name as they are
used to build larger &lt;here&gt;  ones, so that devices like
indentation, rather than delimiters, might become
feasible for expressing local structure in the
source language.
     -- Donald E. Knuth, December 1974
</pre></div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
