
@@module curses.ascii

<h1>curses.ascii&#8212;Utilities for ASCII characters</h1>

<p>New in version 1.6.

<p>The {@link curses.ascii} module supplies name constants for ASCII
characters and functions to test membership in various ASCII character
classes. The constants supplied are names for control characters as
follows:

<p><table border=1>
<tr> <th>
<p>Name
<th>
<p>Meaning
<tr> <td>
<p>{@code NUL}
<td> <tr> <td>
<p>{@code SOH}
<td>
<p>Start of heading, console interrupt
<tr> <td>
<p>{@code STX}
<td>
<p>Start of text
<tr> <td>
<p>{@code ETX}
<td>
<p>End of text
<tr> <td>
<p>{@code EOT}
<td>
<p>End of transmission
<tr> <td>
<p>{@code ENQ}
<td>
<p>Enquiry, goes with {@code ACK} flow control
<tr> <td>
<p>{@code ACK}
<td>
<p>Acknowledgement
<tr> <td>
<p>{@code BEL}
<td>
<p>Bell
<tr> <td>
<p>{@code BS}
<td>
<p>Backspace
<tr> <td>
<p>{@code TAB}
<td>
<p>Tab
<tr> <td>
<p>{@code HT}
<td>
<p>Alias for {@code TAB}: &#8220;Horizontal tab&#8221;
<tr> <td>
<p>{@code LF}
<td>
<p>Line feed
<tr> <td>
<p>{@code NL}
<td>
<p>Alias for {@code LF}: &#8220;New line&#8221;
<tr> <td>
<p>{@code VT}
<td>
<p>Vertical tab
<tr> <td>
<p>{@code FF}
<td>
<p>Form feed
<tr> <td>
<p>{@code CR}
<td>
<p>Carriage return
<tr> <td>
<p>{@code SO}
<td>
<p>Shift-out, begin alternate character set
<tr> <td>
<p>{@code SI}
<td>
<p>Shift-in, resume default character set
<tr> <td>
<p>{@code DLE}
<td>
<p>Data-link escape
<tr> <td>
<p>{@code DC1}
<td>
<p>XON, for flow control
<tr> <td>
<p>{@code DC2}
<td>
<p>Device control 2, block-mode flow control
<tr> <td>
<p>{@code DC3}
<td>
<p>XOFF, for flow control
<tr> <td>
<p>{@code DC4}
<td>
<p>Device control 4
<tr> <td>
<p>{@code NAK}
<td>
<p>Negative acknowledgement
<tr> <td>
<p>{@code SYN}
<td>
<p>Synchronous idle
<tr> <td>
<p>{@code ETB}
<td>
<p>End transmission block
<tr> <td>
<p>{@code CAN}
<td>
<p>Cancel
<tr> <td>
<p>{@code EM}
<td>
<p>End of medium
<tr> <td>
<p>{@code SUB}
<td>
<p>Substitute
<tr> <td>
<p>{@code ESC}
<td>
<p>Escape
<tr> <td>
<p>{@code FS}
<td>
<p>File separator
<tr> <td>
<p>{@code GS}
<td>
<p>Group separator
<tr> <td>
<p>{@code RS}
<td>
<p>Record separator, block-mode terminator
<tr> <td>
<p>{@code US}
<td>
<p>Unit separator
<tr> <td>
<p>{@code SP}
<td>
<p>Space
<tr> <td>
<p>{@code DEL}
<td>
<p>Delete
</table></p>

<p>Note that many of these have little practical significance in modern
usage. The mnemonics derive from teleprinter conventions that predate
digital computers.

<p>The module supplies the following functions, patterned on those in
the standard C library:

@@function isalnum(c)

<p>Checks for an ASCII alphanumeric character; it is equivalent to
"{@code isalpha(}{@var c}) or isdigit({@var c})".

@@function isalpha(c)

<p>Checks for an ASCII alphabetic character; it is equivalent to "{@code
isupper(}{@var c}) or islower({@var c})".

@@function isascii(c)

<p>Checks for a character value that fits in the 7-bit ASCII set.

@@function isblank(c)

<p>Checks for an ASCII whitespace character.

@@function iscntrl(c)

<p>Checks for an ASCII control character (in the range 0x00 to 0x1f).

@@function isdigit(c)

<p>Checks for an ASCII decimal digit, "{@code 0}" through "{@code 9}".
This is equivalent to "{@var c} in string.digits".

@@function isgraph(c)

<p>Checks for ASCII any printable character except space.

@@function islower(c)

<p>Checks for an ASCII lower-case character.

@@function isprint(c)

<p>Checks for any ASCII printable character including space.

@@function ispunct(c)

<p>Checks for any printable ASCII character which is not a space or an
alphanumeric character.

@@function isspace(c)

<p>Checks for ASCII white-space characters; space, line feed, carriage
return, form feed, horizontal tab, vertical tab.

@@function isupper(c)

<p>Checks for an ASCII uppercase letter.

@@function isxdigit(c)

<p>Checks for an ASCII hexadecimal digit. This is equivalent to "{@var
c} in string.hexdigits".

@@function isctrl(c)

<p>Checks for an ASCII control character (ordinal values 0 to 31).

@@function ismeta(c)

<p>Checks for a non-ASCII character (ordinal values 0x80 and above).

@@text 

<p>These functions accept either integers or strings; when the argument
is a string, it is first converted using the built-in function {@link
ord}.

<p>Note that all these functions check ordinal bit values derived from
the first character of the string you pass in; they do not actually know
anything about the host machine's character encoding. For functions that
know about the character encoding (and handle internationalization
properly) see the {@link string} module.

<p>The following two functions take either a single-character string or
integer byte value; they return a value of the same type.

@@function ascii(c)

<p>Return the ASCII value corresponding to the low 7 bits of {@var c}.

@@function ctrl(c)

<p>Return the control character corresponding to the given character
(the character bit value is bitwise-anded with 0x1f).

@@function alt(c)

<p>Return the 8-bit character corresponding to the given ASCII character
(the character bit value is bitwise-ored with 0x80).

@@text 

<p>The following function takes either a single-character string or
integer value; it returns a string.

@@function unctrl(c)

<p>Return a string representation of the ASCII character {@var c}. If
{@var c} is printable, this string is the character itself. If the
character is a control character (0x00-0x1f) the string consists of a
caret ("{@code ^}") followed by the corresponding uppercase letter. If
the character is an ASCII delete (0x7f) the string is {@code '^?'}. If
the character has its meta bit (0x80) set, the meta bit is stripped, the
preceding rules applied, and "{@code !}" prepended to the result.

@@variable controlnames

<p>A 33-element string array that contains the ASCII mnemonics for the
thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in order,
plus the mnemonic "{@code SP}" for the space character.
