<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Element Library&nbsp;Functions</title> <script type="text/javascript">effbot_page_id=82;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles

now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Element Library&nbsp;Functions</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p class="info">March 22, 2004 | Fredrik Lundh</p><p>ElementTree 1.3 may include a new module, <b>ElementLib</b>, with
a number of convenient helper functions.</p><p>The exact contents are yet to be determined; here are some of the
current proposals (from various sources, in no specific order):</p><p>Helpers to add subelements, with a nicer syntax.</p><p>Wrappers to access elements via attributes (templating).</p><h3 id="copy">copy&#160;<a class="nav" href="#copy" title="bookmark!">#</a></h3><p><b>copy/deepcopy</b>: Copy element structures. [<i>the copy module
is supposed to work /F</i>]</p><h3 id="flatten">flatten&#160;<a class="nav" href="#flatten" title="bookmark!">#</a></h3><p><b>flatten</b>: Recursively extract text content.</p><pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">flatten</span>(elem, include_tail=0):
    text = elem.text <span class="pykeyword">or</span> <span class="pystring">""</span>
    <span class="pykeyword">for</span> e <span class="pykeyword">in</span> elem:
        text += flatten(e, 1)
    <span class="pykeyword">if</span> include_tail <span class="pykeyword">and</span> elem.tail: text += elem.tail
    <span class="pykeyword">return</span> text</pre><p>To get rid of all subelements to a given element, and keep just the
text, you can do:

<pre class="python">
elem.text = flatten(elem); <span class="pykeyword">del</span> elem[:]</pre><h3 id="append">append&#160;<a class="nav" href="#append" title="bookmark!">#</a></h3></p><p><b>append</b>: Like elem.append, but accepts either an element or a string (which is added to the tail).</p><pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">append</span>(elem, item):
    <span class="pykeyword">if</span> isinstance(item, basestring):
        <span class="pykeyword">if</span> len(elem):
            elem[-1].tail = (elem[-1].tail <span class="pykeyword">or</span> <span class="pystring">""</span>) + item
        <span class="pykeyword">else</span>:
            elem.text = (elem.text <span class="pykeyword">or</span> <span class="pystring">""</span>) + item
    <span class="pykeyword">else</span>:
        elem.append(item)</pre><h3 id="walk">walk&#160;<a class="nav" href="#walk" title="bookmark!">#</a></h3><p><b>walk</b>: A generator that wa