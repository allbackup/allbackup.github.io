<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Idea: Adding a Time Base&nbsp;Type</title></head><body data-page-id="130"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Idea: Adding a Time Base&nbsp;Type</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info"><a href="#changes">Updated November 25, 2002</a> | Fredrik Lundh</p><p>I propose adding an &#8220;abstract&#8221; basetype for time
objects, which can be subclassed by more elaborate date/time/timestamp implementations, such as <b>mxDateTime</b>, custom types provided
by DB-API implementations, etc.</p><p>This proposal contains two parts; an &#8220;abstract&#8221; base type
(an interface) from which all time types can inherit, and a simple
implementation, providing an object oriented wrapper for C&#8217;s
<b>time_t</b> type (as used by the <b>time</b> module).</p><p>The base type is designed to make it easy to extract the year,
month, day, hour, minute, and second from any given time object.</p><p>Or to put it another way, I want the following to work for any time
object, including mxDateTime objects, any date/timestamp returned by a
DB-API driver, and weird date/time-like types I&#8217;ve developed
myself.</p><pre class="python">
<span class="pykeyword">if</span> isinstance(t, basetime):
    <span class="pykeyword">print</span> t.timetuple()</pre><p>where <b>basetime</b> is the proposed name of this type.</p><p>Alternatively, the type can be replaced with an (informal) interface:</p><pre class="python">
<span class="pykeyword">if</span> hasattr(t, <span class="pystring">"timetuple"</span>):
    <span class="pykeyword">print</span> t.timetuple()</pre><p>The goal is not to standardize any behaviour beyond this; anything
else should be provided by subtypes.</p><p>The simple type provides a number of functions from the time
module, as methods of the time object.</p><h2>The Base Type</h2><p>The <b>basetime</b> type provides a minimal interface, with three
standard methods.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pykeyword">class</span> <span class="pyclass">basetime</span>(object):

    <span class="pykeyword">def</span> <span class="pyfunction">timetuple</span>(self):
        <span class="pycomment"># return time as 9-item time tuple (local time)</span>
        <span class="pycomment"># the first six fields must be filled in.  the last</span>
        <span class="pycomment"># three may be set to -1, if not known</span>

    <span class="pykeyword">def</span> <span class="pyfunction">__cmp__</span>(self, other):
        <span class="pycomment"># compare this time object with other time object of</span>
        <span class="pycomment"># same type</span>

    <span class="pykeyword">def</span> <span class="pyfunction">__hash__</span>(self):
        <span class="pycomment"># return hash signature</span></pre></div><div class="yui-ge"><div class="yui-u first"><p>FIXME/FL: Several reviewers has pointed out that this
class probably should define basic arithmetics as well (subtract time
from time to get time delta, add time and delta to get a new time).
I&#8217;m not sure if we can/should standarize on a delta representation,
though: maybe this is better left for subclasses.  A compromise could
be to define that the following should work (where deltaobject is an
unknown type):</p><pre class="python">
deltaobject = timeobject - timeobject
floatobject = float(deltaobject) <span class="pycomment"># fractional seconds</span>
timeobject = timeobject + integerobject
timeobject = timeobject + floatobject
timeobject = timeobject + deltaobject</pre><h3>The timetuple method</h3><p>This method returns the current date/time value, as a 9-item tuple
similar to the tuples used by the <b>time</b> module.  For date/time
types that knows about timezones, this method should return the local
time.</p><p>The year, month, day, hour, minute, and second fields must always
be set.  Any (or all) of the remaining three items may be -1 if not
known.</p><p>This is the same thing as calling <b>time.localtime(t)</b> with a
time_t value, or calling <b>mxDateTime&#8217;s</b> <b>tuple()</b>
method.</p><h2>The Simple Time Type</h2><p>In addition to the base type, I propose adding a minimal time
type to the time module.  Thanks to <b>__int__</b> and <b>__float__</b>
hooks, it will still work with code that asks for an integer
(including the functions provided by the current <b>time</b> module),
but the user will have to explitly wrap return values from
<b>time.time()</b> and <b>time.mktime()</b> to use them as
objects.</p><p><i>FIXME: now that utc* is gone, add a separate simpleutctime
subclass instead.</i></p><p>Here&#8217;s a simple reference implementation:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pycomment">#</span>
<span class="pycomment"># simple time wrapper</span>

<span class="pykeyword">import</span> time

<span class="pykeyword">class</span> <span class="pyclass">simpletime</span>(basetime):

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, ticks):
        self.ticks = ticks

    <span class="pycomment">#</span>
    <span class="pycomment"># standard basetime protocol</span>

    <span class="pykeyword">def</span> <span class="pyfunction">timetuple</span>(self):
        <span class="pykeyword">return</span> time.localtime(self.ticks)

    <span class="pykeyword">def</span> <span class="pyfunction">__cmp__</span>(self, other):
        <span class="pykeyword">return</span> cmp(self.ticks, other.ticks)

    <span class="pykeyword">def</span> <span class="pyfunction">__hash__</span>(self):
        <span class="pykeyword">return</span> hash(self.ticks)

    <span class="pycomment">#</span>
    <span class="pycomment"># convenience functions</span>

    <span class="pykeyword">def</span> <span class="pyfunction">__int__</span>(self):
        <span class="pykeyword">return</span> int(self.ticks)

    <span class="pykeyword">def</span> <span class="pyfunction">__float__</span>(self):
        <span class="pykeyword">return</span> float(self.ticks)

    <span class="pykeyword">def</span> <span class="pyfunction">__repr__</span>(self):
        <span class="pykeyword">return</span> <span class="pystring">"&lt;simpletime %s at %x&gt;"</span> % (self.ctime(), id(self))

    <span class="pykeyword">def</span> <span class="pyfunction">ctime</span>(self):
        <span class="pykeyword">return</span> time.ctime(self.ticks)

    <span class="pykeyword">def</span> <span class="pyfunction">strftime</span>(self, format):
        <span class="pykeyword">return</span> time.strftime(format, self.timetuple())</pre></div><div class="yui-ge"><div class="yui-u first"><h2>Questions</h2><p><b>Q. Is it really a good idea to set the daynumber and dayofweek
fields to&#160;-1.</b></p><p>A. Both fields can be calculated from the date.  However, the
calculations are not trivial (where &#8220;trivial&#8221; is defined as
&#8220;most programmers can write them without looking them up&#8221;).
We could address this by providing a reference implementation, but
that&#8217;s outside the scope of this proposal.</p><p><b>Q. Why not standardize more methods while we&#8217;re at it?</b></p><p>A. Keep it simple.  The goal is to let generic time-using code to
access the time tuple, not to support any fancier processing.  Use
packages like <b>mxDateTime</b> for that purpose.</p><hr /><p id="changes"><b class="mark">Changes</b></p><p><b>July 12, 2002</b>: moved from &#8220;ideas&#8221; directory, removed
diff markup, removed utc* methods (use &#8220;naive time&#8221;), and fixed
a few typos.</p><p><b>November 25, 2002</b>: added <b>hasattr</b> note.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
