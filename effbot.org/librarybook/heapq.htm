<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The heapq&nbsp;Module</title></head><body data-page-id="550"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The heapq&nbsp;Module</h1></div><div class="yui-ge"><div class="yui-u first"><p>(New in 2.3) This module provides functions to add and remove items
from partially sorted sequences.</p><p>The functions in this module all assume that the sequence is sorted so
that the first item in the sequence (<i>seq[0]</i>) is the smallest, and
that the rest of the sequence forms a binary tree, where the children
of <i>seq[i]</i> are <i>seq[2*i+1]</i> and <i>seq[2*i+2]</i>.  When
modifying the sequence, the functions always make sure that the children
are equal to or larger than their parent.</p><p>Given an empty sequence, you can use <b>heappush</b> to add items to
the sequence, and <b>heappop</b> to remove the smallest item from the
sequence.</p><pre>
# File: heapq-example-1.py

import heapq

heap = []

# add some values to the heap
for value in [20, 10, 30, 50, 40]:
    heapq.heappush(heap, value)

# pop them off, in order
while heap:
    print heapq.heappop(heap),

</pre><pre>
$ python heapq-example-1.py
10 20 30 40 50
</pre><p>(This is a lot more efficient than using <b>min</b> to get the
smallest item, and the <b>remove</b> and <b>append</b> methods to
modify the sequence.)</p><p>If you have an existing sequence, you can use the <b>heapify</b>
function to turn it into a well-formed heap:</p><pre>
# File: heapq-example-2.py

import heapq

heap = [20, 10, 30, 50, 40]

heapq.heapify(heap)

# pop them off, in order
while heap:
    print heapq.heappop(heap),
</pre><pre>
$ python heapq-example-2.py
10 20 30 40 50
</pre><p>Note that if you have a sorted list, you don&#8217;t really have to call
the <b>heapify</b> function; a sorted list is a valid heap tree.  Also
note that an empty list and a list with only one item both qualify as
&#8220;sorted&#8221;.</p><p>The <b>heapq</b> module can be used to implement various kind of priority
queues and schedulers (where the item value represents a process priority
or a timestamp).</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
