<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The gc&nbsp;module</title></head><body data-page-id="541"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The gc&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>(Optional, 2.0 and later) This module provides an interface to
the built-in cyclic garbage collector.</p><p>Python uses reference counting to keep track of when to get rid
of objects; as soon as the last reference to an object goes away,
the object is destroyed.</p><p>Starting with version 2.0, Python also provides a cyclic garbage
collector, which runs at regular intervals. This collector looks
for data structures that point to themselves, and does what it can
to break the cycles.</p><p>You can use the <b>gc.collect</b> function to force full
collection. This function returns the number of objects destroyed
by the collector.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the gc
module to collect cyclic garbage</b>
<pre class="wide">
# File: <a href="gc/gc-example-1.py">gc-example-1.py</a>

import gc

# create a simple object that links to itself
class Node:

    def __init__(self, name):
        self.name = name
        self.parent = None
        self.children = []

    def addchild(self, node):
        node.parent = self
        self.children.append(node)

    def __repr__(self):
        return "&lt;Node %s at %x&gt;" % (repr(self.name), id(self))

# set up a self-referencing structure
root = Node("monty")

root.addchild(Node("eric"))
root.addchild(Node("john"))
root.addchild(Node("michael"))

# remove our only reference
del root

print gc.collect(), "unreachable objects"
print gc.collect(), "unreachable objects"

</pre><pre class="computeroutput wide" moreinfo="NONE">
12 unreachable objects
0 unreachable objects
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>If you&#8217;re sure that your program doesn&#8217;t create any
self-referencing data structures, you can use the
<b>gc.disable</b> function to disable collection. After calling
this function, Python works exactly like 1.5.2 and earlier.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
