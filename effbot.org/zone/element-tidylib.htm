<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>ElementTree Tidy HTML Tree&nbsp;Builder</title></head><body data-page-id="94"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">ElementTree Tidy HTML Tree&nbsp;Builder</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">July 6, 2003 | Fredrik Lundh</p><p>The <b>TidyHTMLTreeBuilder</b> parser can read (almost) arbitrary HTML
files, and turn them into well-formed <a href="element-index.htm">element trees</a>.
This parser uses a library version of Dave Raggett&#8217;s <a href="http://www.w3.org/People/Raggett/tidy/">HTML Tidy utility</a> to fix any problems with the HTML before converting it to XHTML (the XML version of
HTML).</p><p class="note"><b>Note:</b>
If you don&#8217;t want to (or cannot) install binary Python extensions, you can
use the <a href="pythondoc-elementtree-TidyTools.htm">TidyTools</a> module
in the standard ElementTree distribution.  That module uses the command-line
version of Tidy, which is available <a href="http://tidy.sourceforge.net/#binaries">for many different platforms</a>.</p><p>This tree builder requires the <b>_elementtidy</b> extension, which is
based on the <a href="http://tidy.sourceforge.net">tidylib</a> library.
Note that this extension is not included in the current <b>elementtree</b>
releases, but you can download a separate <b>elementtidy</b> package from
<a href="/downloads">effbot.org downloads site</a>.</p><h2 id="usage">Usage&#160;<a class="nav" href="#usage" title="bookmark!">#</a></h2><h3 id="loading-html-files">Loading HTML Files&#160;<a class="nav" href="#loading-html-files" title="bookmark!">#</a></h3><p>To load an HTML file into an XHTML tree, import the <b>TidyHTMLTreeBuilder</b> module and call the <b>parse</b> method:</p><pre class="python">
<span class="pykeyword">from</span> elementtidy <span class="pykeyword">import</span> TidyHTMLTreeBuilder

tree = TidyHTMLTreeBuilder.parse(<span class="pystring">"myfile.htm"</span>)</pre><p class="note"><b>Note:</b> In the experimental alpha releases, the
tree builder is installed in the <b>elementtidy</b> package.  If you&#8217;re
using a version shipped with the ElementTree library, import the module
from the <b>elementtree</b> package instead.</p><h3 id="converting-xhtml-to-html">Converting XHTML to HTML&#160;<a class="nav" href="#converting-xhtml-to-html" title="bookmark!">#</a></h3><p>The ElementTree interfaces convert the HTML to the XML version of
HTML, called XHTML.  In this format, all HTML tags live in the <b>{http://www.w3.org/1999/xhtml}</b> namespace.  The following code snippet shows how to &#8216;normalize&#8217; the tree, turning it into standard HTML:</p><pre class="python">
    XHTML = <span class="pystring">"{http://www.w3.org/1999/xhtml}"</span>

    <span class="pykeyword">for</span> elem <span class="pykeyword">in</span> tree.getiterator():
        <span class="pykeyword">if</span> elem.tag.startswith(XHTML):
            elem.tag = elem.tag[len(XHTML):]</pre><h3 id="saving-html-file">Saving HTML Files&#160;<a class="nav" href="#saving-html-file" title="bookmark!">#</a></h3><p>To save a plain HTML file, just write out the tree.</p><pre class="python">
    tree.write(<span class="pystring">"outfile.htm"</span>)</pre><p>This works well, as long as the file doesn&#8217;t containg any embedded SCRIPT or STYLE tags.</p><p>If you want, you can add a DTD reference to the beginning of the file:</p><pre class="python">
    file = open(<span class="pystring">"outfile.htm"</span>, <span class="pystring">"w"</span>)
    file.write(DTD + <span class="pystring">"\n"</span>)
    tree.write(file)
    file.close()</pre><h3 id="saving-xhtml-file">Saving XHTML Files&#160;<a class="nav" href="#saving-xhtml-file" title="bookmark!">#</a></h3><p>If you save an XHTML file (where each tag lives in the XHTML namespace),
the <b>write</b> method will add a namespace declaration to the <b>html</b>
element, and place every tag in an explicit namespace.  Some browsers can&#8217;t
handle this, and may fail to render your document properly.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><a href="#usage">Usage</a></li><li><ul><li><a href="#loading-html-files">Loading HTML Files</a></li><li><a href="#converting-xhtml-to-html">Converting XHTML to HTML</a></li><li><a href="#saving-html-file">Saving HTML Files</a></li><li><a href="#saving-xhtml-file">Saving XHTML Files</a></li></ul></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
