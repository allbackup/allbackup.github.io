<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Using Non-Standard Encodings in&nbsp;cElementTree</title></head><body data-page-id="22"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Using Non-Standard Encodings in&nbsp;cElementTree</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Updated December 15 | December 1, 2005 | Fredrik Lundh</p><p class="note"><b>Update 2005-12-04:</b>
Changed to use
<a href="http://effbot.org/tag/python.codecs.open"><b>codecs.open</b></a>
instead of plain <b>open</b>, to avoid problems with variable-width encodings.
Thanks to &#8220;mark_m&#8221;.</p><p class="note"><b>Update 2005-12-15:</b>
This has been fixed in cElementTree 1.0.5, which supports all 8-bit encodings
provided by Python&#8217;s Unicode implementation.</p><p>Older versions of cElementTree (1.0.4 and earlier) only supports the
encodings provided by the <b>expat</b> library itself:</p><ul><li>UTF-8</li><li>UTF-16</li><li>US-ASCII</li><li>ISO-8859-1</li></ul><p>Support for more encodings will be added to a future release.</p><p>To work around this in the current version, you can use the
<b>XMLParser</b> class directly, and &#8220;recode&#8221; the data stream in
Python:</p><pre class="python">
<span class="pykeyword">import</span> cElementTree <span class="pykeyword">as</span> ET
<span class="pykeyword">import</span> codecs

<span class="pykeyword">def</span> <span class="pyfunction">myparser</span>(file, encoding):
    f = codecs.open(file. <span class="pystring">"r"</span>, encoding)
    p = ET.XMLParser(encoding=<span class="pystring">"utf-8"</span>)
    <span class="pykeyword">while</span> 1:
        s = f.read(65536)
        <span class="pykeyword">if</span> <span class="pykeyword">not</span> s:
            <span class="pykeyword">break</span>
        p.feed(s.encode(<span class="pystring">"utf-8"</span>))
    <span class="pykeyword">return</span> ET.ElementTree(p.close())

tree = myparser(<span class="pystring">"example.xml"</span>, <span class="pystring">"windows-1252"</span>)</pre><p>To determine the encoding used in the file, you can use something like
Paul Prescod&#8217;s <a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52257"><i>Auto-detect XML encoding</i></a> recipe.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
