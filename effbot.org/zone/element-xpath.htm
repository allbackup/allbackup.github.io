<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>XPath Support in&nbsp;ElementTree</title></head><body data-page-id="100"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">XPath Support in&nbsp;ElementTree</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Updated Sep 18, 2007 | Fredrik Lundh</p><p>ElementTree provides limited support for <a href="http://www.w3.org/TR/xpath">XPath
expressions</a>.  The goal is to support a
small subset of the abbreviated syntax; a full XPath engine is outside
the scope of the core library.</p><p>The 1.2 release supports simple element location paths.  In its
simplest form, a location path is one or more tag names, separated by
slashes (/).</p><p>You can also use an asterisk (*) instead of a tag name, to match all
elements at that level.  For example, <strong>*/subtag</strong> returns all
<strong>subtag</strong> grandchildren.</p><p>An empty tag (//) is used to search on all levels of the tree, beneath
the current level.  The empty tag must always be followed by a tag
name or an asterisk.  For example, <strong>.//tag</strong> returns all <strong>tag</strong>
elements in the entire tree.</p><p>When searching on individual elements, the path must not start with a
slash.  You can add a leading period (.), if necessary.</p><p>The 1.3 release adds basic predicates.  You can search on attributes,
attribute values, child elements, and on position.</p><p>Path element summary:</p><table class="simpletable">
<tr><th>syntax</th><th>meaning</th></tr>
<tr><td><b>tag</b></td>
    <td>Selects all child elements with the given tag.  For example,
    &#8220;spam&#8221; selects all child elements named &#8220;spam&#8221;, &#8220;spam/egg&#8221; selects
    all grandchildren named &#8220;egg&#8221; in all child elements named &#8220;spam&#8221;.
    You can use universal names (&#8220;{url}local&#8221;) as tags.</td></tr>
<tr><td><b>*</b></td>
    <td>Selects all child elements.  For example, &#8220;*/egg&#8221; selects all
    grandchildren named &#8220;egg&#8221;.</td></tr>
<tr><td><b>.</b></td>
    <td>Select the current node.  This is mostly useful at the beginning
    of a path, to indicate that it&#8217;s a relative path.</td></tr>
<tr><td>//</td>
    <td>Selects all subelements, on all levels beneath the current element
    (search the entire subtree).  For example, &#8220;.//egg&#8221; selects all &#8220;egg&#8221;
    elements in the entire tree.</td></tr>
<tr><td>..</td>
    <td>(New in 1.3)
    Selects the parent element.</td></tr>
<tr><td><b>[@attrib]</b></td>
    <td>(New in 1.3)
    Selects all elements that have the given attribute.  For example,
    &#8220;.//a[@href]&#8221; selects all &#8220;a&#8221; elements in the tree that has a &#8220;href&#8221;
    attribute.</td></tr>
<tr><td><b>[@attrib=&#8217;value&#8217;]</b></td>
    <td>(New in 1.3)
    Selects all elements for which the given attribute has the given
    value. For example, &#8220;.//div[@class=&#8217;sidebar&#8217;]&#8221; selects all &#8220;div&#8221;
    elements in the tree that has the class &#8220;sidebar&#8221;.  In the current
    release, the value cannot contain quotes.</td></tr>
<tr><td><b>[tag]</b></td>
    <td>(New in 1.3)
    Selects all elements that has a child element named tag.  In the
    current version, only a single tag can be used (i.e. only immediate
    children are supported).</td></tr>
<tr><td><b>[position]</b></td>
    <td>(New in 1.3)
    Selects all elements that are located at the given position.  The
    position can be either an integer (1 is the first position), the
    expression &#8220;last()&#8221; (for the last position), or a position relative
    to last() (e.g. &#8220;last()-1&#8221; for the second to last position).  This
    predicate must be preceeded by a tag name.</td></tr>
</table><p>Predicates must be preceeded by a tag name, an asterisk, or another predicate.  Note that position predicates must be immediately preceeded with tag names in the current 1.3 release.  All other predicates can be stacked.</p><p>Note that <strong>find</strong> and <strong>findtext</strong> still returns information about the first matching element only (first in document order, that is).  To get more than one element, use the <strong>findall</strong> method.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
