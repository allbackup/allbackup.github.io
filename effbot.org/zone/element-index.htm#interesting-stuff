<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>ElementTree&nbsp;Overview</title> <script type="text/javascript">effbot_page_id=78;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">ElementTree&nbsp;Overview</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><blockquote><p align="right">

&#8220;<i>But I have found that sitting under the ElementTree, one can feel the Zen of XML.</i>&#8221;<br /> &#8212; Essien Ita Essien


</p></blockquote><p class="nav">
[<a href="/">home</a>]
[<a href="/zone/">zone</a>]
[<a href="http://www.amazon.co.uk/gp/registry/2QZDLLDVBENMC">like the library? why not buy me a gift!</a>]
</p></div><div class="yui-u">&#160;</div></div><div class="yui-ge"><div class="yui-u first"><p class="note"><b>Update 2007-08-12:</b>
ElementTree 1.3 alpha 3 is now available.  For more information, see <a href="elementtree-13-intro.htm"><cite>Introducing ElementTree 1.3</cite></a>.</p><p class="note"><b>Update 2007-08-27:</b>
<a href="/downloads#elementtree">ElementTree 1.2.7 preview</a> is now available.  This is 1.2.6 plus support for IronPython.  The serializer is ~20% faster, and now supports newlines in attribute values.</p><p>The <b>Element</b> type is a simple but flexible container object,
designed to store hierarchical data structures, such as simplified XML
infosets, in memory.  The element type can be described as a cross
between a Python list and a Python dictionary.</p><p>The <b>ElementTree</b> wrapper type adds code to load XML files as trees
of Element objects, and save them back again.


</p><p>The <b>Element</b> type is available as a pure-Python implementation
for Python 1.5.2 and later.  A <a href="celementtree.htm">C implementation</a>
is also available, for use with CPython 2.1 and later.  The core
components of both libraries are also shipped with Python 2.5 and
later.</p><p>There&#8217;s also an independent implementation, <a href="http://codespeak.net/lxml/">lxml.etree</a>, based on the well-known libxml2/libxslt libraries.  This adds full support for XSLT, XPath, and
more.</p><p>For more implementations and add-ons, see the <a href="#interesting-stuff"><cite>Interesting Stuff</cite></a>
section below.</p><p class="nav">
[<a href="#usage">usage</a>]
[<a href="#documentation">documentation</a>]
[<a href="pythondoc-elementtree-ElementTree.htm">api reference</a>]
</p><h2 id="installation">Installation&#160;<a class="nav" href="#installation" title="bookmark!">#</a></h2><p>Binary installers are available for many platforms, including
Windows, Mac OS X, and most Linux distributions.  Look for packages
named &#8220;python-elementtree&#8221; or similar.

</p><p>To install from source, simply unpack the distribution archive,
change to the distribution directory, and run the <b>setup.py</b> script
as follows:</p><pre>
$ python setup.py install
</pre><p>When you&#8217;ve done this, you should be able to import the <b>ElementTree</b>
module, and other modules from the <b>elementtree</b> package:</p><pre class="python">
$ python
&gt;&gt;&gt; <span class="pykeyword">from</span> elementtree <span class="pykeyword">import</span> ElementTree</pre><p>It&#8217;s common practice to import ElementTree under an alias, both to
minimize typing, and to make it easier to switch between different
implementations:</p><pre class="python">
$ python
&gt;&gt;&gt; <span class="pykeyword">import</span> elementtree.ElementTree as ET
&gt;&gt;&gt; <span class="pykeyword">import</span> cElementTree as ET
&gt;&gt;&gt; <span class="pykeyword">import</span> lxml.etree as ET
&gt;&gt;&gt; <span class="pykeyword">import</span> xml.etree.ElementTree as ET <span class="pycomment"># Python 2.5</span></pre><p>Note that if you only need the core functionality, you can include the <b>ElementTree.py</b> file in your own project.  To get <a href="element-xpath.htm">path</a> support, you also need <b>ElementPath.py</b>.  All other modules are optional.</p><h2 id="usage">Basic Usage&#160;<a class="nav" href="#usage" title="bookmark!">#</a></h2><p>Each <b>Element</b> instance can have an identifying tag, any number
of attributes, any number of child element instances, and an associated
object (usually a string).  To create elements, you can use the
<b>Element</b> or <b>Subelement</b> factories:</p><pre class="python">
<span class="pykeyword">import</span> elementtree.ElementTree as ET

<span class="pycomment"># build a tree structure</span>
root = ET.Element(<span class="pystring">"html"</span>)

head = ET.SubElement(root, <span class="pystring">"head"</span>)

title = ET.SubElement(head, <span class="pystring">"title"</span>)
title.text = <span class="pystring">"Page Title"</span>

body = ET.SubElement(root, <span class="pystring">"body"</span>)
body.set(<span class="pystring">"bgcolor"</span>, <span class="pystring">"#ffffff"</span>)

body.text = <span class="pystring">"Hello, World!"</span>

<span class="pycomment"># wrap it in an ElementTree instance, and save as XML</span>
tree = ET.ElementTree(root)
tree.write(<span class="pystring">"page.xhtml"</span>)</pre><p>The <b>ElementTree</b> wrapper adds code to load XML files as trees
of Element objects, and save them back again.  You can use the <b>parse</b>
function to quickly load an entire XML document into an ElementTree
instance:</p><pre class="python">
<span class="pykeyword">import</span> elementtree.ElementTree as ET

tree = ET.parse(<span class="pystring">"page.xhtml"</span>)

<span class="pycomment"># the tree root is the toplevel html element</span>
<span class="pykeyword">print</span> tree.findtext(<span class="pystring">"head/title"</span>)

<span class="pycomment"># if you need the root element, use getroot</span>
root = tree.getroot()

<span class="pycomment"># ...manipulate tree...</span>

tree.write(<span class="pystring">"out.xml"</span>)</pre><p>For more details, see <a href="element.htm"><cite>Elements and Element Trees</cite></a>.</p><h2 id="documentation">Documentation&#160;<a class="nav" href="#documentation" title="bookmark!">#</a></h2><p id="articles">Zone articles:</p><blockquote><dl><dt><a href="element.htm"><cite>Elements and Element Trees</cite></a> (brief tutorial)</dt><dt><a href="pythondoc-elementtree-ElementTree.htm"><cite>The elementtree.ElementTree Module</cite></a> (reference page)</dt><dt><a href="element-infoset.htm"><cite>Element Tree Infosets</cite></a></dt><dt><a href="element-iterparse.htm"><cite>The ElementTree iterparse Function</cite></a></dt><dt><a href="element-consumer.htm"><cite>Incremental Parsing Using the Consumer API</cite></a></dt><dt><a href="element-lib.htm"><cite>Element Library Functions</cite></a>, <a href="element-bits-and-pieces.htm"><cite>ElementTree: Bits and Pieces</cite></a> (useful helpers)

</dt><dt><a href="xml-writer.htm"><cite>SimpleXMLWriter</cite></a></dt></dl></blockquote><blockquote><dl><dt><a href="celementtree.htm"><cite>The cElementTree Module</cite></a></dt></dl></blockquote><blockquote><dl><dt><a href="element-xpath.htm"><cite>XPath Support in ElementTree</cite></a></dt><dt><a href="element-xinclude.htm"><cite>XInclude support in ElementTree 1.2</cite></a></dt></dl></blockquote><blockquote><dl><dt><a href="element-tidylib.htm"><cite>ElementTree Tidy HTML Tree Builder</cite></a></dt></dl></blockquote><blockquote><dl><dt><a href="element-soap.htm"><cite>Using the ElementTree Module to Generate SOAP Messages</cite></a></dt></dl></blockquote><p>Elsewhere:</p><blockquote><p>Andrew Dalke: <a href="http://www.dalkescientific.com/writings/diary/archive/2006/11/06/iterparse_filter.html"><cite>IterParseFilter: XPath-like filtering of ElementTree&#8217;s iterparse event stream</cite></a>
</p><p>Andrew Dalke:
<a href="http://www.dalkescientific.com/writings/diary/archive/2006/08/22/pyprotocols_for_output_generation.html"><cite>PyProtocols for output generation</cite></a>
</p><p>Martijn Faassen:
<a href="http://faassen.n--tree.net/blog/view/weblog/2006/02/24/0"><cite>lxml and (c)ElementTree</cite></a>
</p><p>Andrew Kuchling:
<a href="http://www.amk.ca/talks/2006-02-07/"><cite>Processing XML with ElementTree</cite></a> [slides from a talk]

</p><p>Danny Yoo: <a href="http://article.gmane.org/gmane.comp.python.tutor/24986">ElementTree mini-tutorial</a> [&#8220;<i>Let&#8217;s work through a small example with it; that may help to clear some confusion.</i>&#8220;]</p><p>Joseph Reagle: <a href="http://reagle.org/joseph/blog/technology/python/elementtree-model"><cite>XML ElementTree Data Model</cite></a></p><p>Uche Ogbuji: <a href="http://www.xml.com/pub/a/2003/02/12/py-xml.html"><cite>Simple XML Processing With elementtree</cite></a> [xml.com]</p><p>David Mertz: <a href="http://www-106.ibm.com/developerworks/library/x-matters28/"><cite>Process XML in Python with ElementTree: How does the API stack up against similar libraries?</cite></a> [ibm developerworks]</p><p>Uche Ogbuji: <a href="http://www.idealliance.org/papers/dx_xml03/papers/06-02-03/06-02-03.html"><cite>Python Paradigms for XML</cite></a></p><p>Uche Ogbuji: <a href="http://www.xml.com/pub/a/2004/06/30/py-xml.html"><cite>XML Namespaces Support in Python Tools, Part Three</cite></a> [xml.com]</p><p>Uche Ogbuji: <a href="http://www.xml.com/pub/a/2004/08/11/py-xml.html"><cite>Practical SAX Notes: ElementTree, Namespaces and Techniques for Large Documents</cite></a> [xml.com]</p></blockquote><p id="interesting-stuff">Interesting stuff built with (or for) ElementTree (selection):</p><blockquote><p>L. C. Rees:
<a href="http://article.gmane.org/gmane.comp.python.announce/5996">webstring</a>
(webstring is a web templating engine that allows programs to manipulate
XML and HTML documents with standard Python sequence and string
operators. It is designed for those whose preferred web template
languages are Python and HTML (and XML for people who swing that way).</p><p>Chris McDonough:
<a href="http://www.plope.com/software/meld3">meld3</a> (an XML templating system for Python 2.3+ which keeps template markup and dynamic rendering logic separate from one another, based on PyMeld)

</p><p>Peter Hunt:
<a href="http://www.aminus.org/blogs/index.php/phunt/2006/01/27/templating_languages_and_yaptl">pymeld4</a> (another ET-based implementation of the PyMeld templating language)

</p><p>Seo Sanghyeon:
<a href="http://fepy.sourceforge.net/">pyexpat/ElementTree for IronPython</a> (a pyexpat emulation for IronPython which lets you use the standard ElementTree module on that platform)</p><p>Oren Tirosh: <a href="http://www.tothink.com/python/ElementBuilder/">ElementBuilder</a>
(friendly syntax for constructing ElementTree:s)</p><p>Staffan Malmgren: <a href="http://lagen.nu/">lagen.nu</a> (a
nicely formatted, hyperlinked, linkable, and taggable version of
the entire body of swedish law) (<a href="http://blog.tomtebo.org/misc/lagen_nu_is_now_public.html">more
information</a>)</p><p>Ralf Schlatterbeck: <a href="http://ooopy.sourceforge.net/">OOoPy</a> (a tool to inspect, create, and modify OpenOffice.org documents in Python)</p><p>Martijn Faassen: <a href="http://codespeak.net/lxml/">lxml</a>
(ElementTree-compatible bindings for <a href="http://xmlsoft.org">libxml2</a>
and <a href="http://xmlsoft.org/XSLT/">libxslt</a>).</p><p>Martin Pool, et al: <a href="http://bazaar-ng.org/index.html">Bazaar-NG</a> (version management system)</p><p>Seth Vidal, Konstantin Ryabitsev, et al: <a href="http://linux.duke.edu/projects/yum/">Yellow dog Updater, Modified</a> (an automatic updater and package installer/remover for rpm systems)</p><p>Michael Droettboom: <a href="http://pyscore.sf.net/">pyScore</a> (a set of Python-based tools for working with symbolic music notation)</p><p>Ryan Tomayko: <a href="http://splice.sourceforge.net/kid/index.html">Kid</a> (a template language)</p><p>Ken Rimey: <a href="http://pdis.hiit.fi/pdis/download/">PDIS XPath</a> (a more complete XPath implementation)</p><p>Roland Leuthe: <a href="http://www.leuthe.homepage.t-online.de/minixsv/minixsv_overview.html">minixsv</a> (a lightweight XML schema validator written in pure Python)</p><p>Bruno da Silva de Oliveira, Joel de Guzman: <a href="http://www.boost.org/libs/python/pyste/doc/introduction.html">Pyste</a> (a Python binding generator for C++)</p></blockquote><p id="works-in-progress">Works in progress:</p><blockquote><dl><dt><a href="element-qnames.htm"><cite>ElementTree: Working with Qualified Names</cite></a></dt><dt><a href="element-google.htm"><cite>Using the ElementTree Module to Generate Google Requests</cite></a></dt><dt><a href="element-technorati.htm"><cite>A Simple Technorati Client</cite></a></dt><dt><a href="element-wsdl.htm"><cite>Using Element Trees to Parse WSDL Files</cite></a></dt><dt><a href="element-xbel.htm"><cite>Using Element Trees to Parse XBEL Files</cite></a></dt><dt><a href="element-xmlrpc.htm"><cite>Using ElementTrees to Generate XML-RPC Messages</cite></a></dt><dt><a href="element-tkinter.htm"><cite>Generating Tkinter User Interfaces from XML</cite></a></dt><dt><a href="http-xml.htm"><cite>A Simple XML-Over-HTTP Class</cite></a></dt><dt><a href="http-xml-stockticker.htm"><cite>You Can Never Have Too Many Stock Tickers!</cite></a></dt></dl></blockquote></div><div class="yui-u"><div class="sidebar" id="effbot_download"><div class="source"><p><b><a href="/downloads#elementtree">Download Source Code</a></b></p><p>See <a href="#installation">below</a> for additional instructions.</p></div><div class="windows"><p><b><a href="/downloads#elementtree">Download for Windows</a></b></p><p>If the installer cannot find your Python interpreter, see <a href="python-register.htm">this page</a>.</p></div></div></div></div><div class="yui-g"> <div class='adsense'> <script type="text/javascript"><!--
google_ad_client = "pub-0985106753436081";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_type = "text_image";
google_ad_channel = "";
google_color_border = "CCFFCC";
google_color_bg = "FFFFFF";
google_color_link = "008040";
google_color_url = "40cc80";
google_color_text = "404040";
google_ui_features = "rc:0";
//--> </script> <script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script> </div><div class='comment' target-id='None' timestamp='1163803613.05'>
 <p><b>Comment:</b></p>
 <p>On some Linux systems, notably Debian-based systems, you'll need to have the Python2.3-dev (or Python2.4-dev) package installed in order to be able to compile C extensions.</p>
 <p>Posted by <b class='author'>Berco</b> <span class='mark'>(2006-11-17)</span></p>
</div>
</div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/">::: effbot.org</a></b></li> <li><b><a href=".">::: zone :::</a></b></li> </ul> <ul><li><b>contents :::</b></li></ul> <ul><li><a href="#installation">Installation</a></li><li><a href="#usage">Basic Usage</a></li><li><a href="#documentation">Documentation</a></li></ul> </div> <!-- menu --> <div class='adsense'> <script type="text/javascript"><!--
google_ad_client = 'pub-0985106753436081';
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = '160x600_as';
google_ad_channel ="6557156704";
google_color_border = "CCFFCC";
google_color_bg = "FFFFFF";
google_color_link = "008040";
google_color_url = "40cc80";
google_color_text = "404040";
// --> </script> <script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> </script> </div> <!-- adsense --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15_grey.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.17s 2007-09-22 10:27:11.364121.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
