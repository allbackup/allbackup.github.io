<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Top-level&nbsp;components</title> <script type="text/javascript">effbot_page_id=1522;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Top-level&nbsp;components</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p>The Python interpreter can get its input from a number of sources:
from a script passed to it as standard input or as program argument,
typed in interactively, from a module source file, etc. This chapter
gives the syntax used in these cases.</p><h1>Complete Python programs</h1><p>While a language specification need not prescribe how the language interpreter is invoked, it is useful to have a notion of a complete Python program. A complete Python program is executed in a minimally initialized environment: all built-in and standard modules are available, but none have been initialized, except for sys (various system services), __builtin__ (built-in functions, exceptions and <code>None</code>) and __main__. The latter is used to provide the local and global namespace for execution of the complete program.</p><p>The syntax for a complete Python program is that for file input, described in the next section.</p><p>The interpreter may also be invoked in interactive mode; in this case, it does not read and execute a complete program but reads and executes one statement (possibly compound) at a time. The initial environment is identical to that of a complete program; each statement is executed in the namespace of  __main__.</p><p>Under Unix, a complete program can be passed to the interpreter in three forms: with the <strong>-c</strong> string command line option, as a file passed as the first command line argument, or as standard input. If the file or standard input is a tty device, the interpreter enters interactive mode; otherwise, it executes the file as a complete program.</p><h1 id="file-input">File input&#160;<a class="nav" href="#file-input" title="bookmark!">#</a></h1><p>All input read from non-interactive files has the same form:</p><p>file_input ::= (NEWLINE | <a href="exprlists.html#tok-expression_list">statement</a>)*</p><p>This syntax is used in the following situations:</p><ul><li>when parsing a complete Python program (from a file or from a string);</li><li>when parsing a module;</li><li>when parsing a string passed to the  exec statement;</li></ul><h1 id="interactive-input">Interactive input&#160;<a class="nav" href="#interactive-input" title="bookmark!">#</a></h1><p>Input in interactive mode is parsed using the following grammar:</p><p>interactive_input ::= <a href="exprlists.html#tok-expression_list">[stmt_list</a>] NEWLINE | <a href="grammar.txt"> compound_stmt</a> NEWLINE</p><p>Note that a (top-level) compound statement must be followed by a blank line in interactive mode; this is needed to help the parser detect the end of the input.</p><h1 id="expression-input">Expression input&#160;<a class="nav" href="#expression-input" title="bookmark!">#</a></h1><p>There are two forms of expression input. Both ignore leading whitespace. The string argument to eval() must have the following form:</p><p>eval_input ::= <a href="exprlists.html#tok-expression_list">expression_list</a> NEWLINE*</p><p>The input line read by input() must have the following form:</p><p>input_input ::= <a href="exprlists.html#tok-expression_list">expression_list</a> NEWLINE</p><p>Note: to read `raw&#8217; input line without interpretation, you can use the built-in function raw_input() or the readline() method of file objects.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li> <li><b><a href="." title="Go to pyref index page.">::: pyref :::</a></b></li> </ul> <ul><li><b>::: contents</b></li></ul> <ul><li><a href="#file-input">File input</a></li><li><a href="#interactive-input">Interactive input</a></li><li><a href="#expression-input">Expression input</a></li></ul> </div> <!-- menu --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.01s 2011-06-21 21:20:23.817681.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
