
@@module new

<h1>new&#8212;Creation of runtime internal objects</h1>

<p>The {@link new} module allows an interface to the interpreter object
creation functions. This is for use primarily in marshal-type functions,
when a new object needs to be created &#8220;magically&#8221; and not by
using the regular creation functions. This module provides a low-level
interface to the interpreter, so care must be exercised when using this
module. It is possible to supply non-sensical arguments which crash the
interpreter when the object is used.

<p>The {@link new} module defines the following functions:

@@function instance(class[, dict])

<p>This function creates an instance of {@var class} with dictionary
{@var dict} without calling the {@link __init__} constructor. If {@var
dict} is omitted or {@link None}, a new, empty dictionary is created for
the new instance. Note that there are no guarantees that the object will
be in a consistent state.

@@function instancemethod(function, instance, class)

<p>This function will return a method object, bound to {@var instance},
or unbound if {@var instance} is {@code None}. {@var function} must be
callable.

@@function function(code, globals[, name[, argdefs]])

<p>Returns a (Python) function with the given code and globals. If {@var
name} is given, it must be a string or {@link None}. If it is a string,
the function will have the given name, otherwise the function name will
be taken from {@var code}.co_name. If {@var argdefs} is given, it must
be a tuple and will be used to determine the default values of
parameters.

@@function code(argcount, nlocals, stacksize, flags, codestring, constants, names, varnames, filename, name, firstlineno, lnotab)

<p>This function is an interface to the {@link c:PyCode_New} C function.

@@function module(name)

<p>This function returns a new module object with name {@var name}.
{@var name} must be a string.

@@function classobj(name, baseclasses, dict)

<p>This function returns a new class object, with name {@var name},
derived from {@var baseclasses} (which should be a tuple of classes) and
with namespace {@var dict}.
