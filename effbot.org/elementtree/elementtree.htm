<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The ElementTree Module (Work In&nbsp;Progress)</title></head><body data-page-id="1999"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The ElementTree Module (Work In&nbsp;Progress)</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | December 2007</p><h2 id="classes">Classes&#160;<a class="nav" href="#classes" title="bookmark!">#</a></h2><h3 id="tag-ElementTree.Element">Element and SubElement&#160;<a class="nav" href="#tag-ElementTree.Element" title="bookmark!">#</a></h3><p>The core Element type, which represents an XML element
with associated attribute- and character data.  The
SubElement factory creates an Element, and adds it to
a parent element.</p><p>See <a href="elementtree-element.htm">The Element API</a>.</p><h3 id="tag-ElementTree.ElementTree">ElementTree&#160;<a class="nav" href="#tag-ElementTree.ElementTree" title="bookmark!">#</a></h3><p>A wrapper class that represents an XML document.  This is
mainly used to read and write XML documents from file.</p><p>See <a href="elementtree-elementtree.htm">The ElementTree API</a>.</p><h3 id="tag-ElementTree.XMLParser">XMLParser&#160;<a class="nav" href="#tag-ElementTree.XMLParser" title="bookmark!">#</a></h3><p>A low-level, event-generating XML parser.</p><p>See <a href="elementtree-xmlparser.htm">The XMLParser API</a>.</p><h3 id="tag-ElementTree.TreeBuilder">TreeBuilder&#160;<a class="nav" href="#tag-ElementTree.TreeBuilder" title="bookmark!">#</a></h3><p>A tree builder, which translates an XMLParser-style event
stream to an Element tree.</p><p>See <a href="elementtree-treebuilder.htm">The TreeBuilder API</a>.</p><h2 id="functions">Functions&#160;<a class="nav" href="#functions" title="bookmark!">#</a></h2><p>The <strong>ElementTree</strong> module contains the following functions:</p><h3 id="tag-ElementTree.iselement">iselement&#160;<a class="nav" href="#tag-ElementTree.iselement" title="bookmark!">#</a></h3><p><strong>iselement(obj)</strong> &#8658; bool</p><p>Checks if an object appears to be a valid element object.</p><p>The current ElementTree implementation checks if the object
is of a known element type, or if it has a <strong>tag</strong> attribute.  Other implementations may use stricter tests.</p><h3 id="tag-ElementTree.parse">parse&#160;<a class="nav" href="#tag-ElementTree.parse" title="bookmark!">#</a></h3><p><strong>parse(source)</strong> &#8658; an ElementTree object</p><p>Parses XML data from a file or file-like object, and returns an <strong>ElementTree</strong> object.</p><pre class="python">tree = ET.parse(<span class="pystring">"sample.xml"</span>)

tree = ET.parse(urllib.urlopen(<span class="pystring">"http://site/file.xml"</span>))</pre><p>To parse XML data from a string, use the <strong>XML</strong> helper instead.</p><p><strong>parse(source, parser)</strong> &#8658; an ElementTree object</p><p>Same, but uses the given parser instance.  You can use this to plug in an alternate parser, or to override the document encoding when using the standard parser:</p><pre class="python">parser = ET.XMLParser(encoding=<span class="pystring">"iso-8859-1"</span>)
tree = ET.parse(source, parser)</pre><h4>Exception Handling</h4><p>In 1.3 and later, this method raises a <strong>ParseError</strong> exception (a subclass of <strong>SyntaxError</strong>) if the source data is malformed.</p><p>In earlier versions, the exception used is implementation dependent; cElementTree 1.0 uses a <strong>SyntaxError</strong> exception, other versions usually propagate the exception raised by the internal parser implementation (e.g. <strong>pyexpat.error</strong> for pyexpat-based parsers).</p><p>To emulate 1.3 in earlier versions, you can use something like:</p><pre class="python"><span class="pykeyword">try</span>:
    ParseError = ET.ParseError
<span class="pykeyword">except</span> AttributeError:
    <span class="pykeyword">try</span>:
        XML(<span class="pystring">"&lt;foo&gt;"</span>)
    <span class="pykeyword">except</span>:
        <span class="pykeyword">from</span> sys <span class="pykeyword">import</span> exc_type <span class="pykeyword">as</span> ParseError <span class="pycomment"># (!)</span></pre><h3 id="tag-ElementTree.iterparse">iterparse&#160;<a class="nav" href="#tag-ElementTree.iterparse" title="bookmark!">#</a></h3><p><strong>iterparse(source, options)</strong> &#8658; a generated (event, element) stream</p><p>Parses data from a file or file-like object, and generates a sequence of (event, element)-tuples.</p><p>The following options can be given as keyword arguments:</p><p><strong>events=</strong> A list of events to include in the event stream.  If omitted, only &#8220;end&#8221; events are reported.  Note that the parser will use the string objects you pass in as events, so you can use <strong>is</strong> for comparision in the event handler.</p><p><strong>parser=</strong> A parser instance.  If omitted, the standard <strong>XMLParser</strong> is used.</p><h4>Supported Events</h4><p>By default, the parser returns control to the caller when it sees an end tag (which means that the corresponding element has been fully populated, except for the <strong>tail</strong> attribute), but you can use an option to tell it to return more events.  The following events are available:</p><p><strong>end</strong>: Indicates that an element is complete, including attributes, text content, and subelements, but not including the tail attribute.</p><p><strong>start</strong>: Indicates that an element has just been created.  The attributes are properly set up, but the text content and the subelements are not available yet.</p><p><strong>start-ns</strong>: Indicates that a new namespace scope has been opened.  In this case, the second tuple item is a (prefix, uri) tuple.</p><p><strong>end-ns</strong>: Indicates that the most recent namespace scope has been closed.  In this case, the second tuple item is None.</p><h4>Notes</h4><p>You can modify the tree during parsing, for example to remove
subtrees that you have already processed.</p><pre class="python"><span class="pykeyword">for</span> event, elem <span class="pykeyword">in</span> ET.iterparse(file):
    <span class="pykeyword">if</span> elem.tag == <span class="pystring">"record"</span>:
        <span class="pycomment"># process record</span>
        elem.clear() <span class="pycomment"># won't need this again</span></pre><p>The parsing process is asynchronous; the parser reads data from the source in blocks, and processes all XML tags and data sections in that block before it returns them to the caller.</p><p>This means that the tree will often be more complete than the events indicate; for example, the entire element may be processed when the &#8220;start&#8221; event arrives, or one or more sibling elements can be present you see an &#8220;end&#8221; event.  For small files, the entire tree might have been built before you see the first event.  Make sure your code doesn&#8217;t rely on this.</p><h3 id="tag-ElementTree.XML">XML&#160;<a class="nav" href="#tag-ElementTree.XML" title="bookmark!">#</a></h3><p><strong>XML(data)</strong> &#8658; element</p><p>Parse XML data from a string buffer, and returns the root element.</p><p>Note that the string must contain encoded data.  If you want to parse data from a Unicode string, you need to encode it first.</p><p><strong>XML(data, parser)</strong> &#8658; element</p><p>Same, but allows you to pass in a custom parser.</p><h3 id="tag-ElementTree.XMLID">XMLID&#160;<a class="nav" href="#tag-ElementTree.XMLID" title="bookmark!">#</a></h3><p><strong>XML(data)</strong> &#8658; element, dictionary</p><p><strong>XML(data, parser)</strong> &#8658; element, dictionary</p><p>Same as <strong>XML</strong>, but returns both the root element and a dictionary mapping &#8220;id&#8221; attributes to elements.</p><h3 id="tag-ElementTree.tostring">tostring&#160;<a class="nav" href="#tag-ElementTree.tostring" title="bookmark!">#</a></h3><p><strong>tostring(elem)</strong> &#8658; string</p><p>Generates a XML representation of the given element,
including all subelements.  The output is encoded as US-ASCII, and any non-ASCII character is encoded as character references.</p><p><strong>tostring(elem, encoding)</strong> &#8658; string</p><p>Same, but encodes the output in the given encoding.</p><h3 id="tag-ElementTree.tostringlist">tostringlist&#160;<a class="nav" href="#tag-ElementTree.tostringlist" title="bookmark!">#</a></h3><p><strong>tostringlist(elem)</strong> &#8658; list of string fragments</p><p><strong>tostringlist(elem, encoding)</strong> &#8658; list of string fragments</p><p>(New in 1.3) Same as <strong>tostring</strong>, but returns a list of string fragments instead of a single string.  This can sometimes be more efficient, since ET doesn&#8217;t have to allocate a single large string.</p><h3 id="tag-ElementTree.fromstring">fromstring&#160;<a class="nav" href="#tag-ElementTree.fromstring" title="bookmark!">#</a></h3><p><strong>fromstring(data)</strong> &#8658; element</p><p><strong>fromstringlist(data, parser)</strong> &#8658; element</p><p>Same as <strong>XML</strong>.</p><h3 id="tag-ElementTree.fromstringlist">fromstringlist&#160;<a class="nav" href="#tag-ElementTree.fromstringlist" title="bookmark!">#</a></h3><p><strong>fromstringlist(list)</strong> &#8658; element</p><p><strong>fromstringlist(list, parser)</strong> &#8658; element</p><p>(New in 1.3) Same as <strong>XML</strong> and <strong>fromstring</strong>, but takes a list of string fragments instead of a single string.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to elementtree index page.">::: elementtree :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><a href="#classes">Classes</a></li><li><ul><li><a href="#tag-ElementTree.Element">Element and SubElement</a></li><li><a href="#tag-ElementTree.ElementTree">ElementTree</a></li><li><a href="#tag-ElementTree.XMLParser">XMLParser</a></li><li><a href="#tag-ElementTree.TreeBuilder">TreeBuilder</a></li></ul></li><li><a href="#functions">Functions</a></li><li><ul><li><a href="#tag-ElementTree.iselement">iselement</a></li><li><a href="#tag-ElementTree.parse">parse</a></li><li><a href="#tag-ElementTree.iterparse">iterparse</a></li><li><a href="#tag-ElementTree.XML">XML</a></li><li><a href="#tag-ElementTree.XMLID">XMLID</a></li><li><a href="#tag-ElementTree.tostring">tostring</a></li><li><a href="#tag-ElementTree.tostringlist">tostringlist</a></li><li><a href="#tag-ElementTree.fromstring">fromstring</a></li><li><a href="#tag-ElementTree.fromstringlist">fromstringlist</a></li></ul></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
