
@@module glob

<h1>glob&#8212;Unix style pathname pattern expansion</h1>

<p>The {@link glob} module finds all the pathnames matching a specified
pattern according to the rules used by the Unix shell. No tilde
expansion is done, but {@code *}, {@code ?}, and character ranges
expressed with {@code []} will be correctly matched. This is done by
using the {@link os.listdir} and {@link fnmatch.fnmatch} functions in
concert, and not by actually invoking a subshell. (For tilde and shell
variable expansion, use {@link os.path.expanduser} and {@link
os.path.expandvars}.)

@@function glob(pathname)

<p>Returns a possibly-empty list of path names that match {@var
pathname}, which must be a string containing a path specification. {@var
pathname} can be either absolute (like /usr/src/Python-1.5/Makefile) or
relative (like ../../Tools/*/*.gif), and can contain shell-style
wildcards. Broken symlinks are included in the results (as in the
shell).

@@text 

<p>For example, consider a directory containing only the following
files: 1.gif, 2.txt, and card.gif. {@link glob} will produce the
following results. Notice how any leading components of the path are
preserved.

<pre>
&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('./[0-9].*')
['./1.gif', './2.txt']
&gt;&gt;&gt; glob.glob('*.gif')
['1.gif', 'card.gif']
&gt;&gt;&gt; glob.glob('?.gif')
['1.gif']
</pre>


@see 
{@link fnmatch Module fnmatch}

Shell-style filename (not path) expansion.
