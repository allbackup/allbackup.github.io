<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Some Notes on Moving the Zone to&nbsp;Django</title> <script type="text/javascript">effbot_page_id=2;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles
 (including this one) 
now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Some Notes on Moving the Zone to&nbsp;Django</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | August 2007</p><p class="note"><b>Updated 2007-08-20:</b> Added sections on caching and resource &#8220;minification&#8221;.</p><p>The effbot.org &#8220;zone&#8221; is a constantly growing collection of documents, most of them concerning various aspects of Python and related technologies.  The zone software is also used for my <a href="/imagingbook">PIL</a> and <a href="/tkinterbook">Tkinter</a> documentation, the online edition of my <a href="/librarybook">Python Standard Library</a> book, and a couple of other document collections.</p><p>All in all, the zones at effbot.org currently contain around 2,000 documents, plus some 500 user comments.</p><p>Until now, the zone has been served as static HTML, generated and maintained using an increasinly disorganized collection of CGI scripts and off-site tools.  Given that we moved <a href="http://www.pythonware.com">pythonware.com</a> to <a href="http://www.djangoproject.com">Django</a> late last year, it&#8217;s about time I did the same to effbot.org.</p><h2 id="design">Design&#160;<a class="nav" href="#design" title="bookmark!">#</a></h2><p>My original plan was to use the old effbot.org templates pretty much as they were, but all recent talk about <a href="http://www.subtraction.com/archives/2007/0807_the_framewor.php">CSS frameworks</a>, and how they&#8217;d ruin the field of web design by leaving it open for people who just cannot be bothered to learn everything there is to know about cross-platform CSS inanities, made me curious.  I grabbed a copy of the <a href="http://developer.yahoo.com/yui/">Yahoo! User Interface Library</a>, and went to work.  I set up the following requirements:</p><ul><li>No radical redesign; the new site should look similar to the old one.</li><li>Identical look for a majority of my visitors &#8212; in other words, for IE and Firefox.</li><li>Scalable layout in both IE and Firefox.  Most importantly, <em>increasing</em> the font size should work well (for people with reduced eye-sight or high-DPI displays).</li><li>Support for 80-column wide code samples.</li><li>The site should be fully usable with CSS disabled.</li></ul><p>Implementing this on YUI was surprisingly easy.  The current design use a 950px wide base layout, with a 180px navigation column to the left.  The remaining space is split into two parts, with around 550px effective space (3/4) for the main column, and 180px (1/4) for a sidebar column to the right.  Document blocks can be placed in the sidebar or the main column, or they can cover both columns.  A combination of class names and render heuristics is used to handle block placement. Some source-code examples:</p><pre><code>&lt;p class="sidebar"&gt;This text goes into the
sidebar.&lt;/p&gt;

&lt;p&gt;This goes into the main column.&lt;/p&gt;

&lt;pre class="wide"&gt;
This wide code example extends into the sidebar.
&lt;/pre&gt;
</code></pre><p>The &#8220;wide&#8221; class is automatically added to wide PRE sections (currently, the limit is 55 characters).  A wide column is wide enough to hold just over 80 columns of preformatted text.</p><h3 id="aiming-for-typographic-perfection">Aiming for Typographic Perfection&#160;<a class="nav" href="#aiming-for-typographic-perfection" title="bookmark!">#</a></h3><p>I experimented a little with Chad Miller&#8217;s <a href="http://web.chad.org/projects/smartypants.py/">SmartyPants</a> implementation for Python in the final rendering step, but it was horribly slow &#8212; at least compared to the rest of the rendering chain.  I ended up applying this during conversion to the intermediate format instead.</p><p>(I haven&#8217;t looked at the code, but it seems to me as if it should be possible to apply the SmartyPants algorithms to the existing Element tree, rather than having to serialize the document and then run it through SmartyPants&#8217; home-grown HTML parser).</p><p>I&#8217;m also doing some microtuning in the rendering stage, including inserting hard spaces in titles to keep the last few words together, trimming off trailing whitespace in PRE CODE sections, etc.</p><h2 id="performance">Performance&#160;<a class="nav" href="#performance" title="bookmark!">#</a></h2><p>The effbot.org site isn&#8217;t exactly a high-traffic site, but since I&#8217;m interested in performance and scalability issues, I set up some basic requirements:</p><ul><li>Efficient data transfer to client (support for compression, validation/conditional requests, etc).</li><li>Efficient caching</li><li>Efficient dynamic rendering on cache misses</li></ul><p>Django provides middleware for compression (GZipMiddleware), validation (ConditionalGetMiddleware), and caching (CacheMiddleware).  The only problem was to apply them in the right order (see below for more on this).</p><p>Rendering required a bit more code.  Zone sources are provided in a number of formats, but they&#8217;re primarily written in an HTML subset (just the &lt;body&gt; contents) and in Markdown with some Infogami-style extensions.  Metadata is extracted from the source documents, which makes it easy to author zone documents in pretty much any text editor.</p><p>To speed up rendering, the new system converts from the source to an intermediate XML format when documents are added to the database (via a <strong>save</strong> override on the relevant model).  The intermediate format is then turned into proper HTML and pushed through Django templates on the fly.</p><p>The intermediate format is basically an XHTML document, with the following extensions:</p><ul><li>Support for dynamic titles (fetched from the target on demand)</li><li>Support for inline images.</li><li>Support for local menus (based on headings on page).</li><li>Support for intelligent links.</li><li>Support for program code colorization.</li></ul><p>Inline images are stored as data URI:s in the intermediate format (and usually also in the source documents), but since not all browsers support this format, 