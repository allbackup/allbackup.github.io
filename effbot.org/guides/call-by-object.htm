<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Call By&nbsp;Object</title> <script type="text/javascript">effbot_page_id=19;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles

now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Call By&nbsp;Object</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><blockquote>
&#8220;<i>When <u>I</u> use a word, Humpty Dumpty said, in a rather scornful
tone, it means just what I choose it to mean, neither more nor less.</i>
<p>
<i>The question is, said Alice, whether you <u>can</u> make words
mean so many different things.</i>
</p><p>
<i>The question is, said Humpty Dumpty, which is to be master &#8212;
that&#8217;s all.</i>&#8221;
</p></blockquote><p>From time to time, people who&#8217;ve read a little CS but not a lot CS
(or too much of just one kind of CS)
pop up on comp.lang.python and waste a lot of energy trying to tell
everyone that Python&#8217;s using some calling model that it doesn&#8217;t really
use.  It always turns out that they don&#8217;t really understand Python&#8217;s
model, and quite often, they don&#8217;t understand their favourite model
either.</p><p>But nevermind, the only thing <i>you</i> need to know is that Python&#8217;s
model is neither &#8220;call by value&#8221; nor &#8220;call by reference&#8221; (because any
attempt to use those terms for Python requires you to use non-standard
definitions of the words &#8220;-value&#8221; and &#8220;-reference&#8221;).
The most accurate description is CLU&#8217;s
&#8220;<b>call by object</b>&#8221; or
&#8220;<b>call by sharing</b>&#8220;.
Or, if you prefer, &#8220;<b>call by object reference</b>&#8220;.</p><p>You should also read <a href="python-objects.htm">this</a>, if you
haven&#8217;t done so already.

</p><p>The following excerpts are taken from an old comp.lang.python thread.
The interesting parts are the CLU texts, which provide a very concise
description of Python&#8217;s calling model.</p><p>(Some day, I&#8217;ll turn this into a proper article&#8230;)</p><hr /></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide">
Date: Wed, 14 May 2003 08:48:08 +0200

&gt; See
&gt;
&gt;   http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?call-by-value
&gt;
&gt; What you describe is call-by-value.

It's interesting that you quote FOLDOC, given that FOLDOC doesn't
refer to Python's model as call-by-value, as can be seen in the CLU
entry:

    http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?CLU

    "Arguments are passed by call-by-sharing, similar to
    call-by-value, except that the arguments are objects
    and can be changed only if they are mutable."

Note the use of the words "similar" and "except".

For a brief description of CLU's object and argument passing models,
see [1].  I think you'll find that it matches Python's model pretty well.

The CLU Reference Manual [2] by Liskov et al says (page 14):

    "We call the argument passing technique _call by sharing_,
    because the argument objects are shared between the
    caller and the called routine.  This technique does not
    correspond to most traditional argument passing techniques
    (it is similar to argument passing in LISP).  In particular it
    is not call by value because mutations of arguments per-
    formed by the called routine will be visible to the caller.
    And it is not call by reference because access is not given
    to the variables of the caller, but merely to certain objects."

Note the use of "does not" and the repeated use of "it is not".
Let me emphasise:

    "IN PARTICULAR IT IS NOT CALL BY VALUE because mutations
    of arguments performed by the called routine will be visible to
    the caller. And IT IS NOT CALL BY REFERENCE because access
    is not given to the variables of the caller, but merely to certain
    objects."

CLU was designed in the mid-seventies, and this reference manual
was published in 1979.  In other literature, the CLU designers some-
times refer to this model as "call by object" [3], or they carefully
ignore the issue by talking about "objects" instead of values, and
"objects that refer to other objects" instead of references [1], but
I cannot find a single place where they've gone from "in particular
it is not call by value" to "it is call by value".

So what's your excuse for being stuck in the early seventies? ;-)

&lt;/F&gt;

1) http://www.cs.berkeley.edu/~jcondit/pl-prelim/liskov77clu.pdf
2) http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf
3) http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-561.pdf
</pre></div><div class="yui-ge"><div class="yui-u first"><hr /></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide">
Date: Wed, 14 May 2003 15:49:09 +0200

&gt; Also interesting that [call-by-sharing] is missing

did you read the "Why is this definition missing?" page?

(the FOLDOC maintainers add links to articles that should be written
some day, and keeps track of how many clicks the links get, so they
can focus on things that people really want to read about)

&gt; For a good intro to semantics, I sugest
&gt;
&gt;   Essentials of Programming Languages
&gt;   Daniel P. Friedman, Mitchell Wand, Christopher Thomas Haynes

if all you have is scheme, etc.

&gt; I'm not familiar with CLU

I suggest reading reference 3.

    http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-561.pdf

CLU is an important milestone in the development of OO languages;
to quote Liskov herself, from the above paper:

    "The work on CLU, and other related work such as that on
    Alphard, served to crystallize the idea of a data abstraction
    and make it precise. As a result, the notion is widely used as
    an organizing principle in program design and has become a
    cornerstone of modern programming methodology."

if you don't know your history, etc.

&gt; but I think this description of Python's argument-passing
&gt; semantics is misleading.

did you read reference 1?

    http://www