<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>D. Writing Your Own File&nbsp;Decoder</title></head><body data-page-id="391"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><p><a href="formats.htm">back</a></p><h1 class="maintitle">D. Writing Your Own File&nbsp;Decoder</h1></div><div class="yui-ge"><div class="yui-u first"><p>The Python Imaging Library uses a <i>plug-in</i> model which
allows you to add your own decoders to the library, without any
changes to the library itself. Such plug-ins have names like
<b>XxxImagePlugin.py</b>, where <b>Xxx</b> is a unique format name
(usually an abbreviation).</p><p>A decoder plug-in should contain a decoder class, based on the
<b>ImageFile</b> base class defined in the module with the same
name. This class should provide an <b>_open</b> method, which reads
the file header and sets up at least the <b>mode</b> and
<b>size</b> attributes. To be able to load the file, the method must
also create a list of <b>tile</b> descriptors. The class must be
explicitly registered, via a call to the <b>Image</b> module.</p><p>For performance reasons, it is important that the <b>_open</b>
method quickly rejects files that do not have the appropriate
contents.</p><h2 id="example">Example&#160;<a class="nav" href="#example" title="bookmark!">#</a></h2><p>The following plug-in supports a simple format, which has a
128-byte header consisting of the words &#8220;SPAM&#8221; followed by the
width, height, and pixel size in bits. The header fields are
separated by spaces. The image data follows directly after the
header, and can be either bi-level, greyscale, or 24-bit true
colour.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b>File: SpamImagePlugin.py</b>
<pre class="python wide">
<span class="pykeyword">import</span> Image, ImageFile
<span class="pykeyword">import</span> string

<span class="pykeyword">class</span> <span class="pyclass">SpamImageFile</span>(ImageFile.ImageFile):

    format = <span class="pystring">"SPAM"</span>
    format_description = <span class="pystring">"Spam raster image"</span>

    <span class="pykeyword">def</span> <span class="pyfunction">_open</span>(self):

        <span class="pycomment"># check header</span>
        header = self.fp.read(128)
        <span class="pykeyword">if</span> header[:4] != <span class="pystring">"SPAM"</span>:
            <span class="pykeyword">raise</span> SyntaxError, <span class="pystring">"not a SPAM file"</span>

        header = string.split(header)

        <span class="pycomment"># size in pixels (width, height)</span>
        self.size = int(header[1]), int(header[2])

        <span class="pycomment"># mode setting</span>
        bits = int(header[3])
        <span class="pykeyword">if</span> bits == 1:
            self.mode = <span class="pystring">"1"</span>
        <span class="pykeyword">elif</span> bits == 8:
            self.mode = <span class="pystring">"L"</span>
        <span class="pykeyword">elif</span> bits == 24:
            self.mode = <span class="pystring">"RGB"</span>
        <span class="pykeyword">else</span>:
            <span class="pykeyword">raise</span> SyntaxError, <span class="pystring">"unknown number of bits"</span>

        <span class="pycomment"># data descriptor</span>
        self.tile = [
            (<span class="pystring">"raw"</span>, (0, 0) + self.size, 128, (self.mode, 0, 1))
        ]

Image.register_open(<span class="pystring">"SPAM"</span>, SpamImageFile)

Image.register_extension(<span class="pystring">"SPAM"</span>, <span class="pystring">".spam"</span>)
Image.register_extension(<span class="pystring">"SPAM"</span>, <span class="pystring">".spa"</span>) <span class="pycomment"># dos version</span></pre></div></div><div class="yui-ge"><div class="yui-u first"><p>The format handler must always set the <b>size</b> and
<b>mode</b> attributes. If these are not set, the file cannot be
opened. To simplify the decoder, the calling code considers
exceptions like <b>SyntaxError, KeyError,</b> and
<b>IndexError,</b> as a failure to identify the file.</p><p>Note that the decoder must be explicitly registered using the
<b>register_open</b> function in the <b>Image</b> module. Although
not required, it is also a good idea to register any extensions
used by this format.</p><h2 id="the-tile-attribute">The Tile Attribute&#160;<a class="nav" href="#the-tile-attribute" title="bookmark!">#</a></h2><p>To be able to read the file as well as just identifying it, the
<b>tile</b> attribute must also be set. This attribute consists of
a list of tile descriptors, where each descriptor specifies how
data should be loaded to a given region in the image. In most
cases, only a single descriptor is used, covering the full
image.</p><p>The tile descriptor is a 4-tuple with the following
contents:</p><pre>
    (decoder, region, offset, parameters)
</pre><p>The fields are used as follows:</p><dl><dt><b>decoder</b></dt><dd><p>Specifies which decoder to use. The &#8220;raw&#8221;
decoder used here supports uncompressed data, in a variety of pixel
formats. For more information on this decoder, see the description
below.</p></dd>
<dt><b>region</b></dt><dd><p>A 4-tuple specifying where to store data in the
image.</p></dd>
<dt><b>offset</b></dt><dd><p>Byte offset from the beginning of the file to
image data.</p></dd>
<dt><b>parameters</b></dt><dd><p>Parameters to the decoder. The contents of this
field depends on the decoder specified by the first field in the tile
descriptor tuple. If the decoder doesn&#8217;t need any parameters, use None
for this field.</p></dd>
</dl><p>Note that the <b>tile</b> attribute contains a <i>list</i> of
tile descriptors, not just a single descriptor.</p><h2 id="the-raw-decoder">The Raw Decoder&#160;<a class="nav" href="#the-raw-decoder" title="bookmark!">#</a></h2><p>The raw decoder is used to read uncompressed data from an image
file. It can be used with most uncompressed file formats, such as
PPM, BMP, uncompressed TIFF, and many others. To use the raw
decoder with the <b>Image.fromstring</b> function, use the following
syntax:</p><pre class="python">
    image = Image.fromstring(
        mode, size, data, <span class="pystring">"raw"</span>,
        raw mode, stride, orientation
        )</pre><p>When used in a tile descriptor, the parameter field should look
like:</p><pre>
    (raw mode, stride, orientation)
</pre><p>The fields are used as follows:</p><dl><dt><b>raw mode</b></dt><dd><p>The pixel layout used in the file, and is used
to properly convert data to PIL&#8217;s internal layout. For a summary of
the available formats, see the table below.</p></dd>
<dt><b>stride</b></dt><dd><p>The distance in bytes between two consecutive
lines in the image. If 0, the image is assumed to be packed (no
padding between lines). If omitted, the stride defaults to 0.</p></dd>
<dt><b>orientation</b></dt><dd><p>Whether the first line in the image is the
top line on the screen (1), or the bottom line (-1). If omitted,
the orientation defaults to 1.</p></dd>
</dl><p>The <b>raw mode</b> field is used to determine how the data
should be unpacked to match PIL&#8217;s internal pixel layout. PIL
supports a large set of raw modes; for a complete list, see the
table in the <b>Unpack.c</b> module. The following table describes
some commonly used <b>raw modes</b>:</p><table class="simpletable">
<tr><th>mode</th><th>description</th></tr>
<tr><td>&#8220;1&#8221;</td><td>1-bit bilevel, stored with the leftmost pixel
in the most significant bit. 0 means black, 1 means white.</td></tr>
<tr><td>&#8220;1;I&#8221;</td><td>1-bit inverted bilevel, stored with the
leftmost pixel in the most significant bit. 0 means white, 1 means
black.</td></tr>
<tr><td>&#8220;1;R&#8221;</td><td>1-bit reversed bilevel, stored with the
leftmost pixel in the least significant bit. 0 means black, 1 means
white.</td></tr>
<tr><td>&#8220;L&#8221;</td><td>8-bit greyscale. 0 means black, 255 means
white.</td></tr>
<tr><td>&#8220;L;I&#8221;</td><td>8-bit inverted greyscale. 0 means white, 255
means black.</td></tr>
<tr><td>&#8220;P&#8221;</td><td>8-bit palette-mapped image.</td></tr>
<tr><td>&#8220;RGB&#8221;</td><td>24-bit true colour, stored as (red, green,
blue).</td></tr>
<tr><td>&#8220;BGR&#8221;</td><td>24-bit true colour, stored as (blue, green,
red).</td></tr>
<tr><td>&#8220;RGBX&#8221;</td><td>24-bit true colour, stored as (blue, green,
red, pad).</td></tr>
<tr><td>&#8220;RGB;L&#8221;</td><td>24-bit true colour, line interleaved
(first all red pixels, the all green pixels, finally all blue
pixels).</td></tr>
</table><p>Note that for the most common cases, the raw mode is simply the
same as the mode.</p><p>The Python Imaging Library supports many other decoders,
including JPEG, PNG, and PackBits. For details, see the
<b>decode.c</b> source file, and the standard plug-in implementations
provided with the library.</p><h2 id="decoding-floating-point-data">Decoding Floating Point Data&#160;<a class="nav" href="#decoding-floating-point-data" title="bookmark!">#</a></h2><p>PIL provides some special mechanisms to allow you to load a wide
variety of formats into a mode &#8220;F&#8221; (floating point) image
memory.</p><p>You can use the &#8220;raw&#8221; decoder to read images where data is
packed in any standard machine data type, using one of the
following raw modes:</p><table class="simpletable">
<tr><th>mode</th><th>description</th></tr>
<tr><td>&#8220;F&#8221;</td><td>32-bit native floating point.</td></tr>
<tr><td>&#8220;F;8&#8221;</td><td>8-bit unsigned integer.</td></tr>
<tr><td>&#8220;F;8S&#8221;</td><td>8-bit signed integer.</td></tr>
<tr><td>&#8220;F;16&#8221;</td><td>16-bit little endian unsigned integer.</td></tr>
<tr><td>&#8220;F;16S&#8221;</td><td>16-bit little endian signed integer.</td></tr>
<tr><td>&#8220;F;16B&#8221;</td><td>16-bit big endian unsigned integer.</td></tr>
<tr><td>&#8220;F;16BS&#8221;</td><td>16-bit big endian signed integer.</td></tr>
<tr><td>&#8220;F;16N&#8221;</td><td>16-bit native unsigned integer.</td></tr>
<tr><td>&#8220;F;16NS&#8221;</td><td>16-bit native signed integer.</td></tr>
<tr><td>&#8220;F;32&#8221;</td><td>32-bit little endian unsigned integer.</td></tr>
<tr><td>&#8220;F;32S&#8221;</td><td>32-bit little endian signed integer.</td></tr>
<tr><td>&#8220;F;32B&#8221;</td><td>32-bit big endian unsigned integer.</td></tr>
<tr><td>&#8220;F;32BS&#8221;</td><td>32-bit big endian signed integer.</td></tr>
<tr><td>&#8220;F;32N&#8221;</td><td>32-bit native unsigned integer.</td></tr>
<tr><td>&#8220;F;32NS&#8221;</td><td>32-bit native signed integer.</td></tr>
<tr><td>&#8220;F;32F&#8221;</td><td>32-bit little endian floating point.</td></tr>
<tr><td>&#8220;F;32BF&#8221;</td><td>32-bit big endian floating point.</td></tr>
<tr><td>&#8220;F;32NF&#8221;</td><td>32-bit native floating point.</td></tr>
<tr><td>&#8220;F;64F&#8221;</td><td>64-bit little endian floating point.</td></tr>
<tr><td>&#8220;F;64BF&#8221;</td><td>64-bit big endian floating point.</td></tr>
<tr><td>&#8220;F;64NF&#8221;</td><td>64-bit native floating point.</td></tr>
</table><h2 id="the-bit-decoder">The Bit Decoder&#160;<a class="nav" href="#the-bit-decoder" title="bookmark!">#</a></h2><p>If the raw decoder cannot handle your format, PIL also provides
a special &#8220;bit&#8221; decoder that can be used to read various packed
formats into a floating point image memory.</p><p>To use the bit decoder with the <b>fromstring</b> function, use
the following syntax:</p><pre class="python">
    image = fromstring(
        mode, size, data, <span class="pystring">"bit"</span>,
        bits, pad, fill, sign, orientation
        )</pre><p>When used in a tile descriptor, the parameter field should look
like:</p><pre>
    (bits, pad, fill, sign, orientation)
</pre><p>The fields are used as follows:</p><dl><dt><b>bits</b></dt><dd><p>Number of bits per pixel (2-32). No
default.</p></dd>
<dt><b>pad</b></dt><dd><p>Padding between lines, in bits. This is
either 0 if there is no padding, or 8 if lines are padded to full
bytes. If omitted, the pad value defaults to 8.</p></dd>
<dt><b>fill</b></dt><dd><p>Controls how data are added to, and stored
from, the decoder bit buffer.</p></dd>
<dt><b>fill=0</b></dt><dd><p>Add bytes to the LSB end of the decoder
buffer; store pixels from the MSB end.</p></dd>
<dt><b>fill=1</b></dt><dd><p>Add bytes to the MSB end of the decoder
buffer; store pixels from the MSB end.</p></dd>
<dt><b>fill=2</b></dt><dd><p>Add bytes to the LSB end of the decoder
buffer; store pixels from the LSB end.</p></dd>
<dt><b>fill=3</b></dt><dd><p>Add bytes to the MSB end of the decoder
buffer; store pixels from the LSB end.</p></dd>
<dd><p>If omitted, the fill order defaults to 0.</p></dd>
<dt><b>sign</b></dt><dd><p>If non-zero, bit fields are sign
extended. If zero or omitted, bit fields are unsigned.</p></dd>
<dt><b>orientation</b></dt><dd><p>Whether the first line in the image
is the top line on the screen (1), or the bottom line (-1). If
omitted, the orientation defaults to 1.</p></dd>
</dl></div><div class="yui-u">&#160;</div></div><div class="yui-g"><p><a href="formats.htm">back</a></p></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to imagingbook index page.">::: imagingbook :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><a href="#example">Example</a></li><li><a href="#the-tile-attribute">The Tile Attribute</a></li><li><a href="#the-raw-decoder">The Raw Decoder</a></li><li><a href="#decoding-floating-point-data">Decoding Floating Point Data</a></li><li><a href="#the-bit-decoder">The Bit Decoder</a></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
