
@@module os

<h1>os&#8212;Miscellaneous operating system interfaces</h1>

<p>This module provides a more portable way of using operating system
dependent functionality than importing a operating system dependent
built-in module like {@link posix} or {@link nt}.

<p>This module searches for an operating system dependent built-in
module like {@link mac} or {@link posix} and exports the same functions
and data as found there. The design of all Python's built-in operating
system dependent modules is such that as long as the same functionality
is available, it uses the same interface; for example, the function
{@code os.stat(}{@var path}) returns stat information about {@var path}
in the same format (which happens to have originated with the POSIX
interface).

<p>Extensions peculiar to a particular operating system are also
available through the {@link os} module, but using them is of course a
threat to portability!

<p>Note that after the first time {@link os} is imported, there is {@em
no} performance penalty in using functions from {@link os} instead of
directly from the operating system dependent built-in module, so there
should be {@em no} reason not to use {@link os}!

<p>The {@link os} module contains many functions and data values. The
items below and in the following sub-sections are all available directly
from the {@link os} module.

@@exception error

<p>This exception is raised when a function returns a system-related
error (not for illegal argument types or other incidental errors). This
is also known as the built-in exception {@link exceptions.OSError}. The
accompanying value is a pair containing the numeric error code from
errno and the corresponding string, as would be printed by the C
function {@link c:perror}. See the module {@link errno}, which contains
names for the error codes defined by the underlying operating system.

<p>When exceptions are classes, this exception carries two attributes,
{@link errno} and {@link strerror}. The first holds the value of the C
errno variable, and the latter holds the corresponding error message
from {@link c:strerror}. For exceptions that involve a file system path
(such as {@link chdir} or {@link unlink}), the exception instance will
contain a third attribute, {@link filename}, which is the file name
passed to the function.

@@variable name

<p>The name of the operating system dependent module imported. The
following names have currently been registered: {@code 'posix'}, {@code
'nt'}, {@code 'mac'}, {@code 'os2'}, {@code 'ce'}, {@code 'java'},
{@code 'riscos'}.

@@variable path

<p>The corresponding operating system dependent standard module for
pathname operations, such as {@link posixpath} or {@link macpath}. Thus,
given the proper imports, {@code os.path.split(}{@var file}) is
equivalent to but more portable than {@code posixpath.split(}{@var
file}). Note that this is also an importable module: it may be imported
directly as {@link os.path}.

@@text 

<h2>Process Parameters</h2>

<p>These functions and data items provide information and operate on the
current process and user.

@@variable environ

<p>A mapping object representing the string environment. For example,
{@code environ['HOME']} is the pathname of your home directory (on some
platforms), and is equivalent to {@code getenv("HOME")} in C.

<p>This mapping is captured the first time the {@link os} module is
imported, typically during Python startup as part of processing site.py.
Changes to the environment made after this time are not reflected in
{@code os.environ}, except for changes made by modifying {@code
os.environ} directly.

<p class='note'><b>Note:</b> If the platform supports the On some
platforms, including FreeBSD and Mac OS X, setting {@code environ} may
cause memory leaks. Refer to the system documentation for {@link
c:putenv}.

<p>If {@link putenv} is not provided, a modified copy of this mapping
may be passed to the appropriate process-creation functions to cause
child processes to use a modified environment.

<p>If the platform supports the {@link unsetenv} function, you can
delete items in this mapping to unset environment variables. {@link
unsetenv} will be called automatically when an item is deleted from
{@code os.environ}.

@@function chdir(path)
@@function fchdir(fd)
@@function getcwd()

<p>These functions are described in &#8220;Files and Directories&#8221;
(section {@link os-file-dir.html#os-file-dir}).

@@function ctermid()

<p>Return the filename corresponding to the controlling terminal of the
process. Availability: Unix.

@@function getegid()

<p>Return the effective group id of the current process. This
corresponds to the `set id' bit on the file being executed in the
current process. Availability: Unix.

@@function geteuid()

<p>Return the current process' effective user id. Availability: Unix.

@@function getgid()

<p>Return the real group id of the current process. Availability: Unix.

@@function getgroups()

<p>Return list of supplemental group ids associated with the current
process. Availability: Unix.

@@function getlogin()

<p>Return the name of the user logged in on the controlling terminal of
the process. For most purposes, it is more useful to use the environment
variable LOGNAME to find out who the user is, or {@code
pwd.getpwuid(os.getuid())[0]} to get the login name of the currently
effective user ID. Availability: Unix.

@@function getpgid(pid)

<p>Return the process group id of the process with process id {@var
pid}. If {@var pid} is 0, the process group id of the current process is
returned. Availability: Unix.
<blockquote>
@since New in version
2.3. <br />
</blockquote>

@@function getpgrp()

<p>Return the id of the current process group. Availability: Unix.

@@function getpid()

<p>Return the current process id. Availability: Unix, Windows.

@@function getppid()

<p>Return the parent's process id. Availability: Unix.

@@function getuid()

<p>Return the current process' user id. Availability: Unix.

@@function getenv(varname[, value])

<p>Return the value of the environment variable {@var varname} if it
exists, or {@var value} if it doesn't. {@var value} defaults to {@link
None}. Availability: most flavors of Unix, Windows.

@@function putenv(varname, value)

<p>Set the environment variable named {@var varname} to the string {@var
value}. Such changes to the environment affect subprocesses started with
{@link os.system}, {@link popen} or {@link fork} and {@link execv}.
Availability: most flavors of Unix, Windows.

<p class='note'><b>Note:</b> On some platforms, including FreeBSD and
Mac OS X, setting {@code environ} may cause memory leaks. Refer to the
system documentation for putenv.

<p>When {@link putenv} is supported, assignments to items in {@code
os.environ} are automatically translated into corresponding calls to
{@link putenv}; however, calls to {@link putenv} don't update {@code
os.environ}, so it is actually preferable to assign to items of {@code
os.environ}.

@@function setegid(egid)

<p>Set the current process's effective group id. Availability: Unix.

@@function seteuid(euid)

<p>Set the current process's effective user id. Availability: Unix.

@@function setgid(gid)

<p>Set the current process' group id. Availability: Unix.

@@function setgroups(groups)

<p>Set the list of supplemental group ids associated with the current
process to {@var groups}. {@var groups} must be a sequence, and each
element must be an integer identifying a group. This operation is
typical available only to the superuser. Availability: Unix.
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function setpgrp()

<p>Calls the system call {@link c:setpgrp} or {@link c:setpgrp(0, 0)}
depending on which version is implemented (if any). See the Unix manual
for the semantics. Availability: Unix.

@@function setpgid(pid, pgrp)

<p>Calls the system call {@link c:setpgid} to set the process group id
of the process with id {@var pid} to the process group with id {@var
pgrp}. See the Unix manual for the semantics. Availability: Unix.

@@function setreuid(ruid, euid)

<p>Set the current process's real and effective user ids. Availability:
Unix.

@@function setregid(rgid, egid)

<p>Set the current process's real and effective group ids. Availability:
Unix.

@@function getsid(pid)

<p>Calls the system call {@link c:getsid}. See the Unix manual for the
semantics. Availability: Unix.
<blockquote>
@since New in version 2.4. <br />
</blockquote>

@@function setsid()

<p>Calls the system call {@link c:setsid}. See the Unix manual for the
semantics. Availability: Unix.

@@function setuid(uid)

<p>Set the current process' user id. Availability: Unix.

@@function strerror(code)

<p>Return the error message corresponding to the error code in {@var
code}. Availability: Unix, Windows.

@@function umask(mask)

<p>Set the current numeric umask and returns the previous umask.
Availability: Unix, Windows.

@@function uname()

<p>Return a 5-tuple containing information identifying the current
operating system. The tuple contains 5 strings: {@code (}{@var sysname},
{@var nodename}, {@var release}, {@var version}, {@var machine}). Some
systems truncate the nodename to 8 characters or to the leading
component; a better way to get the hostname is {@link
socket.gethostname} or even {@code
socket.gethostbyaddr(socket.gethostname())}. Availability: recent
flavors of Unix.

@@function unsetenv(varname)

<p>Unset (delete) the environment variable named {@var varname}. Such
changes to the environment affect subprocesses started with {@link
os.system}, {@link popen} or {@link fork} and {@link execv}.
Availability: most flavors of Unix, Windows.

<p>When {@link unsetenv} is supported, deletion of items in {@code
os.environ} is automatically translated into a corresponding call to
{@link unsetenv}; however, calls to {@link unsetenv} don't update {@code
os.environ}, so it is actually preferable to delete items of {@code
os.environ}.

@@text 

<h2>File Object Creation</h2>

<p>These functions create new file objects.

@@function fdopen(fd[, mode[, bufsize]])

<p>Return an open file object connected to the file descriptor {@var
fd}. The {@var mode} and {@var bufsize} arguments have the same meaning
as the corresponding arguments to the built-in {@link open} function.
Availability: Macintosh, Unix, Windows.
<blockquote>
@since Changed in version 2.3: When
specified, the mode argument must now start with one of
the letters "r", "w", or "a",
otherwise a ValueError is
raised. <br />
</blockquote>

@@function popen(command[, mode[, bufsize]])

<p>Open a pipe to or from {@var command}. The return value is an open
file object connected to the pipe, which can be read or written
depending on whether {@var mode} is {@code 'r'} (default) or {@code
'w'}. The {@var bufsize} argument has the same meaning as the
corresponding argument to the built-in {@link open} function. The exit
status of the command (encoded in the format specified for {@link wait})
is available as the return value of the {@link close} method of the file
object, except that when the exit status is zero (termination without
errors), {@code None} is returned. Availability: Macintosh, Unix,
Windows.
<blockquote>
@since Changed in version 2.0: This function
worked unreliably under Windows in earlier versions of Python. This
was due to the use of the _popen()
function from the libraries provided with Windows. Newer versions
of Python do not use the broken implementation from the Windows
libraries. <br />
</blockquote>

@@function tmpfile()

<p>Return a new file object opened in update mode ("{@code w+b}"). The
file has no directory entries associated with it and will be
automatically deleted once there are no file descriptors for the file.
Availability: Macintosh, Unix, Windows.

@@text 

<p>For each of the following {@link popen} variants, if {@var bufsize}
is specified, it specifies the buffer size for the I/O pipes. {@var
mode}, if provided, should be the string {@code 'b'} or {@code 't'}; on
Windows this is needed to determine whether the file objects should be
opened in binary or text mode. The default value for {@var mode} is
{@code 't'}.

<p>Also, for each of these variants, on Unix, {@var cmd} may be a
sequence, in which case arguments will be passed directly to the program
without shell intervention (as with {@link os.spawnv}). If {@var cmd} is
a string it will be passed to the shell (as with {@link os.system}).

<p>These methods do not make it possible to retrieve the exit status
from the child processes. The only way to control the input and output
streams and also retrieve the return codes is to use the {@link Popen3}
and {@link Popen4} classes from the {@link popen2} module; these are
only available on Unix.

<p>For a discussion of possible deadlock conditions related to the use
of these functions, see &#8220;{@link popen2-flow-control.html Flow
Control Issues}&#8221; (section {@link
popen2-flow-control.html#popen2-flow-control}).

@@function popen2(cmd[, mode[, bufsize]])

<p>Executes {@var cmd} as a sub-process. Returns the file objects {@code
(}{@var child_stdin}, {@var child_stdout}). Availability: Macintosh,
Unix, Windows.
<blockquote>
@since New in
version 2.0. <br />
</blockquote>

@@function popen3(cmd[, mode[, bufsize]])

<p>Executes {@var cmd} as a sub-process. Returns the file objects {@code
(}{@var child_stdin}, {@var child_stdout}, {@var child_stderr}).
Availability: Macintosh, Unix, Windows.
<blockquote>
@since New in
version 2.0. <br />
</blockquote>

@@function popen4(cmd[, mode[, bufsize]])

<p>Executes {@var cmd} as a sub-process. Returns the file objects {@code
(}{@var child_stdin}, {@var child_stdout_and_stderr}). Availability:
Macintosh, Unix, Windows.
<blockquote>
@since New in version 2.0. <br />
</blockquote>

@@text 

<p>(Note that {@var child_stdin}, {@var child_stdout}, and {@var
child_stderr} are named from the point of view of the child process,
i.e. {@var child_stdin} is the child's standard input.)

<p>This functionality is also available in the {@link }{@link popen2}
module using functions of the same names, but the return values of those
functions have a different order.

<h2>File Descriptor Operations</h2>

<p>These functions operate on I/O streams referred to using file
descriptors.

@@function close(fd)

<p>Close file descriptor {@var fd}. Availability: Macintosh, Unix,
Windows.

<p class='note'><b>Note:</b> This function is intended for low-level I/O
and must be applied to a file descriptor as returned by {@link open} or
{@link pipe}. To close a &#8220;file object&#8221; returned by the
built-in function {@link open} or by {@link popen} or {@link fdopen},
use its {@link close} method.

@@function dup(fd)

<p>Return a duplicate of file descriptor {@var fd}. Availability:
Macintosh, Unix, Windows.

@@function dup2(fd, fd2)

<p>Duplicate file descriptor {@var fd} to {@var fd2}, closing the latter
first if necessary. Availability: Macintosh, Unix, Windows.

@@function fdatasync(fd)

<p>Force write of file with filedescriptor {@var fd} to disk. Does not
force update of metadata. Availability: Unix.

@@function fpathconf(fd, name)

<p>Return system configuration information relevant to an open file.
{@var name} specifies the configuration value to retrieve; it may be a
string which is the name of a defined system value; these names are
specified in a number of standards (POSIX.1, Unix 95, Unix 98, and
others). Some platforms define additional names as well. The names known
to the host operating system are given in the {@code pathconf_names}
dictionary. For configuration variables not included in that mapping,
passing an integer for {@var name} is also accepted. Availability:
Macintosh, Unix.

<p>If {@var name} is a string and is not known, {@link
exceptions.ValueError} is raised. If a specific value for {@var name} is
not supported by the host system, even if it is included in {@code
pathconf_names}, an {@link exceptions.OSError} is raised with {@code
errno.EINVAL} for the error number.

@@function fstat(fd)

<p>Return status for file descriptor {@var fd}, like {@link stat}.
Availability: Macintosh, Unix, Windows.

@@function fstatvfs(fd)

<p>Return information about the filesystem containing the file
associated with file descriptor {@var fd}, like {@link statvfs}.
Availability: Unix.

@@function fsync(fd)

<p>Force write of file with filedescriptor {@var fd} to disk. On Unix,
this calls the native {@link c:fsync} function; on Windows, the MS
{@link c:_commit} function.

<p>If you're starting with a Python file object {@var f}, first do {@var
f}.flush(), and then do {@code os.fsync(}{@var f}.fileno()), to ensure
that all internal buffers associated with {@var f} are written to disk.
Availability: Macintosh, Unix, and Windows starting in 2.2.3.

@@function ftruncate(fd, length)

<p>Truncate the file corresponding to file descriptor {@var fd}, so that
it is at most {@var length} bytes in size. Availability: Macintosh,
Unix.

@@function isatty(fd)

<p>Return {@link True} if the file descriptor {@var fd} is open and
connected to a tty(-like) device, else {@code False}. Availability:
Macintosh, Unix.

@@function lseek(fd, pos, how)

<p>Set the current position of file descriptor {@var fd} to position
{@var pos}, modified by {@var how}: {@code 0} to set the position
relative to the beginning of the file; {@code 1} to set it relative to
the current position; {@code 2} to set it relative to the end of the
file. Availability: Macintosh, Unix, Windows.

@@function open(file, flags[, mode])

<p>Open the file {@var file} and set various flags according to {@var
flags} and possibly its mode according to {@var mode}. The default {@var
mode} is {@code 0777} (octal), and the current umask value is first
masked out. Return the file descriptor for the newly opened file.
Availability: Macintosh, Unix, Windows.

<p>For a description of the flag and mode values, see the C run-time
documentation; flag constants (like {@code O_RDONLY} and {@code
O_WRONLY}) are defined in this module too (see below).

<p class='note'><b>Note:</b> This function is intended for low-level
I/O. For normal usage, use the built-in function {@link open}, which
returns a &#8220;file object&#8221; with {@link read} and {@link write}
methods (and many more).

@@function openpty()

<p>Open a new pseudo-terminal pair. Return a pair of file descriptors
{@code (}{@var master}, {@var slave}) for the pty and the tty,
respectively. For a (slightly) more portable approach, use the {@link
pty} module. Availability: Macintosh, Some flavors of Unix.

@@function pipe()

<p>Create a pipe. Return a pair of file descriptors {@code (}{@var r},
{@var w}) usable for reading and writing, respectively. Availability:
Macintosh, Unix, Windows.

@@function read(fd, n)

<p>Read at most {@var n} bytes from file descriptor {@var fd}. Return a
string containing the bytes read. If the end of the file referred to by
{@var fd} has been reached, an empty string is returned. Availability:
Macintosh, Unix, Windows.

<p class='note'><b>Note:</b> This function is intended for low-level I/O
and must be applied to a file descriptor as returned by {@link open} or
{@link pipe}. To read a &#8220;file object&#8221; returned by the
built-in function {@link open} or by {@link popen} or {@link fdopen}, or
{@code sys.stdin}, use its {@link read} or {@link readline} methods.

@@function tcgetpgrp(fd)

<p>Return the process group associated with the terminal given by {@var
fd} (an open file descriptor as returned by {@link open}). Availability:
Macintosh, Unix.

@@function tcsetpgrp(fd, pg)

<p>Set the process group associated with the terminal given by {@var fd}
(an open file descriptor as returned by {@link open}) to {@var pg}.
Availability: Macintosh, Unix.

@@function ttyname(fd)

<p>Return a string which specifies the terminal device associated with
file-descriptor {@var fd}. If {@var fd} is not associated with a
terminal device, an exception is raised. Availability:Macintosh, Unix.

@@function write(fd, str)

<p>Write the string {@var str} to file descriptor {@var fd}. Return the
number of bytes actually written. Availability: Macintosh, Unix,
Windows.

<p class='note'><b>Note:</b> This function is intended for low-level I/O
and must be applied to a file descriptor as returned by {@link open} or
{@link pipe}. To write a &#8220;file object&#8221; returned by the
built-in function {@link open} or by {@link popen} or {@link fdopen}, or
{@code sys.stdout} or {@code sys.stderr}, use its {@link write} method.

@@text 

<p>The following data items are available for use in constructing the
{@var flags} parameter to the {@link open} function.

@@variable O_RDONLY
@@variable O_WRONLY
@@variable O_RDWR
@@variable O_APPEND
@@variable O_CREAT
@@variable O_EXCL
@@variable O_TRUNC

<p>Options for the {@var flag} argument to the {@link open} function.
These can be bit-wise OR'd together. Availability: Macintosh, Unix,
Windows.

@@variable O_DSYNC
@@variable O_RSYNC
@@variable O_SYNC
@@variable O_NDELAY
@@variable O_NONBLOCK
@@variable O_NOCTTY

<p>More options for the {@var flag} argument to the {@link open}
function. Availability: Macintosh, Unix.

@@variable O_BINARY

<p>Option for the {@var flag} argument to the {@link open} function.
This can be bit-wise OR'd together with those listed above.
Availability: Windows.

@@variable O_NOINHERIT
@@variable O_SHORT_LIVED
@@variable O_TEMPORARY
@@variable O_RANDOM
@@variable O_SEQUENTIAL
@@variable O_TEXT

<p>Options for the {@var flag} argument to the {@link open} function.
These can be bit-wise OR'd together. Availability: Windows.

@@text 

<h2>Files and Directories</h2>

@@function access(path, mode)

<p>Use the real uid/gid to test for access to {@var path}. Note that
most operations will use the effective uid/gid, therefore this routine
can be used in a suid/sgid environment to test if the invoking user has
the specified access to {@var path}. {@var mode} should be {@code F_OK}
to test the existence of {@var path}, or it can be the inclusive OR of
one or more of {@code R_OK}, {@code W_OK}, and {@code X_OK} to test
permissions. Return {@code True} if access is allowed, {@code False} if
not. See the Unix man page access(2) for more information. Availability:
Macintosh, Unix, Windows.

<p class='note'><b>Note:</b> Using {@link access} to check if a user is
authorized to e.g. open a file before actually doing so using {@link
open} creates a security hole, because the user might exploit the short
time interval between checking and opening the file to manipulate it.

@@variable F_OK

<p>Value to pass as the {@var mode} parameter of {@link access} to test
the existence of {@var path}.

@@variable R_OK

<p>Value to include in the {@var mode} parameter of {@link access} to
test the readability of {@var path}.

@@variable W_OK

<p>Value to include in the {@var mode} parameter of {@link access} to
test the writability of {@var path}.

@@variable X_OK

<p>Value to include in the {@var mode} parameter of {@link access} to
determine if {@var path} can be executed.

@@function chdir(path)

<p>Change the current working directory to {@var path}. Availability:
Macintosh, Unix, Windows.

@@function fchdir(fd)

<p>Change the current working directory to the directory represented by
the file descriptor {@var fd}. The descriptor must refer to an opened
directory, not an open file. Availability: Unix.
<blockquote>
@since New in
version 2.3. <br />
</blockquote>

@@function getcwd()

<p>Return a string representing the current working directory.
Availability: Macintosh, Unix, Windows.

@@function getcwdu()

<p>Return a Unicode object representing the current working directory.
Availability: Macintosh, Unix, Windows.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function chroot(path)

<p>Change the root directory of the current process to {@var path}.
Availability: Macintosh, Unix.
<blockquote>
@since New in version
2.2. <br />
</blockquote>

@@function chmod(path, mode)

<p>Change the mode of {@var path} to the numeric {@var mode}. {@var
mode} may take one of the following values (as defined in the {@link
stat} module):
<ul>
<li>
<p>{@code S_ISUID}
<li>
<p>{@code S_ISGID}
<li>
<p>{@code S_ENFMT}
<li>
<p>{@code S_ISVTX}
<li>
<p>{@code S_IREAD}
<li>
<p>{@code S_IWRITE}
<li>
<p>{@code S_IEXEC}
<li>
<p>{@code S_IRWXU}
<li>
<p>{@code S_IRUSR}
<li>
<p>{@code S_IWUSR}
<li>
<p>{@code S_IXUSR}
<li>
<p>{@code S_IRWXG}
<li>
<p>{@code S_IRGRP}
<li>
<p>{@code S_IWGRP}
<li>
<p>{@code S_IXGRP}
<li>
<p>{@code S_IRWXO}
<li>
<p>{@code S_IROTH}
<li>
<p>{@code S_IWOTH}
<li>
<p>{@code S_IXOTH}
</ul>

<p>Availability: Macintosh, Unix, Windows.

<p class='note'><b>Note:</b> Although Windows supports {@link chmod},
you can only set the file's read-only flag with it (via the {@code
S_IWRITE} and {@code S_IREAD} constants or a corresponding integer
value). All other bits are ignored.

@@function chown(path, uid, gid)

<p>Change the owner and group id of {@var path} to the numeric {@var
uid} and {@var gid}. To leave one of the ids unchanged, set it to -1.
Availability: Macintosh, Unix.

@@function lchown(path, uid, gid)

<p>Change the owner and group id of {@var path} to the numeric {@var
uid} and gid. This function will not follow symbolic links.
Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function link(src, dst)

<p>Create a hard link pointing to {@var src} named {@var dst}.
Availability: Macintosh, Unix.

@@function listdir(path)

<p>Return a list containing the names of the entries in the directory.
The list is in arbitrary order. It does not include the special entries
{@code '.'} and {@code '..'} even if they are present in the directory.
Availability: Macintosh, Unix, Windows.
<blockquote>
@since Changed in version 2.3: On Windows
NT/2k/XP and Unix, if path is a Unicode object, the
result will be a list of Unicode objects.. <br />
</blockquote>

@@function lstat(path)

<p>Like {@link stat}, but do not follow symbolic links. Availability:
Macintosh, Unix.

@@function mkfifo(path[, mode])

<p>Create a FIFO (a named pipe) named {@var path} with numeric mode
{@var mode}. The default {@var mode} is {@code 0666} (octal). The
current umask value is first masked out from the mode. Availability:
Macintosh, Unix.

<p>FIFOs are pipes that can be accessed like regular files. FIFOs exist
until they are deleted (for example with {@link os.unlink}). Generally,
FIFOs are used as rendezvous between &#8220;client&#8221; and
&#8220;server&#8221; type processes: the server opens the FIFO for
reading, and the client opens it for writing. Note that {@link mkfifo}
doesn't open the FIFO -- it just creates the rendezvous point.

@@function mknod(path[, mode=0600, device])

<p>Create a filesystem node (file, device special file or named pipe)
named filename. {@var mode} specifies both the permissions to use and
the type of node to be created, being combined (bitwise OR) with one of
S_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO (those constants are available in
{@link stat}). For S_IFCHR and S_IFBLK, {@var device} defines the newly
created device special file (probably using {@link os.makedev}),
otherwise it is ignored.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function major(device)

<p>Extracts a device major number from a raw device number.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function minor(device)

<p>Extracts a device minor number from a raw device number.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function makedev(major, minor)

<p>Composes a raw device number from the major and minor device numbers.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function mkdir(path[, mode])

<p>Create a directory named {@var path} with numeric mode {@var mode}.
The default {@var mode} is {@code 0777} (octal). On some systems, {@var
mode} is ignored. Where it is used, the current umask value is first
masked out. Availability: Macintosh, Unix, Windows.

@@function makedirs(path[, mode])

<p>Recursive directory creation function. Like {@link mkdir}, but makes
all intermediate-level directories needed to contain the leaf directory.
Throws an {@link error} exception if the leaf directory already exists
or cannot be created. The default {@var mode} is {@code 0777} (octal).
This function does not properly handle UNC paths (only relevant on
Windows systems; Universal Naming Convention paths are those that use
the `{@code \\host\path}' syntax).
<blockquote>
@since New
in version 1.5.2. <br />
</blockquote>

@@function pathconf(path, name)

<p>Return system configuration information relevant to a named file.
{@var name} specifies the configuration value to retrieve; it may be a
string which is the name of a defined system value; these names are
specified in a number of standards (POSIX.1, Unix 95, Unix 98, and
others). Some platforms define additional names as well. The names known
to the host operating system are given in the {@code pathconf_names}
dictionary. For configuration variables not included in that mapping,
passing an integer for {@var name} is also accepted. Availability:
Macintosh, Unix.

<p>If {@var name} is a string and is not known, {@link
exceptions.ValueError} is raised. If a specific value for {@var name} is
not supported by the host system, even if it is included in {@code
pathconf_names}, an {@link exceptions.OSError} is raised with {@code
errno.EINVAL} for the error number.

@@variable pathconf_names

<p>Dictionary mapping names accepted by {@link pathconf} and {@link
fpathconf} to the integer values defined for those names by the host
operating system. This can be used to determine the set of names known
to the system. Availability: Macintosh, Unix.

@@function readlink(path)

<p>Return a string representing the path to which the symbolic link
points. The result may be either an absolute or relative pathname; if it
is relative, it may be converted to an absolute pathname using {@code
os.path.join(os.path.dirname(}{@var path}), {@var result}).
Availability: Macintosh, Unix.

@@function remove(path)

<p>Remove the file {@var path}. If {@var path} is a directory, {@link
exceptions.OSError} is raised; see {@link rmdir} below to remove a
directory. This is identical to the {@link unlink} function documented
below. On Windows, attempting to remove a file that is in use causes an
exception to be raised; on Unix, the directory entry is removed but the
storage allocated to the file is not made available until the original
file is no longer in use. Availability: Macintosh, Unix, Windows.

@@function removedirs(path)

<p>Removes directories recursively. Works like {@link rmdir} except
that, if the leaf directory is successfully removed, directories
corresponding to rightmost path segments will be pruned way until either
the whole path is consumed or an error is raised (which is ignored,
because it generally means that a parent directory is not empty). Throws
an {@link error} exception if the leaf directory could not be
successfully removed.
<blockquote>
@since New in version 1.5.2. <br />
</blockquote>

@@function rename(src, dst)

<p>Rename the file or directory {@var src} to {@var dst}. If {@var dst}
is a directory, {@link exceptions.OSError} will be raised. On Unix, if
{@var dst} exists and is a file, it will be removed silently if the user
has permission. The operation may fail on some Unix flavors if {@var
src} and {@var dst} are on different filesystems. If successful, the
renaming will be an atomic operation (this is a POSIX requirement). On
Windows, if {@var dst} already exists, {@link exceptions.OSError} will
be raised even if it is a file; there may be no way to implement an
atomic rename when {@var dst} names an existing file. Availability:
Macintosh, Unix, Windows.

@@function renames(old, new)

<p>Recursive directory or file renaming function. Works like {@link
rename}, except creation of any intermediate directories needed to make
the new pathname good is attempted first. After the rename, directories
corresponding to rightmost path segments of the old name will be pruned
away using {@link removedirs}.

<p class='note'><b>Note:</b> This function can fail with the new
directory structure made if you lack permissions needed to remove the
leaf directory or file.
<blockquote>
@since New
in version 1.5.2. <br />
</blockquote>

@@function rmdir(path)

<p>Remove the directory {@var path}. Availability: Macintosh, Unix,
Windows.

@@function stat(path)

<p>Perform a {@link c:stat} system call on the given path. The return
value is an object whose attributes correspond to the members of the
{@link c:stat} structure, namely: {@link st_mode} (protection bits),
{@link st_ino} (inode number), {@link st_dev} (device), {@link st_nlink}
(number of hard links), {@link st_uid} (user ID of owner), {@link
st_gid} (group ID of owner), {@link st_size} (size of file, in bytes),
{@link st_atime} (time of most recent access), {@link st_mtime} (time of
most recent content modification), {@link st_ctime} (platform dependent;
time of most recent metadata change on Unix, or the time of creation on
Windows).

<p>On some Unix systems (such as Linux), the following attributes may
also be available: {@link st_blocks} (number of blocks allocated for
file), {@link st_blksize} (filesystem blocksize), {@link st_rdev} (type
of device if an inode device).

<p>On Mac OS systems, the following attributes may also be available:
{@link st_rsize}, {@link st_creator}, {@link st_type}.

<p>On RISCOS systems, the following attributes are also available:
{@link st_ftype} (file type), {@link st_attrs} (attributes), {@link
st_obtype} (object type).

<p>For backward compatibility, the return value of {@link stat} is also
accessible as a tuple of at least 10 integers giving the most important
(and portable) members of the {@link c:stat} structure, in the order
{@link st_mode}, {@link st_ino}, {@link st_dev}, {@link st_nlink},
{@link st_uid}, {@link st_gid}, {@link st_size}, {@link st_atime},
{@link st_mtime}, {@link st_ctime}. More items may be added at the end
by some implementations. The standard module {@link stat} defines
functions and constants that are useful for extracting information from
a {@link c:stat} structure. (On Windows, some items are filled with
dummy values.)

<p class='note'><b>Note:</b> The exact meaning and resolution of the
{@link st_atime}, {@link st_mtime}, and {@link st_ctime} members depends
on the operating system and the file system. For example, on Windows
systems using the FAT or FAT32 file systems, {@link st_mtime} has
2-second resolution, and {@link st_atime} has only 1-day resolution. See
your operating system documentation for details.

<p>Availability: Macintosh, Unix, Windows.

<p>Changed in version 2.2: Added access to values as attributes of the
returned object.
<blockquote>
@since Changed in version 2.3: If stat_float_times returns true, the time
values are floats, measuring seconds. Fractions of a second may be
reported if the system supports that. On Mac OS, the times are
always floats. See stat_float_times for
further discussion. . <br />
</blockquote>

@@function stat_float_times([newvalue])

<p>Determine whether {@link stat_result} represents time stamps as float
objects. If newval is True, future calls to stat() return floats, if it
is False, future calls return ints. If newval is omitted, return the
current setting.

<p>For compatibility with older Python versions, accessing {@link
stat_result} as a tuple always returns integers. For compatibility with
Python 2.2, accessing the time stamps by field name also returns
integers. Applications that want to determine the fractions of a second
in a time stamp can use this function to have time stamps represented as
floats. Whether they will actually observe non-zero fractions depends on
the system.

<p>Future Python releases will change the default of this setting;
applications that cannot deal with floating point time stamps can then
use this function to turn the feature off.

<p>It is recommended that this setting is only changed at program
startup time in the {@var __main__} module; libraries should never
change this setting. If an application uses a library that works
incorrectly if floating point time stamps are processed, this
application should turn the feature off until the library has been
corrected.

@@function statvfs(path)

<p>Perform a {@link c:statvfs} system call on the given path. The return
value is an object whose attributes describe the filesystem on the given
path, and correspond to the members of the {@link c:statvfs} structure,
namely: {@link f_frsize}, {@link f_blocks}, {@link f_bfree}, {@link
f_bavail}, {@link f_files}, {@link f_ffree}, {@link f_favail}, {@link
f_flag}, {@link f_namemax}. Availability: Unix.

<p>For backward compatibility, the return value is also accessible as a
tuple whose values correspond to the attributes, in the order given
above. The standard module {@link statvfs} defines constants that are
useful for extracting information from a {@link c:statvfs} structure
when accessing it as a sequence; this remains useful when writing code
that needs to work with versions of Python that don't support accessing
the fields as attributes.
<blockquote>
@since Changed in version 2.2: Added access
to values as attributes of the returned object. <br />
</blockquote>

@@function symlink(src, dst)

<p>Create a symbolic link pointing to {@var src} named {@var dst}.
Availability: Unix.

@@function tempnam([dir[, prefix]])

<p>Return a unique path name that is reasonable for creating a temporary
file. This will be an absolute path that names a potential directory
entry in the directory {@var dir} or a common location for temporary
files if {@var dir} is omitted or {@link None}. If given and not {@link
None}, {@var prefix} is used to provide a short prefix to the filename.
Applications are responsible for properly creating and managing files
created using paths returned by {@link tempnam}; no automatic cleanup is
provided. On Unix, the environment variable TMPDIR overrides {@var dir},
while on Windows the TMP is used. The specific behavior of this function
depends on the C library implementation; some aspects are underspecified
in system documentation. Warning: Use of {@link tempnam} is vulnerable
to symlink attacks; consider using {@link tmpfile} (section {@link
os-newstreams.html#os-newstreams}) instead. Availability: Macintosh,
Unix, Windows.

@@function tmpnam()

<p>Return a unique path name that is reasonable for creating a temporary
file. This will be an absolute path that names a potential directory
entry in a common location for temporary files. Applications are
responsible for properly creating and managing files created using paths
returned by {@link tmpnam}; no automatic cleanup is provided. Warning:
Use of {@link tmpnam} is vulnerable to symlink attacks; consider using
{@link tmpfile} (section {@link os-newstreams.html#os-newstreams})
instead. Availability: Unix, Windows. This function probably shouldn't
be used on Windows, though: Microsoft's implementation of {@link tmpnam}
always creates a name in the root directory of the current drive, and
that's generally a poor location for a temp file (depending on
privileges, you may not even be able to open a file using this name).

@@variable TMP_MAX

<p>The maximum number of unique names that {@link tmpnam} will generate
before reusing names.

@@function unlink(path)

<p>Remove the file {@var path}. This is the same function as {@link
remove}; the {@link unlink} name is its traditional Unix name.
Availability: Macintosh, Unix, Windows.

@@function utime(path, times)

<p>Set the access and modified times of the file specified by {@var
path}. If {@var times} is {@link None}, then the file's access and
modified times are set to the current time. Otherwise, {@var times} must
be a 2-tuple of numbers, of the form {@code (}{@var atime}, {@var
mtime}) which is used to set the access and modified times,
respectively. Whether a directory can be given for {@var path} depends
on whether the operating system implements directories as files (for
example, Windows does not). Note that the exact times you set here may
not be returned by a subsequent {@link stat} call, depending on the
resolution with which your operating system records access and
modification times; see {@link stat}. Unix, Windows.
<blockquote>
@since Changed in version 2.0:
Added support for None for times. <br />
</blockquote>

@@function walk(top[, topdown=True [, onerror=None]])

<p>{@link walk} generates the file names in a directory tree, by walking
the tree either top down or bottom up. For each directory in the tree
rooted at directory {@var top} (including {@var top} itself), it yields
a 3-tuple {@code (}{@var dirpath}, {@var dirnames}, {@var filenames}).

<p>{@var dirpath} is a string, the path to the directory. {@var
dirnames} is a list of the names of the subdirectories in {@var dirpath}
(excluding {@code '.'} and {@code '..'}). {@var filenames} is a list of
the names of the non-directory files in {@var dirpath}. Note that the
names in the lists contain no path components. To get a full path (which
begins with {@var top}) to a file or directory in {@var dirpath}, do
{@code os.path.join(}{@var dirpath}, {@var name}).

<p>If optional argument {@var topdown} is true or not specified, the
triple for a directory is generated before the triples for any of its
subdirectories (directories are generated top down). If {@var topdown}
is false, the triple for a directory is generated after the triples for
all of its subdirectories (directories are generated bottom up).

<p>When {@var topdown} is true, the caller can modify the {@var
dirnames} list in-place (perhaps using {@link del} or slice assignment),
and {@link walk} will only recurse into the subdirectories whose names
remain in {@var dirnames}; this can be used to prune the search, impose
a specific order of visiting, or even to inform {@link walk} about
directories the caller creates or renames before it resumes {@link walk}
again. Modifying {@var dirnames} when {@var topdown} is false is
ineffective, because in bottom-up mode the directories in {@var
dirnames} are generated before {@var dirnames} itself is generated.

<p>By default errors from the {@code os.listdir()} call are ignored. If
optional argument {@var onerror} is specified, it should be a function;
it will be called with one argument, an os.error instance. It can report
the error to continue with the walk, or raise the exception to abort the
walk. Note that the filename is available as the {@code filename}
attribute of the exception object.

<p class='note'><b>Note:</b> If you pass a relative pathname, don't
change the current working directory between resumptions of {@link
walk}. {@link walk} never changes the current directory, and assumes
that its caller doesn't either.

<p class='note'><b>Note:</b> On systems that support symbolic links,
links to subdirectories appear in {@var dirnames} lists, but {@link
walk} will not visit them (infinite loops are hard to avoid when
following symbolic links). To visit linked directories, you can identify
them with {@code os.path.islink(}{@var path}), and invoke {@code
walk(}{@var path}) on each directly.

<p>This example displays the number of bytes taken by non-directory
files in each directory under the starting directory, except that it
doesn't look under any CVS subdirectory:

<pre>
import os
from os.path import join, getsize
for root, dirs, files in os.walk('python/Lib/email'):
    print root, "consumes",
    print sum(getsize(join(root, name)) for name in files),
    print "bytes in", len(files), "non-directory files"
    if 'CVS' in dirs:
        dirs.remove('CVS')  # don't visit CVS directories
</pre>


<p>In the next example, walking the tree bottom up is essential: {@link
rmdir} doesn't allow deleting a directory before the directory is empty:

<pre>
# Delete everything reachable from the directory named in 'top',
# assuming there are no symbolic links.
# CAUTION:  This is dangerous!  For example, if top == '/', it
# could delete all your disk files.
import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
    for name in dirs:
        os.rmdir(os.path.join(root, name))
</pre>

<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@text 

<h2>Process Management</h2>

<p>These functions may be used to create and manage processes.

<p>The various {@link exec*} functions take a list of arguments for the
new program loaded into the process. In each case, the first of these
arguments is passed to the new program as its own name rather than as an
argument a user may have typed on a command line. For the C programmer,
this is the {@code argv[0]} passed to a program's {@link c:main}. For
example, "{@code os.execv('/bin/echo', ['foo', 'bar'])}" will only print
"{@code bar}" on standard output; "{@code foo}"will seem to be ignored.

@@function abort()

<p>Generate a {@code SIGABRT} signal to the current process. On Unix,
the default behavior is to produce a core dump; on Windows, the process
immediately returns an exit code of {@code 3}. Be aware that programs
which use {@link signal.signal} to register a handler for {@code
SIGABRT} will behave differently. Availability: Macintosh, Unix,
Windows.

@@function execl(path, arg0, arg1, ...)
@@function execle(path, arg0, arg1, ..., env)
@@function execlp(file, arg0, arg1, ...)
@@function execlpe(file, arg0, arg1, ..., env)
@@function execv(path, args)
@@function execve(path, args, env)
@@function execvp(file, args)
@@function execvpe(file, args, env)

<p>These functions all execute a new program, replacing the current
process; they do not return. On Unix, the new executable is loaded into
the current process, and will have the same process ID as the caller.
Errors will be reported as {@link exceptions.OSError} exceptions.

<p>The "{@code l}" and "{@code v}" variants of the {@link exec*}
functions differ in how command-line arguments are passed. The "{@code
l}" variants are perhaps the easiest to work with if the number of
parameters is fixed when the code is written; the individual parameters
simply become additional parameters to the {@link execl*} functions. The
"{@code v}" variants are good when the number of parameters is variable,
with the arguments being passed in a list or tuple as the {@var args}
parameter. In either case, the arguments to the child process should
start with the name of the command being run, but this is not enforced.

<p>The variants which include a "{@code p}" near the end ({@link
execlp}, {@link execlpe}, {@link execvp}, and {@link execvpe}) will use
the PATH environment variable to locate the program {@var file}. When
the environment is being replaced (using one of the {@link exec*e}
variants, discussed in the next paragraph), the new environment is used
as the source of the PATH variable. The other variants, {@link execl},
{@link execle}, {@link execv}, and {@link execve}, will not use the PATH
variable to locate the executable; {@var path} must contain an
appropriate absolute or relative path.

<p>For {@link execle}, {@link execlpe}, {@link execve}, and {@link
execvpe} (note that these all end in "{@code e}"), the {@var env}
parameter must be a mapping which is used to define the environment
variables for the new process; the {@link execl}, {@link execlp}, {@link
execv}, and {@link execvp} all cause the new process to inherit the
environment of the current process. Availability: Macintosh, Unix,
Windows.

@@function _exit(n)

<p>Exit to the system with status {@var n}, without calling cleanup
handlers, flushing stdio buffers, etc. Availability: Macintosh, Unix,
Windows.

<p class='note'><b>Note:</b> The standard way to exit is {@code
sys.exit(}{@var n}). {@link _exit} should normally only be used in the
child process after a {@link fork}.

@@text 


<p class='note'><b>Note:</b> The following exit codes are a defined, and
can be used with Some of these may not be available on all Unix
platforms, since there is some variation. These constants are defined
where they are defined by the underlying platform.

@@variable EX_OK

<p>Exit code that means no error occurred. Availability: Macintosh,
Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_USAGE

<p>Exit code that means the command was used incorrectly, such as when
the wrong number of arguments are given. Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_DATAERR

<p>Exit code that means the input data was incorrect. Availability:
Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_NOINPUT

<p>Exit code that means an input file did not exist or was not readable.
Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_NOUSER

<p>Exit code that means a specified user did not exist. Availability:
Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_NOHOST

<p>Exit code that means a specified host did not exist. Availability:
Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_UNAVAILABLE

<p>Exit code that means that a required service is unavailable.
Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_SOFTWARE

<p>Exit code that means an internal software error was detected.
Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_OSERR

<p>Exit code that means an operating system error was detected, such as
the inability to fork or create a pipe. Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_OSFILE

<p>Exit code that means some system file did not exist, could not be
opened, or had some other kind of error. Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_CANTCREAT

<p>Exit code that means a user specified output file could not be
created. Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_IOERR

<p>Exit code that means that an error occurred while doing I/O on some
file. Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_TEMPFAIL

<p>Exit code that means a temporary failure occurred. This indicates
something that may not really be an error, such as a network connection
that couldn't be made during a retryable operation. Availability:
Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_PROTOCOL

<p>Exit code that means that a protocol exchange was illegal, invalid,
or not understood. Availability: Macintosh, Unix.
<blockquote>
@since New in version
2.3. <br />
</blockquote>

@@variable EX_NOPERM

<p>Exit code that means that there were insufficient permissions to
perform the operation (but not intended for file system problems).
Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_CONFIG

<p>Exit code that means that some kind of configuration error occurred.
Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable EX_NOTFOUND

<p>Exit code that means something like &#8220;an entry was not
found&#8221;. Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function fork()

<p>Fork a child process. Return {@code 0} in the child, the child's
process id in the parent. Availability: Macintosh, Unix.

@@function forkpty()

<p>Fork a child process, using a new pseudo-terminal as the child's
controlling terminal. Return a pair of {@code (}{@var pid}, {@var fd}),
where {@var pid} is {@code 0} in the child, the new child's process id
in the parent, and {@var fd} is the file descriptor of the master end of
the pseudo-terminal. For a more portable approach, use the {@link pty}
module. Availability: Macintosh, Some flavors of Unix.

@@function kill(pid, sig)

<p>Kill the process {@var pid} with signal {@var sig}. Constants for the
specific signals available on the host platform are defined in the
{@link signal} module. Availability: Macintosh, Unix.

@@function killpg(pgid, sig)

<p>Kill the process group {@var pgid} with the signal {@var sig}.
Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function nice(increment)

<p>Add {@var increment} to the process's &#8220;niceness&#8221;. Return
the new niceness. Availability: Macintosh, Unix.

@@function plock(op)

<p>Lock program segments into memory. The value of {@var op} (defined in
{@code &ltsys/lock.h>}) determines which segments are locked.
Availability: Macintosh, Unix.

@@function popen(...)
@@function popen2(...)
@@function popen3(...)
@@function popen4(...)

<p>Run child processes, returning opened pipes for communications. These
functions are described in section {@link
os-newstreams.html#os-newstreams}.

@@function spawnl(mode, path, ...)
@@function spawnle(mode, path, ..., env)
@@function spawnlp(mode, file, ...)
@@function spawnlpe(mode, file, ..., env)
@@function spawnv(mode, path, args)
@@function spawnve(mode, path, args, env)
@@function spawnvp(mode, file, args)
@@function spawnvpe(mode, file, args, env)

<p>Execute the program {@var path} in a new process. If {@var mode} is
{@code P_NOWAIT}, this function returns the process ID of the new
process; if {@var mode} is {@code P_WAIT}, returns the process's exit
code if it exits normally, or {@code -}{@var signal}, where {@var
signal} is the signal that killed the process. On Windows, the process
ID will actually be the process handle, so can be used with the {@link
waitpid} function.

<p>The "{@code l}" and "{@code v}" variants of the {@link spawn*}
functions differ in how command-line arguments are passed. The "{@code
l}" variants are perhaps the easiest to work with if the number of
parameters is fixed when the code is written; the individual parameters
simply become additional parameters to the {@link spawnl*} functions.
The "{@code v}" variants are good when the number of parameters is
variable, with the arguments being passed in a list or tuple as the
{@var args} parameter. In either case, the arguments to the child
process must start with the name of the command being run.

<p>The variants which include a second "{@code p}" near the end ({@link
spawnlp}, {@link spawnlpe}, {@link spawnvp}, and {@link spawnvpe}) will
use the PATH environment variable to locate the program {@var file}.
When the environment is being replaced (using one of the {@link spawn*e}
variants, discussed in the next paragraph), the new environment is used
as the source of the PATH variable. The other variants, {@link spawnl},
{@link spawnle}, {@link spawnv}, and {@link spawnve}, will not use the
PATH variable to locate the executable; {@var path} must contain an
appropriate absolute or relative path.

<p>For {@link spawnle}, {@link spawnlpe}, {@link spawnve}, and {@link
spawnvpe} (note that these all end in "{@code e}"), the {@var env}
parameter must be a mapping which is used to define the environment
variables for the new process; the {@link spawnl}, {@link spawnlp},
{@link spawnv}, and {@link spawnvp} all cause the new process to inherit
the environment of the current process.

<p>As an example, the following calls to {@link spawnlp} and {@link
spawnvpe} are equivalent:

<pre>
import os
os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')

L = ['cp', 'index.html', '/dev/null']
os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)
</pre>


<p>Availability: Unix, Windows. {@link spawnlp}, {@link spawnlpe},
{@link spawnvp} and {@link spawnvpe} are not available on Windows.
<blockquote>
@since New in version 1.6. <br />
</blockquote>

@@variable P_NOWAIT
@@variable P_NOWAITO

<p>Possible values for the {@var mode} parameter to the {@link spawn*}
family of functions. If either of these values is given, the {@link
spawn*} functions will return as soon as the new process has been
created, with the process ID as the return value. Availability:
Macintosh, Unix, Windows.
<blockquote>
@since New in version 1.6. <br />
</blockquote>

@@variable P_WAIT

<p>Possible value for the {@var mode} parameter to the {@link spawn*}
family of functions. If this is given as {@var mode}, the {@link spawn*}
functions will not return until the new process has run to completion
and will return the exit code of the process the run is successful, or
{@code -}{@var signal} if a signal kills the process. Availability:
Macintosh, Unix, Windows.
<blockquote>
@since New in version
1.6. <br />
</blockquote>

@@variable P_DETACH
@@variable P_OVERLAY

<p>Possible values for the {@var mode} parameter to the {@link spawn*}
family of functions. These are less portable than those listed above.
{@code P_DETACH} is similar to {@code P_NOWAIT}, but the new process is
detached from the console of the calling process. If {@code P_OVERLAY}
is used, the current process will be replaced; the {@link spawn*}
function will not return. Availability: Windows.
<blockquote>
@since New in version 1.6. <br />
</blockquote>

@@function startfile(path)

<p>Start a file with its associated application. This acts like
double-clicking the file in Windows Explorer, or giving the file name as
an argument to the start command from the interactive command shell: the
file is opened with whatever application (if any) its extension is
associated.

<p>{@link startfile} returns as soon as the associated application is
launched. There is no option to wait for the application to close, and
no way to retrieve the application's exit status. The {@var path}
parameter is relative to the current directory. If you want to use an
absolute path, make sure the first character is not a slash ("{@code
/}"); the underlying Win32 {@link c:ShellExecute} function doesn't work
if it is. Use the {@link os.path.normpath} function to ensure that the
path is properly encoded for Win32. Availability: Windows.
<blockquote>
@since New in version
2.0. <br />
</blockquote>

@@function system(command)

<p>Execute the command (a string) in a subshell. This is implemented by
calling the Standard C function {@link c:system}, and has the same
limitations. Changes to {@code posix.environ}, {@code sys.stdin}, etc.
are not reflected in the environment of the executed command.

<p>On Unix, the return value is the exit status of the process encoded
in the format specified for {@link wait}. Note that POSIX does not
specify the meaning of the return value of the C {@link c:system}
function, so the return value of the Python function is
system-dependent.

<p>On Windows, the return value is that returned by the system shell
after running {@var command}, given by the Windows environment variable
COMSPEC: on command.com systems (Windows 95, 98 and ME) this is always
{@code 0}; on cmd.exe systems (Windows NT, 2000 and XP) this is the exit
status of the command run; on systems using a non-native shell, consult
your shell documentation.

<p>Availability: Macintosh, Unix, Windows.

@@function times()

<p>Return a 5-tuple of floating point numbers indicating accumulated
(processor or other) times, in seconds. The items are: user time, system
time, children's user time, children's system time, and elapsed real
time since a fixed point in the past, in that order. See the Unix manual
page times(2) or the corresponding Windows Platform API documentation.
Availability: Macintosh, Unix, Windows.

@@function wait()

<p>Wait for completion of a child process, and return a tuple containing
its pid and exit status indication: a 16-bit number, whose low byte is
the signal number that killed the process, and whose high byte is the
exit status (if the signal number is zero); the high bit of the low byte
is set if a core file was produced. Availability: Macintosh, Unix.

@@function waitpid(pid, options)

<p>The details of this function differ on Unix and Windows.

<p>On Unix: Wait for completion of a child process given by process id
{@var pid}, and return a tuple containing its process id and exit status
indication (encoded as for {@link wait}). The semantics of the call are
affected by the value of the integer {@var options}, which should be
{@code 0} for normal operation.

<p>If {@var pid} is greater than {@code 0}, {@link waitpid} requests
status information for that specific process. If {@var pid} is {@code
0}, the request is for the status of any child in the process group of
the current process. If {@var pid} is {@code -1}, the request pertains
to any child of the current process. If {@var pid} is less than {@code
-1}, status is requested for any process in the process group {@code
-}{@var pid} (the absolute value of {@var pid}).

<p>On Windows: Wait for completion of a process given by process handle
{@var pid}, and return a tuple containing {@var pid}, and its exit
status shifted left by 8 bits (shifting makes cross-platform use of the
function easier). A {@var pid} less than or equal to {@code 0} has no
special meaning on Windows, and raises an exception. The value of
integer {@var options} has no effect. {@var pid} can refer to any
process whose id is known, not necessarily a child process. The {@link
spawn} functions called with {@code P_NOWAIT} return suitable process
handles.

@@variable WNOHANG

<p>The option for {@link waitpid} to return immediately if no child
process status is available immediately. The function returns {@code (0,
0)} in this case. Availability: Macintosh, Unix.

@@variable WCONTINUED

<p>This option causes child processes to be reported if they have been
continued from a job control stop since their status was last reported.
Availability: Some Unix systems.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable WUNTRACED

<p>This option causes child processes to be reported if they have been
stopped but their current state has not been reported since they were
stopped. Availability: Macintosh, Unix.
<blockquote>
@since New in version
2.3. <br />
</blockquote>

@@text 

<p>The following functions take a process status code as returned by
{@link system}, {@link wait}, or {@link waitpid} as a parameter. They
may be used to determine the disposition of a process.

@@function WCOREDUMP(status)

<p>Returns {@link True} if a core dump was generated for the process,
otherwise it returns {@link False}. Availability: Macintosh, Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function WIFCONTINUED(status)

<p>Returns {@link True} if the process has been continued from a job
control stop, otherwise it returns {@link False}. Availability: Unix.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function WIFSTOPPED(status)

<p>Returns {@link True} if the process has been stopped, otherwise it
returns {@link False}. Availability: Unix.

@@function WIFSIGNALED(status)

<p>Returns {@link True} if the process exited due to a signal, otherwise
it returns {@link False}. Availability: Macintosh, Unix.

@@function WIFEXITED(status)

<p>Returns {@link True} if the process exited using the exit(2) system
call, otherwise it returns {@link False}. Availability: Macintosh, Unix.

@@function WEXITSTATUS(status)

<p>If {@code WIFEXITED(}{@var status}) is true, return the integer
parameter to the exit(2) system call. Otherwise, the return value is
meaningless. Availability: Macintosh, Unix.

@@function WSTOPSIG(status)

<p>Return the signal which caused the process to stop. Availability:
Macintosh, Unix.

@@function WTERMSIG(status)

<p>Return the signal which caused the process to exit. Availability:
Macintosh, Unix.

@@text 

<h2>Miscellaneous System Information</h2>

@@function confstr(name)

<p>Return string-valued system configuration values. {@var name}
specifies the configuration value to retrieve; it may be a string which
is the name of a defined system value; these names are specified in a
number of standards (POSIX, Unix 95, Unix 98, and others). Some
platforms define additional names as well. The names known to the host
operating system are given in the {@code confstr_names} dictionary. For
configuration variables not included in that mapping, passing an integer
for {@var name} is also accepted. Availability: Macintosh, Unix.

<p>If the configuration value specified by {@var name} isn't defined,
the empty string is returned.

<p>If {@var name} is a string and is not known, {@link
exceptions.ValueError} is raised. If a specific value for {@var name} is
not supported by the host system, even if it is included in {@code
confstr_names}, an {@link exceptions.OSError} is raised with {@code
errno.EINVAL} for the error number.

@@variable confstr_names

<p>Dictionary mapping names accepted by {@link confstr} to the integer
values defined for those names by the host operating system. This can be
used to determine the set of names known to the system. Availability:
Macintosh, Unix.

@@function getloadavg()

<p>Return the number of processes in the system run queue averaged over
the last 1, 5, and 15 minutes or raises OSError if the load average was
unobtainable.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function sysconf(name)

<p>Return integer-valued system configuration values. If the
configuration value specified by {@var name} isn't defined, {@code -1}
is returned. The comments regarding the {@var name} parameter for {@link
confstr} apply here as well; the dictionary that provides information on
the known names is given by {@code sysconf_names}. Availability:
Macintosh, Unix.

@@variable sysconf_names

<p>Dictionary mapping names accepted by {@link sysconf} to the integer
values defined for those names by the host operating system. This can be
used to determine the set of names known to the system. Availability:
Macintosh, Unix.

@@text 

<p>The follow data values are used to support path manipulation
operations. These are defined for all platforms.

<p>Higher-level operations on pathnames are defined in the {@link
os.path} module.

@@variable curdir

<p>The constant string used by the operating system to refer to the
current directory. For example: {@code '.'} for POSIX or {@code ':'} for
Mac OS 9. Also available via {@link os.path}.

@@variable pardir

<p>The constant string used by the operating system to refer to the
parent directory. For example: {@code '..'} for POSIX or {@code '::'}
for Mac OS 9. Also available via {@link os.path}.

@@variable sep

<p>The character used by the operating system to separate pathname
components, for example, "{@code /}" for POSIX or "{@code :}" for Mac OS
9. Note that knowing this is not sufficient to be able to parse or
concatenate pathnames -- use {@link os.path.split} and {@link
os.path.join} -- but it is occasionally useful. Also available via
{@link os.path}.

@@variable altsep

<p>An alternative character used by the operating system to separate
pathname components, or {@link None} if only one separator character
exists. This is set to "{@code /}" on Windows systems where {@code sep}
is a backslash. Also available via {@link os.path}.

@@variable extsep

<p>The character which separates the base filename from the extension;
for example, the "{@code .}" in os.py. Also available via {@link
os.path}.
<blockquote>
@since New in version
2.2. <br />
</blockquote>

@@variable pathsep

<p>The character conventionally used by the operating system to separate
search path components (as in PATH), such as "{@code :}" for POSIX or
"{@code ;}" for Windows. Also available via {@link os.path}.

@@variable defpath

<p>The default search path used by {@link exec*p*} and {@link spawn*p*}
if the environment doesn't have a {@code 'PATH'} key. Also available via
{@link os.path}.

@@variable linesep

<p>The string used to separate (or, rather, terminate) lines on the
current platform. This may be a single character, such as {@code '\ n'}
for POSIX or {@code '\r'} for Mac OS, or multiple characters, for
example, {@code '\r\n'} for Windows.

@@variable devnull

<p>The file path of the null device. For example: {@code '/dev/null'}
for POSIX or {@code 'Dev:Nul'} for Mac OS 9. Also available via {@link
os.path}.
<blockquote>
@since New in version 2.4. <br />
</blockquote>

@@text 

<h2>Miscellaneous Functions</h2>

@@function urandom(n)

<p>Return a string of {@var n} random bytes suitable for cryptographic
use.

<p>This function returns random bytes from an OS-specific randomness
source. The returned data should be unpredictable enough for
cryptographic applications, though its exact quality depends on the OS
implementation. On a UNIX-like system this will query /dev/urandom, and
on Windows it will use CryptGenRandom. If a randomness source is not
found, {@link exceptions.NotImplementedError} will be raised.
<blockquote>
@since New in version 2.4. <br />
</blockquote>

@@text 
