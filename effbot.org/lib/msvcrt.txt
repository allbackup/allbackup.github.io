
@@module msvcrt

<h1>msvcrt - Useful routines from the MS VC++ runtime</h1>

<p>Availability: Windows.

<p>These functions provide access to some useful capabilities on Windows
platforms. Some higher-level modules use these functions to build the
Windows implementations of their services. For example, the {@link
getpass} module uses this in the implementation of the {@link getpass}
function.

<p>Further documentation on these functions can be found in the Platform
API documentation.

<h2>File Operations</h2>

@@function locking(fd, mode, nbytes)

<p>Lock part of a file based on file descriptor {@var fd} from the C
runtime. Raises {@link exceptions.IOError} on failure. The locked region
of the file extends from the current file position for {@var nbytes}
bytes, and may continue beyond the end of the file. {@var mode} must be
one of the {@code LK_}{@var *} constants listed below. Multiple regions
in a file may be locked at the same time, but may not overlap. Adjacent
regions are not merged; they must be unlocked individually.

@@variable LK_LOCK
@@variable LK_RLCK

<p>Locks the specified bytes. If the bytes cannot be locked, the program
immediately tries again after 1 second. If, after 10 attempts, the bytes
cannot be locked, {@link exceptions.IOError} is raised.

@@variable LK_NBLCK
@@variable LK_NBRLCK

<p>Locks the specified bytes. If the bytes cannot be locked, {@link
exceptions.IOError} is raised.

@@variable LK_UNLCK

<p>Unlocks the specified bytes, which must have been previously locked.

@@function setmode(fd, flags)

<p>Set the line-end translation mode for the file descriptor {@var fd}.
To set it to text mode, {@var flags} should be {@code os.O_TEXT}; for
binary, it should be {@code os.O_BINARY}.

@@function open_osfhandle(handle, flags)

<p>Create a C runtime file descriptor from the file handle {@var
handle}. The {@var flags} parameter should be a bit-wise OR of {@code
os.O_APPEND}, {@code os.O_RDONLY}, and {@code os.O_TEXT}. The returned
file descriptor may be used as a parameter to {@link os.fdopen} to
create a file object.

@@function get_osfhandle(fd)

<p>Return the file handle for the file descriptor {@var fd}. Raises
{@link exceptions.IOError} if {@var fd} is not recognized.

@@text 

<h2>Console I/O</h2>

@@function kbhit()

<p>Return true if a keypress is waiting to be read.

@@function getch()

<p>Read a keypress and return the resulting character. Nothing is echoed
to the console. This call will block if a keypress is not already
available, but will not wait for Enter to be pressed. If the pressed key
was a special function key, this will return {@code '\000'} or {@code
'\xe0'}; the next call will return the keycode. The Control-C keypress
cannot be read with this function.

@@function getche()

<p>Similar to {@link getch}, but the keypress will be echoed if it
represents a printable character.

@@function putch(char)

<p>Print the character {@var char} to the console without buffering.

@@function ungetch(char)

<p>Cause the character {@var char} to be &#8220;pushed back&#8221; into
the console buffer; it will be the next character read by {@link getch}
or {@link getche}.

@@text 

<h2>Other Functions</h2>

@@function heapmin()

<p>Force the {@link c:malloc} heap to clean itself up and return unused
blocks to the operating system. This only works on Windows NT. On
failure, this raises {@link exceptions.IOError}.
