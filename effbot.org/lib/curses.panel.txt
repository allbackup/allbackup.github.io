
@@module curses.panel

<h1>curses.panel&#8212;A panel stack extension for curses.</h1>

<p>Panels are windows with the added feature of depth, so they can be
stacked on top of each other, and only the visible portions of each
window will be displayed. Panels can be added, moved up or down in the
stack, and removed.

<h2>Functions</h2>

<p>The module {@link curses.panel} defines the following functions:

@@function bottom_panel()

<p>Returns the bottom panel in the panel stack.

@@function new_panel(win)

<p>Returns a panel object, associating it with the given window {@var
win}.

@@function top_panel()

<p>Returns the top panel in the panel stack.

@@function update_panels()

<p>Updates the virtual screen after changes in the panel stack. This
does not call {@link curses.doupdate}, so you'll have to do this
yourself.

@@text 

<h2>Panel Objects</h2>

<p>Panel objects, as returned by {@link new_panel} above, are windows
with a stacking order. There's always a window associated with a panel
which determines the content, while the panel methods are responsible
for the window's depth in the panel stack.

<p>Panel objects have the following methods:

@@method Panel.above()

<p>Returns the panel above the current panel.

@@method Panel.below()

<p>Returns the panel below the current panel.

@@method Panel.bottom()

<p>Push the panel to the bottom of the stack.

@@method Panel.hidden()

<p>Returns true if the panel is hidden (not visible), false otherwise.

@@method Panel.hide()

<p>Hide the panel. This does not delete the object, it just makes the
window on screen invisible.

@@method Panel.move(y, x)

<p>Move the panel to the screen coordinates {@code (}{@var y}, {@var
x}).

@@method Panel.replace(win)

<p>Change the window associated with the panel to the window {@var win}.

@@method Panel.set_userptr(obj)

<p>Set the panel's user pointer to {@var obj}. This is used to associate
an arbitrary piece of data with the panel, and can be any Python object.

@@method Panel.show()

<p>Display the panel (which might have been hidden).

@@method Panel.top()

<p>Push panel to the top of the stack.

@@method Panel.userptr()

<p>Returns the user pointer for the panel. This might be any Python
object.

@@method Panel.window()

<p>Returns the window object associated with the panel.
