
@@module chunk

<h1>chunk&#8212;Read IFF chunked data</h1>

<p>This module provides an interface for reading files that use EA IFF
85 chunks.{@link footnote:67687} This format is used in at least the
Audio Interchange File Format (AIFF/AIFF-C) and the Real Media File
Format (RMFF). The WAVE audio file format is closely related and can
also be read using this module.

<p>A chunk has the following structure:

<p><table border=1>
<tr> <th>
<p>Offset
<th>
<p>Length
<th>
<p>Contents
<tr> <td>
<p>0
<td>
<p>4
<td>
<p>Chunk ID
<tr> <td>
<p>4
<td>
<p>4
<td>
<p>Size of chunk in big-endian byte order, not including the header
<tr> <td>
<p>8
<td>
<p>{@var n}
<td>
<p>Data bytes, where {@var n} is the size given in the preceding field
<tr> <td>
<p>8 + {@var n}
<td>
<p>0 or 1
<td>
<p>Pad byte needed if {@var n} is odd and chunk alignment is used
</table></p>

<p>The ID is a 4-byte string which identifies the type of chunk.

<p>The size field (a 32-bit value, encoded using big-endian byte order)
gives the size of the chunk data, not including the 8-byte header.

<p>Usually an IFF-type file consists of one or more chunks. The proposed
usage of the {@link Chunk} class defined here is to instantiate an
instance at the start of each chunk and read from the instance until it
reaches the end, after which a new instance can be instantiated. At the
end of the file, creating a new instance will fail with a {@link
exceptions.EOFError} exception.

@@class Chunk(file[, align, bigendian, inclheader])

<p>Class which represents a chunk. The {@var file} argument is expected
to be a file-like object. An instance of this class is specifically
allowed. The only method that is needed is {@link read}. If the methods
{@link seek} and {@link tell} are present and don't raise an exception,
they are also used. If these methods are present and raise an exception,
they are expected to not have altered the object. If the optional
argument {@var align} is true, chunks are assumed to be aligned on
2-byte boundaries. If {@var align} is false, no alignment is assumed.
The default value is true. If the optional argument {@var bigendian} is
false, the chunk size is assumed to be in little-endian order. This is
needed for WAVE audio files. The default value is true. If the optional
argument {@var inclheader} is true, the size given in the chunk header
includes the size of the header. The default value is false.

@@text 

<p>A {@link Chunk} object supports the following methods:

@@method Chunk.getname()

<p>Returns the name (ID) of the chunk. This is the first 4 bytes of the
chunk.

@@method Chunk.getsize()

<p>Returns the size of the chunk.

@@method Chunk.close()

<p>Close and skip to the end of the chunk. This does not close the
underlying file.

@@text 

<p>The remaining methods will raise {@link exceptions.IOError} if called
after the {@link close} method has been called.

@@method Chunk.isatty()

<p>Returns {@link False}.

@@method Chunk.seek(pos[, whence])

<p>Set the chunk's current position. The {@var whence} argument is
optional and defaults to {@code 0} (absolute file positioning); other
values are {@code 1} (seek relative to the current position) and {@code
2} (seek relative to the file's end). There is no return value. If the
underlying file does not allow seek, only forward seeks are allowed.

@@method Chunk.tell()

<p>Return the current position into the chunk.

@@method Chunk.read([size])

<p>Read at most {@var size} bytes from the chunk (less if the read hits
the end of the chunk before obtaining {@var size} bytes). If the {@var
size} argument is negative or omitted, read all data until the end of
the chunk. The bytes are returned as a string object. An empty string is
returned when the end of the chunk is encountered immediately.

@@method Chunk.skip()

<p>Skip to the end of the chunk. All further calls to {@link read} for
the chunk will return {@code &#8221;}. If you are not interested in the
contents of the chunk, this method should be called so that the file
points to the start of the next chunk.
@@footnote foot67687
<p>&#8220;EA IFF 85&#8221; Standard for Interchange Format Files, Jerry
Morrison, Electronic Arts, January 1985.
