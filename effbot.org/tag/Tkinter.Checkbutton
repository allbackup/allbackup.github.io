<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>The Tkinter Checkbutton&nbsp;Widget</title> <script type="text/javascript">effbot_page_id=1920;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles
 (including this one) 
now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <p><a href="canvas.htm">back</a> <a href="entry.htm">next</a></p> <h1 class="maintitle">The Tkinter Checkbutton&nbsp;Widget</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p>The <b>Checkbutton</b> widget is a standard Tkinter widgets used
to implement on-off selections. Checkbuttons can contain text or
images, and you can associate a Python function or method with each
button. When the button is pressed, Tkinter calls that function or
method.</p><p>The button can only display text in a single font, but the text
may span more than one line. In addition, one of the characters can
be underlined, for example to mark a keyboard shortcut. By default,
the <b>Tab</b> key can be used to move to a button widget.</p><p>Each Checkbutton widget should be associated with a
variable.</p><h2>When to use the Checkbutton Widget</h2><p>The checkbutton widget is used to choose between two distinct values
(usually switching something on or off). Groups of checkbuttons can
be used to implement &#8220;many-of-many&#8221; selections.</p><p>To handle &#8220;one-of-many&#8221; choices, use <a href="radiobutton.htm"><b>Radiobutton</b></a> and <a href="listbox.htm"><b>Listbox</b></a> widgets.</p><h2 id="patterns">Patterns&#160;<a class="nav" href="#patterns" title="bookmark!">#</a></h2><p>(Also see the <a href="button.htm#patterns"><b>Button</b></a> patterns).</p><p>To use a <b>Checkbutton</b>, you must create a Tkinter variable.
To inspect the button state, query the variable.</p><pre class="python">
<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> *

master = Tk()

var = IntVar()

c = Checkbutton(master, text=<span class="pystring">"Expand"</span>, variable=var)
c.pack()

mainloop()</pre><p>By default, the variable is set to 1 if the button is selected,
and 0 otherwise. You can change these values using the
<b>onvalue</b> and <b>offvalue</b> options. The variable doesn&#8217;t
have to be an integer variable:</p><pre class="python">
    var = StringVar()
    c = Checkbutton(
        master, text=<span class="pystring">"Color image"</span>, variable=var,
        onvalue=<span class="pystring">"RGB"</span>, offvalue=<span class="pystring">"L"</span>
        )</pre><p>If you need to keep track of both the variable and the widget,
you can simplify your code somewhat by attaching the variable to
the widget reference object.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
    v = IntVar()
    c = Checkbutton(master, text=<span class="pystring">"Don't show this again"</span>, variable=v)
    c.var = v</pre></div><div class="yui-ge"><div class="yui-u first"><p>If your Tkinter code is already placed in a class (as it should
be), it is probably cleaner to store the variable in an attribute,
and use a bound method as callback:</p><pre class="python">
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, master):
        self.var = IntVar()
        c = Checkbutton(
            master, text=<span class="pystring">"Enable Tab"</span>,
            variable=self.var,
            command=self.cb)
        c.pack()

    <span class="pykeyword">def</span> <span class="pyfunction">cb</span>(self, event):
        <span class="pykeyword">print</span> <span class="pystring">"variable is"</span>, self.var.get()</pre><h2 id="reference">Reference&#160;<a class="nav" href="#reference" title="bookmark!">#</a></h2><div class="zone:include"><dl><dt><b>Checkbutton(master=None, **options)</b> (class) [<a href="#Tkinter.Checkbutton-class">#</a>]</dt><dd>
<p>A toggle button.</p><dl><dt><i>master</i></dt><dd>
Parent widget.</dd>
<dt><i>**options</i></dt><dd>
Widget options.  See the description of
   the <a class="link" href="#checkbutton.Checkbutton.config-method"><b>config</b></a> method for a list