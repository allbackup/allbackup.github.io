<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Future&nbsp;statements</title> <script type="text/javascript">effbot_page_id=1315;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Future&nbsp;statements</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p>A <em>future statement</em> is a directive to the compiler that a particular
module should be compiled using syntax or semantics that will be
available in a specified future release of Python. The future
statement is intended to ease migration to future versions of Python
that introduce incompatible changes to the language. It allows use of
the new features on a per-module basis before the release in which the
feature becomes standard.</p><p>Syntax (simplified):</p><blockquote><p><strong>from __future__ import</strong> <em>feature</em></p></blockquote><p>A future statement must appear near the top of the module.
The only lines that can appear before a future statement are:</p><ul><li>the module docstring (if any),</li><li>comments,</li><li>blank lines, and</li><li>other future statements.</li></ul><p>The following features are recognized by Python 2.5:</p><ul><li><strong>division</strong>: New-style division.</li><li><strong>generators</strong>: <a href="yield.htm"><strong>yield</strong></a>-statement support. Always enabled.</li><li><strong>nested_scopes</strong>: Nested scope support.  Always enabled.</li><li><strong><a href="with_statement.htm" /></strong>with_statement<strong />: <a href="with.htm"><strong>with</strong></a>-statement support.</li></ul><p>Note that &#8220;generators&#8221; and &#8220;nested_scopes&#8221; are redundant in 2.5
because they are always enabled.  They&#8217;re included for backwards
compatibility only.</p><p>A future statement is recognized and treated specially at compile
time: Changes to the semantics of core constructs are often
implemented by generating different code. It may even be the case that
a new feature introduces new incompatible syntax (such as a new
reserved word), in which case the compiler may need to parse the
module differently. Such decisions cannot be pushed off until runtime.</p><p>For any given release, the compiler knows which feature names have
been defined, and raises a compile-time error if a future statement
contains a feature not known to it.</p><p>The direct runtime semantics are the same as for any <a href="import.htm"><strong>import</strong></a> statement:
there is a standard module __future__, described later, and it
will be imported in the usual way at the time the future statement is
executed.</p><p>The interesting runtime semantics depend on the specific feature
enabled by the future statement.</p><p>Note that there is nothing special about the statement:</p><pre><code>import __future__ [as name]
</code></pre><p>That is not a future statement; it&#8217;s an ordinary <a href="import.htm"><strong>import</strong></a> statement
with no special semantics or syntax restrictions.</p><p>Code compiled by an <a href="exec.htm"><strong>exec</strong></a> statement or calls to the builtin functions
<a href="compile.htm"><strong>compile</strong></a> and <a href="execfile.htm"><strong>execfile</strong></a> that occur in a module M containing a future
statement will, by default, use the new syntax or semantics associated
with the future statement. This can, starting with Python 2.2 be
controlled by optional arguments to <a href="compile.htm"><strong>compile</strong></a> &#8212; see the documentation
of that function in the library reference for details.</p><p>A future statement typed at an interactive interpreter prompt will
take effect for the rest of the interpreter session. If an interpreter
is started with the <strong>-i</strong> option, is passed a script name to execute,
and the script includes a future statement, it will be in effect in
the interactive session started after the script is executed.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li> <li><b><a href="." title="Go to pyref index page.">::: pyref :::</a></b></li> </ul> </div> <!-- menu --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.01s 2012-09-08 13:22:29.159246.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
