<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Elements and Element&nbsp;Trees</title> <script type="text/javascript">effbot_page_id=71;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles
 (including this one) 
now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Elements and Element&nbsp;Trees</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | Last updated July 2007</p><p>This note introduces the Element, SubElement and ElementTree types
available in <a href="/downloads/#elementtree">the effbot.org
elementtree library</a>.</p><p>For an overview, with links to articles and more documentation, see the
<a href="element-index.htm"><cite>ElementTree Overview</cite></a> page.</p><p>For an API reference, see <a href="pythondoc-elementtree-ElementTree.htm"><cite>The elementtree.ElementTree Module</cite></a>.</p><p>You can download the library from <a href="/downloads/#elementtree">the effbot.org downloads
page</a>.</p><p>In this article:</p><dl><dt><a href="#the-element-type">The Element Type</a></dt><dt><a href="#attributes">Attributes</a></dt><dt><a href="#text-content">Text Content</a></dt><dt><a href="#searching-for-subelements">Searching for Subelements</a></dt><dt><a href="#reading-and-writing-xml-files">Reading and Writing XML Files</a></dt><dt><a href="#xml-namespaces">XML Namespaces</a></dt></dl><h2 id="the-element-type">The Element Type&#160;<a class="nav" href="#the-element-type" title="bookmark!">#</a></h2><p>The <a href="pythondoc-elementtree-ElementTree.htm#elementtree.ElementTree.Element-function"><b>Element</b></a> type is a flexible container object, designed
to store hierarchical data structures in memory.  The type can be
described as a cross between a list and a dictionary.</p><p>Each element has a number of properties associated with it:</p><ul><li>a <i>tag</i>.  This is a string identifying what kind of data this
element represents (the <i>element type</i>, in other words).</li><li>a number of <i>attributes</i>, stored in a Python dictionary.</li><li>a <i>text</i> string to hold text content, and a <i>tail</i>
string to hold trailing text</li><li>a number of <i>child elements</i>, stored in a Python sequence</li></ul><p>All elements must have a tag, but all other properties are
optional.  All strings can either be Unicode strings, or 8-bit
strings containing US-ASCII only.</p><p>To create an element, call the <b>Element</b> constructor, and pass
the tag string as the first argument:</p><pre class="python">
<span class="pykeyword">from</span> elementtree.ElementTree <span class="pykeyword">import</span> Element

root = Element(<span class="pystring">"root"</span>)</pre><p>You can access the tag string via the <b>tag</b> attribute:</p><pre class="python">
<span class="pykeyword">print</span> root.tag</pre><p>To build a tree, create more elements, and append them to the
parent element:</p><pre class="python">
root = Element(<span class="pystring">"root"</span>)

root.append(Element(<span class="pystring">"one"</span>))
root.append(Element(<span class="pystring">"two"</span>))
root.append(Element(<span class="pystring">"three"</span>))</pre><p>Since this is a very common operation, the library provides a
helper function called <b>SubElement</b> that creates a
new element and adds it to its parent, in one step:</p><pre class="python">
<span class="pykeyword">from</span> elementtree.ElementTree <span class="pykeyword">import</span> Element, SubElement

root = Element(<span class="pystring">"root"</span>)

SubElement(root, <span class="pystring">"one"</span>)
SubElement(root, <span class="pystring">"two"</span>)
SubElement(root, <span class="pystring">"three"</span>)</pre><p>To access the subelements, you can use ordinary list (sequence)
operations.  This includes <b>len(element)</b> to get the number of
subelements, <b>element[i]</b> to fetch the i&#8217;th subelement, and using
the <b>for-in</b> statement to loop over the subelements:</p><pre class="python">
<span class="pykeyword">for</span> node <span class="pykeyword">in</span> root:
    <span class="pykeyword">print</span> node</pre><p>The element type also supports slicing (including slice
assignment), and the standard <b>append</b>, <b>insert</b> and
<b>remove</b> methods:</p><pre class="python">
nodes = node[1:5]
node.append(subnode)
node.insert(0, subnode)
node.remove(subnode)</pre><p>Note that <b>remove</b> takes an element, not a tag.  To find the
element to remove, you can either loop over the parent, or use one of
the <b>find</b> methods described below.</p><h3 id="truth-testing">Truth Testing&#160;<a class="nav" href="#truth-testing" title="bookmark!">#</a></h3><p>In ElementTree 1.2 and earlier, the sequence behaviour
means that an element without any subelements tests as false (since it&#8217;s
an empty sequence), even if it contains text or attributes.
To check the return value from a function or method that may
return None instead of a node, you must use an explicit test.</p><pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">fetchnode</span>():
    ...

node = fetchnode()

<span class="pykeyword">if</span> <span class="pykeyword">not</span> node: <span class="pycomment"># careful!</span>
    <span class="pykeyword">print</span> <span class="pystring">"node not found, or node has no subnodes"</span>

<span class="pykeyword">if</span> node <span class="pykeyword">is</span> None:
    <span class="pykeyword">print</span> <span class="pystring">"node not found"</span></pre><p class="note"><b>Note:</b>
This behaviour is likely to change somewhat in ElementTree 1.3.  To write
code that is compatible in both directions, use &#8220;element is None&#8221; to test
for a missing element, and &#8220;len(element)&#8221; to test for non-empty elements.
</p><h3 id="accessing-parents">Accessing Parents&#160;<a class="nav" href="#accessing-parents" title="bookmark!">#</a></h3><p>The element structure has no parent pointers.  If you need to keep
track of child/parent relations, you can structure your program
to work on the parents rather than the children:</p><pre class="python">
<span class="pykeyword">for</span> parent <span class="pykeyword">in</span> tree.getiterator():
    <span class="pykeyword">for</span> child <span class="pykeyword">in</span> parent:
        ... work on parent/child tuple</pre><p>The <b>getiterator</b> function is explained in further detail below.</p><p>If you do this a lot, you can wrap the iterator code in a generator
function:</p><pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">iterparent</span>(tree):
    <span class="pykeyword">for</span> parent <span class="pykeyword">in</span> tree.getiterator():
        <span class="pykeyword">for</span> child <span class="pykeyword">in</span> parent:
            <span class="pykeyword">yield</span> parent, child

<span class="pykeyword">for</span> parent, child <span class="pykeyword">in</span> iterparent(tree):
    ... work on parent/child tuple</pre><p> Another approach is to use a separate data structure to map from
child elements to their parents.  In Python 2.4 and later, the following one-liner creates a child/parent map for an entire tree:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
parent_map = dict((c, p) <span class="pykeyword">for</span> p <span class="pykeyword">in</span> tree.getiterator() <span class="pykeyword">for</span> c <span class="pykeyword">in</span> p)</pre></div><div class="yui-ge"><div class="yui-u first"><h2 id="attributes">Attributes&#160;<a class="nav" href="#attributes" title="bookmark!">#</a></h2><p>In addition to the tag and the list of subelements, each element
can have one or more attributes.  Each element attribute consists of
a string key, and a corresponding value.  As for ordinary Python
dictionaries, all keys must be unique.</p><p>Element attributes are in fact stored in a standard Python
dictionary, which can be accessed via the <b>attrib</b> attribute.  To
set attributes, you can simply assign to <b>attrib</b> members:</p><pre class="python">
<span class="pykeyword">from</span> elementtree.ElementTree <span class="pykeyword">import</span> Element

elem = Element(<span class="pystring">"tag"</span>)
elem.attrib[<span class="pystring">"first"</span>] = <span class="pystring">"1"</span>
elem.attrib[<span class="pystring">"second"</span>] = <span class="pystring">"2"</span></pre><p>When creating a new element, you can pass in element attributes
using keyword arguments.  The previous example is better written
as:</p><pre class="python">
<span class="pykeyword">from</span> elementtree.ElementTree <span class="pykeyword">import</span> Element

elem = Element(<span class="pystring">"tag"</span>, first=<span class="pystring">"1"</span>, second=<span class="pystring">"2"</span>)</pre><p>The Element type provides shortcuts for <b>attrib.get</b>,
<b>attrib.keys</b>, and <b>attrib.items</b>.  There&#8217;s also a
<b>set</b> method, to set the value of an element attribute:</p><pre class="python">
<span class="pykeyword">from</span> elementtree.ElementTree <span class="pykeyword">import</span> Element

elem = Element(<span class="pystring">"tag"</span>, first=<span class="pystring">"1"</span>, second=<span class="pystring">"2"</span>)

<span class="pycomment"># print 'first' attribute</span>
<span class="pykeyword">print</sp