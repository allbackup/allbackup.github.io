<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Reading processing instructions and comments with&nbsp;ElementTree</title></head><body data-page-id="84"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Reading processing instructions and comments with&nbsp;ElementTree</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">March 2005 | Fredrik Lundh</p><p>The following is an alternative XML parser that adds <b>Comment</b>
and <b>ProcessingInstruction</b> elements to the element tree.  Since
such elements can appear outside the XML document proper, it wraps the
entire document in an extra <b>document</b> element.</p><p>Note that this uses undocumented and unsupported parts of the
ElementTree interface.  It does work with ElementTree 1.2.X, but
may not work with future versions.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide"><pre class="python wide">
<span class="pykeyword">import</span> elementtree.ElementTree <span class="pykeyword">as</span> ET

<span class="pykeyword">class</span> <span class="pyclass">PIParser</span>(ET.XMLTreeBuilder):

   <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self):
       ET.XMLTreeBuilder.__init__(self)
       <span class="pycomment"># assumes ElementTree 1.2.X</span>
       self._parser.CommentHandler = self.handle_comment
       self._parser.ProcessingInstructionHandler = self.handle_pi
       self._target.start(<span class="pystring">"document"</span>, {})

   <span class="pykeyword">def</span> <span class="pyfunction">close</span>(self):
       self._target.end(<span class="pystring">"document"</span>)
       <span class="pykeyword">return</span> ET.XMLTreeBuilder.close(self)

   <span class="pykeyword">def</span> <span class="pyfunction">handle_comment</span>(self, data):
       self._target.start(ET.Comment, {})
       self._target.data(data)
       self._target.end(ET.Comment)

   <span class="pykeyword">def</span> <span class="pyfunction">handle_pi</span>(self, target, data):
       self._target.start(ET.PI, {})
       self._target.data(target + <span class="pystring">" "</span> + data)
       self._target.end(ET.PI)

<span class="pykeyword">def</span> <span class="pyfunction">parse</span>(source):
    <span class="pykeyword">return</span> ET.parse(source, PIParser())</pre></div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
