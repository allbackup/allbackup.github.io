<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>An ElementTree&nbsp;Builder</title> <script type="text/javascript">effbot_page_id=74;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles

now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">An ElementTree&nbsp;Builder</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | November 2006 | Originally posted to <a href="http://online.effbot.org">online.effbot.org</a></p><p> Here&#8217;s a simple helper class for <a href="element-index.htm">ElementTree</a>, which
lets you use a more convenient syntax to construct XML fragment trees:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pykeyword">import</span> xml.etree.cElementTree as ET
<span class="pykeyword">import</span> functools

<span class="pykeyword">class</span> <span class="pyclass">_E</span>(object):

    <span class="pykeyword">def</span> <span class="pyfunction">__call__</span>(self, tag, *children, **attrib):
        elem = ET.Element(tag, attrib)
        <span class="pykeyword">for</span> item <span class="pykeyword">in</span> children:
            <span class="pykeyword">if</span> isinstance(item, dict):
                elem.attrib.update(item)
            <span class="pykeyword">elif</span> isinstance(item, basestring):
                <span class="pykeyword">if</span> len(elem):
                    elem[-1].tail = (elem[-1].tail <span class="pykeyword">or</span> <span class="pystring">""</span>) + item
                <span class="pykeyword">else</span>:
                    elem.text = (elem.text <span class="pykeyword">or</span> <span class="pystring">""</span>) + item
            <span class="pykeyword">elif</span> ET.iselement(item):
                elem.append(item)
            <span class="pykeyword">else</span>:
                <span class="pykeyword">raise</span> TypeError(<span class="pystring">"bad argument: %r"</span> % item)
        <span class="pykeyword">return</span> elem

    <span class="pykeyword">def</span> <span class="pyfunction">__getattr__</span>(self, tag):
        <span class="pykeyword">return</span> functools.partial(sel