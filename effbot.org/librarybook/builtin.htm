<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The __builtin__&nbsp;module</title></head><body data-page-id="480"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The __builtin__&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>This module contains built-in functions which are automatically
available in all Python modules. You usually don&#8217;t have to import
this module; Python does that for you when necessary.</p><h3 id="apply">Calling a function with arguments from a tuple or
dictionary&#160;<a class="nav" href="#apply" title="bookmark!">#</a></h3><p>Python allows you to build function argument lists on the fly.
Just put all the arguments in a tuple, and call the built-in
<b>apply</b> function:</p><div class="example">
<b style="example">Example: Using the apply
function</b>
<pre>
# File: <a href="builtin/builtin-apply-example-1.py">builtin-apply-example-1.py</a>

def function(a, b):
    print a, b

apply(function, ("whither", "canada?"))
apply(function, (1, 2 + 3))

</pre><pre class="computeroutput" moreinfo="NONE">
whither canada?
1 5
</pre></div><p>To pass keyword arguments to a function, you can use a
dictionary as the third argument to <b>apply</b>:</p><div class="example">
<b style="example">Example: Using the apply
function to pass keyword arguments</b>
<pre>
# File: <a href="builtin/builtin-apply-example-2.py">builtin-apply-example-2.py</a>

def function(a, b):
    print a, b

apply(function, ("crunchy", "frog"))
apply(function, ("crunchy",), {"b": "frog"})
apply(function, (), {"a": "crunchy", "b": "frog"})

</pre><pre class="computeroutput" moreinfo="NONE">
crunchy frog
crunchy frog
crunchy frog
</pre></div><p>One common use for <b>apply</b> is to pass constructor
arguments from a subclass on to the base class, especially if the
constructor takes a lot of arguments.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the apply
function to call base class constructors</b>
<pre class="wide">
# File: <a href="builtin/builtin-apply-example-3.py">builtin-apply-example-3.py</a>

class Rectangle:
    def __init__(self, color="white", width=10, height=10):
        print "create a", color, self, "sized", width, "x", height

class RoundedRectangle(Rectangle):
    def __init__(self, **kw):
        apply(Rectangle.__init__, (self,), kw)

rect = Rectangle(color="green", height=100, width=100)
rect = RoundedRectangle(color="blue", height=20)

</pre><pre class="computeroutput wide" moreinfo="NONE">
create a green &lt;Rectangle instance at 8c8260&gt; sized 100 x 100
create a blue &lt;RoundedRectangle instance at 8c84c0&gt; sized 10 x 20
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>Python 2.0 provides an alternate syntax. Instead of
<b>apply</b>, you can use an ordinary function call, and use
<b>*</b> to mark the tuple, and <b>**</b> to mark the
dictionary.</p><p>The following two statements are equivalent:</p><pre>
result = function(*args, **kwargs)
result = apply(function, args, kwargs)
</pre><h3 id="import">Loading and reloading modules&#160;<a class="nav" href="#import" title="bookmark!">#</a></h3><p>If you&#8217;ve written a Python program larger than just a few lines,
you know that the <b>import</b> statement is used to import
external modules (you can also use the <b>from-import</b>
version). What you might not know already is that <b>import</b>
delegates the actual work to a built-in function called
<b>__import__</b>.</p><p>The trick is that you can actually call this function directly.
This can be handy if you have the module name in a string variable,
like in the following example, which imports all modules whose
names end with <span>&#8220;<b>-plugin</b>&#8221;</span>:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the
__import__ function to load named modules</b>
<pre class="wide">
# File: <a href="builtin/builtin-import-example-1.py">builtin-import-example-1.py</a>

import glob, os

modules = []

for module_file in glob.glob("*-plugin.py"):
    try:
        module_name, ext = os.path.splitext(os.path.basename(module_file))
        module = __import__(module_name)
        modules.append(module)
    except ImportError:
        pass # ignore broken modules

# say hello to all modules
for module in modules:
    module.hello()

</pre><pre class="computeroutput wide" moreinfo="NONE">
example-plugin says hello
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>Note that the plugin modules have hyphens in the name. This
means that you cannot import such a module using the ordinary
<b>import</b> command, since you cannot have hyphens in Python
identifiers.</p><p>Here&#8217;s the plugin used in this example:</p><div class="example">
<b style="example">Example: A sample
plugin</b>
<pre>
# File: <a href="builtin/example-plugin.py">example-plugin.py</a>

def hello():
    print "example-plugin says hello"
</pre></div><p>The following example shows how to get a function object, given
that you have the module and function name as strings:</p><div class="example">
<b style="example">Example: Using the
__import__ function to get a named function</b>
<pre>
# File: <a href="builtin/builtin-import-example-2.py">builtin-import-example-2.py</a>

def getfunctionbyname(module_name, function_name):
    module = __import__(module_name)
    return getattr(module, function_name)

print repr(getfunctionbyname("dumbdbm", "open"))

</pre><pre class="computeroutput" moreinfo="NONE">
&lt;function open at 794fa0&gt;
</pre></div><p>You can also use this function to implement lazy loading of
modules. In the following example, the <b><a href="string.htm">string</a></b> module is imported
when it is first used:</p><div class="example">
<b style="example">Example: Using the
__import__ function to implement lazy import</b>
<pre>
# File: <a href="builtin/builtin-import-example-3.py">builtin-import-example-3.py</a>

class LazyImport:
    def __init__(self, module_name):
        self.module_name = module_name
        self.module = None
    def __getattr__(self, name):
        if self.module is None:
            self.module = __import__(self.module_name)
        return getattr(self.module, name)

string = LazyImport("string")

print string.lowercase

</pre><pre class="computeroutput" moreinfo="NONE">
abcdefghijklmnopqrstuvwxyz
</pre></div><p>Python provides some basic support for reloading modules that
you&#8217;ve already imported. The following example loads the
<b>hello.py</b> file three times:</p><div class="example">
<b style="example">Example: Using the reload
function</b>
<pre>
# File: <a href="builtin/builtin-reload-example-1.py">builtin-reload-example-1.py</a>

import hello
reload(hello)
reload(hello)

</pre><pre class="computeroutput" moreinfo="NONE">
hello again, and welcome to the show
hello again, and welcome to the show
hello again, and welcome to the show
</pre></div><p>
<b>reload</b> uses the module name associated with the module
object, not the variable name. This means that even if you&#8217;ve
renamed the module, <b>reload</b> will still be able to find the
original module.</p><p>Note that when you reload a module, it is recompiled, and the
new module replaces the old one in the module dictionary. However,
if you have created instances of classes defined in that module,
those instances will still use the old implementation.</p><p>Likewise, if you&#8217;ve used <b>from-import</b> to create
references to module members in other modules, those references
will not be updated.</p><h3 id="dir">Looking in namespaces&#160;<a class="nav" href="#dir" title="bookmark!">#</a></h3><p>The <b>dir</b> function returns a list of all members of a
given module, class, instance, or other type. It&#8217;s probably most
useful when you&#8217;re working with an interactive Python interpreter,
but can also come in handy in other situations.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the dir
function</b>
<pre class="wide">
# File: <a href="builtin/builtin-dir-example-1.py">builtin-dir-example-1.py</a>

def dump(value):
    print value, "=&gt;", dir(value)

import sys

dump(0)
dump(1.0)
dump(0.0j) # complex number
dump([]) # list
dump({}) # dictionary
dump("string")
dump(len) # function
dump(sys) # module

</pre><pre class="computeroutput wide" moreinfo="NONE">
0 =&gt; []
1.0 =&gt; []
0j =&gt; ['conjugate', 'imag', 'real']
[] =&gt; ['append', 'count', 'extend', 'index', 'insert',
    'pop', 'remove', 'reverse', 'sort']
{} =&gt; ['clear', 'copy', 'get', 'has_key', 'items',
    'keys', 'update', 'values']
string =&gt; []
&lt;built-in function len&gt; =&gt; ['__doc__', '__name__', '__self__']
&lt;module 'sys' (built-in)&gt; =&gt; ['__doc__', '__name__',
    '__stderr__', '__stdin__', '__stdout__', 'argv',
    'builtin_module_names', 'copyright', 'dllhandle',
    'exc_info', 'exc_type', 'exec_prefix', 'executable',
...
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>In the following example, the <b>getmember</b> function
returns all class-level attributes and methods defined by a given
class:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the dir
function to find all members of a class</b>
<pre class="wide">
# File: <a href="builtin/builtin-dir-example-2.py">builtin-dir-example-2.py</a>

class A:
    def a(self):
        pass
    def b(self):
        pass

class B(A):
    def c(self):
        pass
    def d(self):
        pass

def getmembers(klass, members=None):
    # get a list of all class members, ordered by class
    if members is None:
        members = []
    for k in klass.__bases__:
        getmembers(k, members)
    for m in dir(klass):
        if m not in members:
            members.append(m)
    return members

print getmembers(A)
print getmembers(B)
print getmembers(IOError)

</pre><pre class="computeroutput wide" moreinfo="NONE">
['__doc__', '__module__', 'a', 'b']
['__doc__', '__module__', 'a', 'b', 'c', 'd']
['__doc__', '__getitem__', '__init__', '__module__', '__str__']
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>Note that the <b>getmembers</b> function returns an ordered
list. The earlier a name appears in the list, the higher up in the
class hierarchy it&#8217;s defined. If order doesn&#8217;t matter, you can use
a dictionary to collect the names instead of a list.</p><p>The <b>vars</b> function is similar, but it returns a
dictionary containing the current value for each member. If you use
it without an argument, it returns a dictionary containing what&#8217;s
visible in the current local namespace:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the vars
function</b>
<pre class="wide">
# File: <a href="builtin/builtin-vars-example-1.py">builtin-vars-example-1.py</a>

book = "library2"
pages = 250
scripts = 350

print "the %(book)s book contains more than %(scripts)s scripts" % vars()

</pre><pre class="computeroutput wide" moreinfo="NONE">
the library book contains more than 350 scripts
</pre></div></div><div class="yui-ge"><div class="yui-u first"><h3 id="type">Checking an object&#8217;s type&#160;<a class="nav" href="#type" title="bookmark!">#</a></h3><p>Python is a dynamically typed language, which means that a given
variable can be bound to values of different types at different
occasions. In the following example, the same function is called
with an integer, a floating point value, and a string:</p><pre>
def function(value):
    print value

function(1)
function(1.0)
function("one")
</pre><p>The <b>type</b> function allows you to check what type a
variable has. This function returns a <i>type descriptor</i>, which
is a unique object for each type provided by the Python
interpreter.</p><div class="example">
<b style="example">Example: Using the type
function</b>
<pre>
# File: <a href="builtin/builtin-type-example-1.py">builtin-type-example-1.py</a>

def dump(value):
    print type(value), value

dump(1)
dump(1.0)
dump("one")

</pre><pre class="computeroutput" moreinfo="NONE">
&lt;type 'int'&gt; 1
&lt;type 'float'&gt; 1.0
&lt;type 'string'&gt; one
</pre></div><p>Each type has a single corresponding type object, which means
that you can use the <b>is</b> operator (object identity) to do
type testing:</p><div class="example">
<b style="example">Example: Using the type
function to distinguish between file names and file objects</b>
<pre>
# File: <a href="builtin/builtin-type-example-2.py">builtin-type-example-2.py</a>

def load(file):
    if isinstance(file, type("")):
        file = open(file, "rb")
    return file.read()

print len(load("samples/sample.jpg")), "bytes"
print len(load(open("samples/sample.jpg", "rb"))), "bytes"

</pre><pre class="computeroutput" moreinfo="NONE">
4672 bytes
4672 bytes
</pre></div><p>The <b>callable</b> function checks if an object can be called
(either directly or via <b>apply</b>). It returns true for
functions, methods, lambda expressions, classes, and class
instances which define the <b>__call__</b> method.</p><div class="example">
<b style="example">Example: Using the callable
function</b>
<pre>
# File: <a href="builtin/builtin-callable-example-1.py">builtin-callable-example-1.py</a>

def dump(function):
    if callable(function):
        print function, "is callable"
    else:
        print function, "is *not* callable"

class A:
    def method(self, value):
        return value

class B(A):
    def __call__(self, value):
        return value

a = A()
b = B()

dump(0) # simple objects
dump("string")
dump(callable)
dump(dump) # function

dump(A) # classes
dump(B)
dump(B.method)

dump(a) # instances
dump(b)
dump(b.method)

</pre><pre class="computeroutput" moreinfo="NONE">
0 is *not* callable
string is *not* callable
&lt;built-in function callable&gt; is callable
&lt;function dump at 8ca320&gt; is callable
A is callable
B is callable
&lt;unbound method A.method&gt; is callable
&lt;A instance at 8caa10&gt; is *not* callable
&lt;B instance at 8cab00&gt; is callable
&lt;method A.method of B instance at 8cab00&gt; is callable
</pre></div><p>Note that the class objects (<b>A</b> and <b>B</b>) are both
callable; if you call them, they create new objects. However,
instances of class <b>A</b> are not callable, since that class
doesn&#8217;t have a <b>__call__</b> method.</p><p>You&#8217;ll find functions to check if an object is of any of the
built-in number, sequence, or dictionary types in the <b><a href="operator.htm">operator</a></b> module.
However, since it&#8217;s easy to create a class that implements e.g. the
basic sequence methods, it&#8217;s usually a bad idea to use explicit
type testing on such objects.</p><p>Things get even more complicated when it comes to classes and
instances. Python doesn&#8217;t treat classes as types per se. Instead,
all classes belong to a special class type, and all class instances
belong to a special instance type.</p><p>This means that you cannot use <b>type</b> to test if an
instance belongs to a given class; <i>all instances have the same
type!</i> To solve this, you can use the <b>isinstance</b>
function, which checks if an object is an instance of a given class
(or of a subclass to it).</p><div class="example">
<b style="example">Example: Using the
isinstance function</b>
<pre>
# File: <a href="builtin/builtin-isinstance-example-1.py">builtin-isinstance-example-1.py</a>

class A:
    pass

class B:
    pass

class C(A):
    pass

class D(A, B):
    pass

def dump(object):
    print object, "=&gt;",
    if isinstance(object, A):
        print "A",
    if isinstance(object, B):
        print "B",
    if isinstance(object, C):
        print "C",
    if isinstance(object, D):
        print "D",
    print

a = A()
b = B()
c = C()
d = D()

dump(a)
dump(b)
dump(c)
dump(d)
dump(0)
dump("string")

</pre><pre class="computeroutput" moreinfo="NONE">
&lt;A instance at 8ca6d0&gt; =&gt; A
&lt;B instance at 8ca750&gt; =&gt; B
&lt;C instance at 8ca780&gt; =&gt; A C
&lt;D instance at 8ca7b0&gt; =&gt; A B D
0 =&gt;
string =&gt;
</pre></div><p>The <b>issubclass</b> is similar, but checks whether a class
object is the same as a given class, or is a subclass of it.</p><p>Note that while <b>isinstance</b> accepts any kind of object,
the <b>issubclass</b> function raises a <b>TypeError</b>
exception if you use it on something that is not a class
object.</p><div class="example">
<b style="example">Example: Using the
issubclass function</b>
<pre>
# File: <a href="builtin/builtin-issubclass-example-1.py">builtin-issubclass-example-1.py</a>

class A:
    pass

class B:
    pass

class C(A):
    pass

class D(A, B):
    pass

def dump(object):
    print object, "=&gt;",
    if issubclass(object, A):
        print "A",
    if issubclass(object, B):
        print "B",
    if issubclass(object, C):
        print "C",
    if issubclass(object, D):
        print "D",
    print

dump(A)
dump(B)
dump(C)
dump(D)
dump(0)
dump("string")

</pre><pre class="computeroutput" moreinfo="NONE">
A =&gt; A
B =&gt; B
C =&gt; A C
D =&gt; A B D
0 =&gt;
Traceback (innermost last):
  File "builtin-issubclass-example-1.py", line 29, in ?
  File "builtin-issubclass-example-1.py", line 15, in dump
TypeError: arguments must be classes
</pre></div><h3 id="eval">Evaluating Python expressions&#160;<a class="nav" href="#eval" title="bookmark!">#</a></h3><p>Python provides several ways to interact with the interpreter
from within a program. For example, the <b>eval</b> function
evaluates a string as if it were a Python expression. You can pass
it a literal, simple expressions, or even use built-in
functions:</p><div class="example">
<b style="example">Example: Using the eval
function</b>
<pre>
# File: <a href="builtin/builtin-eval-example-1.py">builtin-eval-example-1.py</a>

def dump(expression):
    result = eval(expression)
    print expression, "=&gt;", result, type(result)

dump("1")
dump("1.0")
dump("'string'")
dump("1.0 + 2.0")
dump("'*' * 10")
dump("len('world')")

</pre><pre class="computeroutput" moreinfo="NONE">
1 =&gt; 1 &lt;type 'int'&gt;
1.0 =&gt; 1.0 &lt;type 'float'&gt;
'string' =&gt; string &lt;type 'string'&gt;
1.0 + 2.0 =&gt; 3.0 &lt;type 'float'&gt;
'*' * 10 =&gt; ********** &lt;type 'string'&gt;
len('world') =&gt; 5 &lt;type 'int'&gt;
</pre></div><p>A problem with <b>eval</b> is that if you cannot trust the source
from which you got the string, you may get into trouble. For example,
someone might use the built-in <b>__import__</b> function to load the
<a href="os.htm"><b>os</b></a> module, and then remove files on your
disk:</p><div class="example">
<b style="example">Example: Using the eval
function to execute arbitrary commands</b>
<pre>
# File: <a href="builtin/builtin-eval-example-2.py">builtin-eval-example-2.py</a>

print eval("__import__('os').getcwd()")
print eval("__import__('os').remove('file')")

</pre><pre class="computeroutput" moreinfo="NONE">
/home/fredrik/librarybook
Traceback (innermost last):
 File "builtin-eval-example-2", line 2, in ?
 File "&lt;string&gt;", line 0, in ?
os.error: (2, 'No such file or directory')
</pre></div><p>Note that you get an <b>os.error</b> exception, which means
that <i>Python actually tried to remove the file!</i></p><p>Luckily, there&#8217;s a way around this problem. You can pass a
second argument to <b>eval</b>, which should contain a dictionary
defining the namespace in which the expression is evaluated. Let&#8217;s
pass in an empty namespace:</p><pre>
&gt;&gt;&gt; print eval("__import__('os').remove('file')", {})
Traceback (innermost last):
  File "&lt;stdin&gt;", line 1, in ?
  File "&lt;string&gt;", line 0, in ?
os.error: (2, 'No such file or directory')
</pre><p>Hmm. We still end up with an <b>os.error</b> exception.</p><p>The reason for this is that Python looks in the dictionary
before it evaluates the code, and if it doesn&#8217;t find a variable
named <b>__builtins__</b> in there (note the plural form), it
adds one:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide">
&gt;&gt;&gt; namespace = {}
&gt;&gt;&gt; print eval("__import__('os').remove('file')", namespace)
Traceback (innermost last):
  File "&lt;stdin&gt;", line 1, in ?
  File "&lt;string&gt;", line 0, in ?
os.error: (2, 'No such file or directory')
&gt;&gt;&gt; namespace.keys()
['__builtins__']
</pre></div><div class="yui-ge"><div class="yui-u first"><p>If you print the contents of the namespace variable, you&#8217;ll find
that it contains the full set of built-in functions.</p><p>The solution to this little dilemma isn&#8217;t far away: since Python
doesn&#8217;t add this item if it is already there, you just have to add
a dummy item called <b>__builtins__</b> to the namespace before
calling <b>eval</b>:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Safely using the
eval function to evaluate arbitrary strings</b>
<pre class="wide">
# File: <a href="builtin/builtin-eval-example-3.py">builtin-eval-example-3.py</a>

print eval("__import__('os').getcwd()", {})
print eval("__import__('os').remove('file')", {"__builtins__": {}})

</pre><pre class="computeroutput wide" moreinfo="NONE">
/home/fredrik/librarybook
Traceback (innermost last):
  File "builtin-eval-example-3.py", line 2, in ?
  File "&lt;string&gt;", line 0, in ?
NameError: __import__
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>Note that this doesn&#8217;t protect you from CPU or memory resource
attacks (for example, something like
<b>eval(&#8220;&#8217;*&#8217;*1000000*2*2*2*2*2*2*2*2*2&#8221;)</b> will most likely
cause your program to run out of memory after a while).  In
other words, <b>eval</b> may be useful for trusted sources,
but you shouldn&#8217;t use it on arbitrary data, and especially
not if you get data from potentially malevolent sources.</p><h3 id="exec">Compiling and executing code&#160;<a class="nav" href="#exec" title="bookmark!">#</a></h3><p>The <b>eval</b> function only works for simple expressions. To
handle larger blocks of code, use the <b>compile</b> and
<b>exec</b> functions:</p><div class="example">
<b style="example">Example: Using the compile
function to check syntax</b>
<pre>
# File: <a href="builtin/builtin-compile-example-1.py">builtin-compile-example-1.py</a>

NAME = "script.py"

BODY = """
prnt 'owl-stretching time'
"""

try:
    compile(BODY, NAME, "exec")
except SyntaxError, v:
    print "syntax error:", v, "in", NAME

</pre><pre class="computeroutput" moreinfo="NONE">
syntax error: invalid syntax in script.py
</pre></div><p>When successful, the <b>compile</b> function returns a code
object, which you can execute with the <b>exec</b> statement:</p><div class="example">
<b style="example">Example: Compiling and
executing compiled code</b>
<pre>
# File: <a href="builtin/builtin-compile-example-2.py">builtin-compile-example-2.py</a>

BODY = """
print 'the ant, an introduction'
"""

code = compile(BODY, "&lt;script&gt;", "exec")

print code

exec code

</pre><pre class="computeroutput" moreinfo="NONE">
&lt;code object ? at 8c6be0, file "&lt;script&gt;", line 0&gt;
the ant, an introduction
</pre></div><p>To generate code on the fly, you can use the class shown in the
following example. Use the <b>write</b> method to add statements,
and <b>indent</b> and <b>dedent</b> to add structure, and this
class takes care of the rest.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: A simple code
generator tool</b>
<pre class="wide">
# File: <a href="builtin/builtin-compile-example-3.py">builtin-compile-example-3.py</a>

import sys, string

class CodeGeneratorBackend:
    "Simple code generator for Python"

    def begin(self, tab="\t"):
        self.code = []
        self.tab = tab
        self.level = 0

    def end(self):
        self.code.append("") # make sure there's a newline at the end
        return compile(string.join(self.code, "\n"), "&lt;code&gt;", "exec")

    def write(self, string):
        self.code.append(self.tab * self.level + string)

    def indent(self):
        self.level += 1
        # in Python 1.5.2 and earlier, use this instead:
        # self.level = self.level + 1

    def dedent(self):
        if self.level == 0:
            raise SyntaxError, "internal error in code generator"
        self.level -= 1
        # in Python 1.5.2 and earlier, use this instead:
        # self.level = self.level - 1

#
# try it out!

c = CodeGeneratorBackend()
c.begin()
c.write("for i in range(5):")
c.indent()
c.write("print 'code generation made easy!'")
c.dedent()
exec c.end()

</pre><pre class="computeroutput wide" moreinfo="NONE">
code generation made easy!
code generation made easy!
code generation made easy!
code generation made easy!
code generation made easy!
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>Python also provides a function called <b>execfile</b>. It&#8217;s
simply a shortcut for loading code from a file, compiling it, and
executing it. The following example shows how to use and emulate
this function.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the execfile
function</b>
<pre class="wide">
# File: <a href="builtin/builtin-execfile-example-1.py">builtin-execfile-example-1.py</a>

execfile("hello.py")

def EXECFILE(filename, locals=None, globals=None):
    exec compile(open(filename).read(), filename, "exec") in locals, globals

EXECFILE("hello.py")

</pre><pre class="computeroutput wide" moreinfo="NONE">
hello again, and welcome to the show
hello again, and welcome to the show
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>The <b>hello.py</b> file used in this example has the
following contents:</p><div class="example">
<b style="example">Example: The hello.py
script</b>
<pre>
# File: <a href="builtin/hello.py">hello.py</a>

print "hello again, and welcome to the show"
</pre></div><h3 style="sect2">Overloading functions from the __builtin__
module</h3><p>Since Python looks among the built-in functions <i>after</i> it
has checked the local and module namespace, there may be situations
when you need to explicitly refer to the <b>__builtin__</b>
module. For example, the following script overloads the
<b>open</b> function with a version that opens an ordinary file
and checks that it starts with a &#8220;magic&#8221; string. To be able to use
the original <b>open</b> function, it explicitly refers to it
using the module name.</p><div class="example">
<b style="example">Example: Explicitly
accessing functions in the __builtin__ module</b>
<pre>
# File: <a href="builtin/builtin-open-example-1.py">builtin-open-example-1.py</a>

def open(filename, mode="rb"):
    import __builtin__
    file = __builtin__.open(filename, mode)
    if file.read(5) not in("GIF87", "GIF89"):
        raise IOError, "not a GIF file"
    file.seek(0)
    return file

fp = open("samples/sample.gif")
print len(fp.read()), "bytes"

fp = open("samples/sample.jpg")
print len(fp.read()), "bytes"

</pre><pre class="computeroutput" moreinfo="NONE">
3565 bytes
Traceback (innermost last):
  File "builtin-open-example-1.py", line 12, in ?
  File "builtin-open-example-1.py", line 5, in open
IOError: not a GIF file
</pre></div></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><ul><li><a href="#apply">Calling a function with arguments from a tuple or
dictionary</a></li><li><a href="#import">Loading and reloading modules</a></li><li><a href="#dir">Looking in namespaces</a></li><li><a href="#type">Checking an object&#8217;s type</a></li><li><a href="#eval">Evaluating Python expressions</a></li><li><a href="#exec">Compiling and executing code</a></li></ul></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
