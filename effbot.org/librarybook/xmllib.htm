<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The xmllib&nbsp;module</title></head><body data-page-id="724"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The xmllib&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>This module provides a simple XML parser, using regular
expressions to pull the XML data apart. The parser does basic
checks on the document, such as checking that there is only one
top-level element, and checking that all tags are balanced.</p><p>You feed XML data to this parser piece by piece (as data arrives
over a network, for example). The parser calls methods in itself
for start tags, data sections, end tags, and entities, among other
things.</p><p>If you&#8217;re only interested in a few tags, you can define special
<b>start_tag</b> and <b>end_tag</b> methods, where <b>tag</b>
is the tag name. The <b>start</b> functions are called with the
attributes given as a dictionary.</p><div class="example">
<b style="example">Example: Using the xmllib
module to extract information from an element</b>
<pre>
# File: <a href="xmllib/xmllib-example-1.py">xmllib-example-1.py</a>

import xmllib

class Parser(xmllib.XMLParser):
    # <i>get quotation number</i>

    def __init__(self, file=None):
        xmllib.XMLParser.__init__(self)
        if file:
            self.load(file)

    def load(self, file):
        while 1:
            s = file.read(512)
            if not s:
                break
            self.feed(s)
        self.close()

    def start_quotation(self, attrs):
        print "id =&gt;", attrs.get("id")
        raise EOFError

try:
    c = Parser()
    c.load(open("samples/sample.xml"))
except EOFError:
    pass

</pre><pre class="computeroutput" moreinfo="NONE">
$ python xmllib-example-1.py
id =&gt; 031
</pre></div><p>The second example contains a simple (and incomplete) rendering
engine. The parser maintains an element stack (<b>__tags</b>),
which it passes to the renderer, together with text fragments. The
renderer looks the current tag hierarchy up in a style dictionary,
and if it isn&#8217;t already there, it creates a new style descriptor by
combining bits and pieces from the style sheet.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the xmllib
module to render XML</b>
<pre class="wide">
# File: <a href="xmllib/xmllib-example-2.py">xmllib-example-2.py</a>

import xmllib
import string, sys

STYLESHEET = {
    # each element can contribute one or more style elements
    "quotation": {"style": "italic"},
    "lang": {"weight": "bold"},
    "name": {"weight": "medium"},
}

class Parser(xmllib.XMLParser):
    # a simple styling engine

    def __init__(self, renderer):
        xmllib.XMLParser.__init__(self)
        self.__data = []
        self.__tags = []
        self.__renderer = renderer

    def load(self, file):
        while 1:
            s = file.read(8192)
            if not s:
                break
            self.feed(s)
        self.close()

    def handle_data(self, data):
        self.__data.append(data)

    def unknown_starttag(self, tag, attrs):
        if self.__data:
            text = string.join(self.__data, "")
            self.__renderer.text(self.__tags, text)
        self.__tags.append(tag)
        self.__data = []

    def unknown_endtag(self, tag):
        self.__tags.pop()
        if self.__data:
            text = string.join(self.__data, "")
            self.__renderer.text(self.__tags, text)
        self.__data = []

class DumbRenderer:

    def __init__(self):
        self.cache = {}

    def text(self, tags, text):
        # render text in the style given by the tag stack
        tags = tuple(tags)
        style = self.cache.get(tags)
        if style is None:
            # figure out a combined style
            style = {}
            for tag in tags:
                s = STYLESHEET.get(tag)
                if s:
                    style.update(s)
            self.cache[tags] = style # update cache
        # write to standard output
        sys.stdout.write("%s =&gt;\n" % style)
        sys.stdout.write("  " + repr(text) + "\n")

#
# try it out

r = DumbRenderer()
c = Parser(r)
c.load(open("samples/sample.xml"))

</pre><pre class="computeroutput wide" moreinfo="NONE">
$ python xmllib-example-2.py
{'style': 'italic'} =&gt;
  'I\'ve had a lot of developers come up to me and\012say,
  "I haven\'t had this much fun in a long time. It sure
  beats\012writing '
{'style': 'italic', 'weight': 'bold'} =&gt;
  'Cobol'
{'style': 'italic'} =&gt;
  '" -- '
{'style': 'italic', 'weight': 'medium'} =&gt;
  'James Gosling'
{'style': 'italic'} =&gt;
  ', on\012'
{'weight': 'bold'} =&gt;
  'Java'
{'style': 'italic'} =&gt;
  '.'
</pre></div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
