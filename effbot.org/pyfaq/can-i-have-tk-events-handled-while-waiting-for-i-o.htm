<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Can I have Tk events handled while waiting for&nbsp;I/O?</title></head><body data-page-id="739"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Can I have Tk events handled while waiting for&nbsp;I/O?</h1></div><div class="yui-ge"><div class="yui-u first"><p>Yes, and you don&#8217;t even need threads! But you&#8217;ll have to restructure your I/O code a bit. Tk has the equivalent of Xt&#8217;s XtAddInput() call, which allows you to register a callback function which will be called from the Tk mainloop when I/O is possible on a file descriptor. Here&#8217;s what you need:</p><pre class="python"><span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> tkinter
tkinter.createfilehandler(file, mask, callback)</pre><p>The file may be a Python file or socket object (actually, anything with a fileno() method), or an integer file descriptor. The mask is one of the constants tkinter.READABLE or tkinter.WRITABLE. The callback is called as follows:</p><pre class="python">callback(file, mask)</pre><p>You must unregister the callback when you&#8217;re done, using</p><pre class="python">tkinter.deletefilehandler(file)</pre><p>Note: since you don&#8217;t know <em>how many bytes</em> are available for reading, you can&#8217;t use the Python file object&#8217;s read or readline methods, since these will insist on reading a predefined number of bytes. For sockets, the recv() or recvfrom() methods will work fine; for other files, use os.read(file.fileno(), maxbytecount).</p><p>CATEGORY: gui</p><p>CATEGORY: tkinter</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
