<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Asyncore and&nbsp;Generators</title></head><body data-page-id="9"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Asyncore and&nbsp;Generators</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">November 30, 2001 | Fredrik Lundh</p><p>I&#8217;ve been playing with <b>asyncore</b> and 2.2&#8217;s new generator model.  Here&#8217;s the idea:</p><blockquote>
Instead of passing events to callbacks, pass information to a single <b>handle</b> function
(a generator) via instance attributes. When the handler needs more data from the network, use
<b>yield</b> to pass control back to the asyncore dispatcher.
</blockquote><p>Does it work?  You bet.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pykeyword">from</span> YieldAsyncore <span class="pykeyword">import</span> *

<span class="pykeyword">class</span> <span class="pyclass">httpClient</span>(YieldDispatcherWithSend):

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, host, port, path):
        self.host = host
        self.path = path
        YieldDispatcherWithSend.__init__(self, host, port)

    <span class="pykeyword">def</span> <span class="pyfunction">handle</span>(self):

        <span class="pycomment"># send request</span>
        self.send(
            <span class="pystring">"GET %s HTTP/1.0\r\nHost: %s\r\n\r\n"</span> % (self.path, self.host)
            )
        <span class="pykeyword">yield</span> OK

        <span class="pycomment"># look for response header</span>
        <span class="pykeyword">while</span> self.data:
            <span class="pykeyword">try</span>:
                i = string.index(self.data, <span class="pystring">"\r\n\r\n"</span>)
            <span class="pykeyword">except</span> ValueError:
                <span class="pykeyword">yield</span> MORE <span class="pycomment"># need more data</span>
            <span class="pykeyword">else</span>:
                <span class="pykeyword">print</span> self, repr(self.data[:i])
                self.data = self.data[i+4:]
                <span class="pykeyword">if</span> <span class="pykeyword">not</span> self.data:
                    <span class="pykeyword">yield</span> OK
                <span class="pykeyword">break</span>

        <span class="pycomment"># process response body</span>
        <span class="pykeyword">while</span> self.data:
            <span class="pykeyword">print</span> self, len(self.data)
            <span class="pykeyword">yield</span> OK

        <span class="pykeyword">print</span> self, <span class="pystring">"done"</span></pre></div><div class="yui-ge"><div class="yui-u first"><p>It&#8217;s not co-routines, but it&#8217;s pretty damn close!</p><p>(In case it&#8217;s not obvious, the trick here is that you can create any number
of <b>httpClient</b> instances, and let them all run in parallel.)</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
