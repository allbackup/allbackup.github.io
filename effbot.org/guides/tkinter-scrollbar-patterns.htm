<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Tkinter Scrollbar&nbsp;Patterns</title> <script type="text/javascript">effbot_page_id=317;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles
 (including this one) 
now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Tkinter Scrollbar&nbsp;Patterns</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p class="info">September 20, 2003 | Fredrik Lundh</p><p>Tkinter provides a number of scrollable widgets, but unlike many
other toolkits, the widgets do not maintain their own scrollbars.  To
add a scrollbar to a scrollable widget, you have to create separate <a href="/tag/Tkinter.Scrollbar"><b>Scrollbar</b></a> widget instances,
and attach them to the widget.  This article explains how the scrollbar
interface works, and shows you how to add scrollbars to standard
widgets.</p><h2 id="the-scrollbar-interface">The Scrollbar Interface&#160;<a class="nav" href="#the-scrollbar-interface" title="bookmark!">#</a></h2><p>In Tkinter, the scrollbar is a separate widget that can be attached
to any widget that support the standard scrollbar interface.  Such
widgets include:</p><ul><li>the <a href="/tag/Tkinter.Listbox"><b>Listbox</b></a> widget.</li><li>the <a href="/tag/Tkinter.Text"><b>Text</b></a> widget.</li><li>the <a href="/tag/Tkinter.Canvas"><b>Canvas</b></a> widget</li><li>the <a href="/tag/Tkinter.Entry"><b>Entry</b></a> widget</li></ul><p>To attach a scrollbar to a scrolled widget, set the scrollbar&#8217;s
<b>command</b> option to point to a method that will be called when
the scrollbar is changed, and set the widget&#8217;s scroll command option
to the scrollbar&#8217;s <b>set</b> method.  This method is called by the
widget when when the view is changed (for example, when new items are
added, or the widget is resized).</p><p>In standard Tkinter, these methods and options have standard names;
the scrollbar should call the widget&#8217;s <b>xview</b> or <b>yview</b>
method when the scrollbar is changed, and the widgets provide
<b>xscrollcommand</b> and <b>yscrollcommand</b> command options that
are called when the scrollbar needs to be updated.</p><p>In the following example, a listbox containing 100 integers is
equipped with a scrollbar:</p><div class="example">
<b>Example: A listbox with a scrollbar</b>
<pre class="python">
<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> *

root = Tk()

scrollbar = Scrollbar(root)
scrollbar.pack(side=RIGHT, fill=Y)

listbox = Listbox(root)
listbox.pack()

<span class="pykeyword">for</span> i <span class="pykeyword">in</span> range(100):
    listbox.insert(END, i)

<span class="pycomment"># attach listbox to scrollbar</span>
listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=listbox.yview)

mainloop()</pre></div><blockquote>
<img alt="" height="193" src="/media/cache/15500761596e9c1e62496afdd860550f.png" width="152" />
</blockquote><p>To watch the traffic between the listbox and the scrollbar, you can
replace the <b>Scrollbar</b> and <b>Listbox</b> classes with versions
that log the relevant method calls:</p><pre class="python">
<span class="pykeyword">class</span> <span class="pyclass">DebugScrollbar</span>(Scrollbar):
    <span class="pykeyword">def</span> <span class="pyfunction">set</span>(self, *args):
        <span class="pykeyword">print</span> <span class="pystring">"SCROLLBAR SET"</span>, args
        Scrollbar.set(self, *args)

<span class="pykeyword">class</span> <span class="pyclass">DebugListbox</span>(Listbox):
    <span class="pykeyword">def</span> <span class="pyfunction">yview</span>(self, *args):
        <span class="pykeyword">print</span> <span class="pystring">"LISTBOX YVIEW"</span>, args
        Listbox.yview(self, *args)

scrollbar = DebugScrollbar()
scrollbar.pack(side=RIGHT, fill=Y)

listbox = DebugListbox(yscrollcommand=scrollbar.set)
listbox.pack()

scrollbar.config(command=listbox.yview)</pre><p>When you run the example using these widgets, you&#8217;ll get a stream
of SCROLLBAR and LISTBOX messages in the console window.</p><p>When the listbox is first displayed, the listbox calls the
scrollbar to inform it about the current view (in this example, 10 out
of 100 lines are displayed).  The scrollbar calls back, telling the
listbox that the scrollbar is in its topmost position:</p><pre>
SCROLLBAR SET ('0', '0.1')
LISTBOX YVIEW ('moveto', '0')
</pre><p>Note that all arguments are strings, and that the values are
normalized to fit in the 0.0 to 1.0 range.</p><p>When you move the scrollbar thumb, the scrollbar sends
<b>moveto</b> messages to the listbox.  The listbox updates the view,
and calls the scrollbar&#8217;s <b>set</b> method with the resulting
values:</p><pre>
LISTBOX YVIEW ('moveto', '0.1041')
SCROLLBAR SET ('0.1', '0.2')
L