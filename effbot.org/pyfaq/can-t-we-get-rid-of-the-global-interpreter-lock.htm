<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Can't we get rid of the Global Interpreter&nbsp;Lock?</title></head><body data-page-id="741"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Can't we get rid of the Global Interpreter&nbsp;Lock?</h1></div><div class="yui-ge"><div class="yui-u first"><p>The CPython implementation&#8217;s
<a href="what-is-the-global-interpreter-lock">Global Interpreter Lock</a> (GIL) is often seen as a hindrance to Python&#8217;s deployment on high-end multiprocessor server machines, because a multi-threaded Python program effectively only uses one CPU, due to the insistence that (almost) all Python code can only run while the GIL is held.</p><p>Back in the days of Python 1.5, Greg Stein actually implemented a comprehensive patch set (the &#8220;free threading&#8221; patches) that removed the GIL and replaced it with fine-grained locking. Unfortunately, even on Windows (where locks are very efficient) this ran ordinary Python code about twice as slow as the interpreter using the GIL. On Linux the performance loss was even worse because pthread locks aren&#8217;t as efficient.</p><p>Since then, the idea of getting rid of the GIL has occasionally come up but nobody has found a way to deal with the expected slowdown, and users who don&#8217;t use threads would not be happy if their code ran at half at the speed. Greg&#8217;s free threading patch set has not been kept up-to-date for later Python versions.</p><p>This doesn&#8217;t mean that you can&#8217;t make good use of Python on multi-CPU machines! You just have to be creative with dividing the work up between multiple <em>processes</em> rather than multiple <em>threads</em>. Judicious use of C extensions will also help; if you use a C extension to perform a time-consuming task, the extension can release the GIL while the thread of execution is in the C code and allow other threads to get some work done.</p><p>It has been suggested that the GIL should be a per-interpreter-state lock rather than truly global; interpreters then wouldn&#8217;t be able to share objects. Unfortunately, this isn&#8217;t likely to happen either. It would be a tremendous amount of work, because many object implementations currently have global state. For example, small integers and short strings are cached; these caches would have to be moved to the interpreter state. Other object types have their own free list; these free lists would have to be moved to the interpreter state. And so on.</p><p>And I doubt that it can even be done in finite time, because the same problem exists for 3rd party extensions. It is likely that 3rd party extensions are being written at a faster rate than you can convert them to store all their global state in the interpreter state.</p><p>And finally, once you have multiple interpreters not sharing any state, what have you gained over running each interpreter in a separate process?</p><p>CATEGORY: cpython</p><p>CATEGORY: design</p><p>CATEGORY: library</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
