<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The asyncore&nbsp;module</title></head><body data-page-id="469"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The asyncore&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>This module provides a <span>&#8220;reactive&#8221;</span> socket
implementation. Instead of creating socket objects, and calling
methods on them to do things, this module lets you write code that
is called when something can be done. To implement an asynchronous
socket handler, subclass the <b>dispatcher</b> class, and
override one or more of the following methods:</p><ul><li><p><b>writable</b> is called by the asyncore framework to check if the dispatcher has data to send.  The default implementation always returns True.</p></li><li><p><b>readable</b> is called to check if the dispatcher is ready
to process incoming data, if any.  The default implementation always
returns True.</p></li><li><p><b>handle_connect</b> is called when a connection is
successfully established.</p></li><li><p><b>handle_expt</b> is called when a connection fails (Windows),
or when out-of-band data arrives (Unix).</p></li><li><p><b>handle_accept</b> is called when a connection request is
made to a listening socket. The callback should call the
<b>accept</b> method to get the client socket.  In most cases, the
callback should create another socket handler to handle the actual
communication.</p></li><li><p><b>handle_read</b> is called when there is data waiting to be
read from the socket.  The callback should call the <b>recv</b>
method to get the data.</p></li><li><p><b>handle_write</b> is called when data can be written to the
socket. Use the <b>send</b> method to write data.</p></li><li><p><b>handle_close</b> is called when the socket is closed or
reset.</p></li><li><p><b>handle_error(type, value, traceback)</b> is called if a
Python error occurs in any of the other callbacks. The default
implementation prints an abbreviated traceback to
<b>sys.stdout</b>.</p></li></ul><p>The first example shows a time client, similar to the one for
the <b>socket</b> module:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the asyncore
module to get the time from a time server</b>
<pre class="wide">
# File: <a href="asyncore/asyncore-example-1.py">asyncore-example-1.py</a>

import asyncore
import socket, time

# reference time (in seconds since 1900-01-01 00:00:00)
TIME1970 = 2208988800L # 1970-01-01 00:00:00

class TimeRequest(asyncore.dispatcher):
    # time requestor (as defined in RFC 868)

    def __init__(self, host, port=37):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, port))

    def writable(self):
        return 0 # don't have anything to write

    def handle_connect(self):
        pass # connection succeeded

    def handle_expt(self):
        self.close() # connection failed, shutdown

    def handle_read(self):
        # get local time
        here = int(time.time()) + TIME1970

        # get and unpack server time
        s = self.recv(4)
        there = ord(s[3]) + (ord(s[2])&lt;&lt;8) + (ord(s[1])&lt;&lt;16) + (ord(s[0])&lt;&lt;24L)

        self.adjust_time(int(here - there))

        self.handle_close() # we don't expect more data

    def handle_close(self):
        self.close()

    def adjust_time(self, delta):
        # override this method!
        print "time difference is", delta

#
# try it out

request = TimeRequest("www.python.org")

asyncore.loop()

</pre><pre class="computeroutput wide" moreinfo="NONE">
log: adding channel &lt;TimeRequest  at 8cbe90&gt;
time difference is 28
log: closing channel 192:&lt;TimeRequest connected at 8cbe90&gt;
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>If you don&#8217;t want the log messages, override the <b>log</b>
method in your <b>dispatcher</b> subclass.</p><p>Here&#8217;s the corresponding time server. Note that it uses two
<b>dispatcher</b> subclasses, one for the listening socket, and
one for the client channel.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the asyncore
module to implement a time server</b>
<pre class="wide">
# File: <a href="asyncore/asyncore-example-2.py">asyncore-example-2.py</a>

import asyncore
import socket, time

# reference time
TIME1970 = 2208988800L

class TimeChannel(asyncore.dispatcher):

    def handle_write(self):
        t = int(time.time()) + TIME1970
        t = chr(t&gt;&gt;24&amp;255) + chr(t&gt;&gt;16&amp;255) + chr(t&gt;&gt;8&amp;255) + chr(t&amp;255)
        self.send(t)
        self.close()

class TimeServer(asyncore.dispatcher):

    def __init__(self, port=37):
        asyncore.dispatcher.__init__(self)
        self.port = port
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.bind(("", port))
        self.listen(5)
        print "listening on port", self.port

    def handle_accept(self):
        channel, addr = self.accept()
        TimeChannel(channel)

server = TimeServer(8037)
asyncore.loop()

</pre><pre class="computeroutput wide" moreinfo="NONE">
log: adding channel &lt;TimeServer  at 8cb940&gt;
listening on port 8037
log: adding channel &lt;TimeChannel  at 8b2fd0&gt;
log: closing channel 52:&lt;TimeChannel connected at 8b2fd0&gt;
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>In addition to the plain <b>dispatcher</b>, this module also
includes a <b>dispatcher_with_send</b> class. This class allows
you send larger amounts of data, without clogging up the network
transport buffers.</p><p>The following module defines an <b>AsyncHTTP</b> class based
on the <b>dispatcher_with_send</b> class. When you create an
instance of this class, it issues an HTTP GET request, and sends
the incoming data to a <span>&#8220;consumer&#8221;</span> target object.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the asyncore
module to do HTTP requests</b>
<pre class="wide">
# File: <a href="asyncore/SimpleAsyncHTTP.py">SimpleAsyncHTTP.py</a>

import asyncore
import string, socket
import StringIO
import mimetools, urlparse

class AsyncHTTP(asyncore.dispatcher_with_send):
    # HTTP requestor

    def __init__(self, uri, consumer):
        asyncore.dispatcher_with_send.__init__(self)

        self.uri = uri
        self.consumer = consumer

        # turn the uri into a valid request
        scheme, host, path, params, query, fragment = urlparse.urlparse(uri)
        assert scheme == "http", "only supports HTTP requests"
        try:
            host, port = string.split(host, ":", 1)
            port = int(port)
        except (TypeError, ValueError):
            port = 80 # default port
        if not path:
            path = "/"
        if params:
            path = path + ";" + params
        if query:
            path = path + "?" + query

        self.request = "GET %s HTTP/1.0\r\nHost: %s\r\n\r\n" % (path, host)

        self.host = host
        self.port = port

        self.status = None
        self.header = None

        self.data = ""

        # get things going!
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, port))

    def handle_connect(self):
        # connection succeeded
        self.send(self.request)

    def handle_expt(self):
        # connection failed; notify consumer (status is None)
        self.close()
        try:
            http_header = self.consumer.http_header
        except AttributeError:
            pass
        else:
            http_header(self)

    def handle_read(self):
        data = self.recv(2048)
        if not self.header:
            self.data = self.data + data
            try:
                i = string.index(self.data, "\r\n\r\n")
            except ValueError:
                return # continue
            else:
                # parse header
                fp = StringIO.StringIO(self.data[:i+4])
                # status line is "HTTP/version status message"
                status = fp.readline()
                self.status = string.split(status, " ", 2)
                # followed by a rfc822-style message header
                self.header = mimetools.Message(fp)
                # followed by a newline, and the payload (if any)
                data = self.data[i+4:]
                self.data = ""
                # notify consumer (status is non-zero)
                try:
                    http_header = self.consumer.http_header
                except AttributeError:
                    pass
                else:
                    http_header(self)
                if not self.connected:
                    return # channel was closed by consumer

        self.consumer.feed(data)

    def handle_close(self):
        self.consumer.close()
        self.close()
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>And here&#8217;s a simple script using that class:</p><div class="example">
<b style="example">Example: Using the
SimpleAsyncHTTP class</b>
<pre>
# File: <a href="asyncore/asyncore-example-3.py">asyncore-example-3.py</a>

import SimpleAsyncHTTP
import asyncore

class DummyConsumer:
    size = 0

    def http_header(self, request):
        # handle header
        if request.status is None:
            print "connection failed"
        else:
            print "status", "=&gt;", request.status
            for key, value in request.header.items():
                print key, "=", value

    def feed(self, data):
        # handle incoming data
        self.size = self.size + len(data)

    def close(self):
        # end of data
        print self.size, "bytes in body"

#
# try it out

consumer = DummyConsumer()

request = SimpleAsyncHTTP.AsyncHTTP(
    "http://www.pythonware.com",
    consumer
    )

asyncore.loop()

</pre><pre class="computeroutput" moreinfo="NONE">
log: adding channel &lt;AsyncHTTP  at 8e2850&gt;
status =&gt; ['HTTP/1.1', '200', 'OK\015\012']
server = Apache/Unix (Unix)
content-type = text/html
content-length = 3730
...
3730 bytes in body
log: closing channel 156:&lt;AsyncHTTP connected at 8e2850&gt;
</pre></div><p>Note that the consumer interface is designed to be compatible
with the <b>htmllib</b> and <b>xmllib</b> parsers. This allows
you to parse HTML or XML data on the fly. Note that the
<b>http_header</b> method is optional; if it isn&#8217;t defined, it&#8217;s
simply ignored.</p><p>A problem with the above example is that it doesn&#8217;t work for
redirected resources. The following example adds an extra consumer
layer, which handles the redirection:</p><div class="example">
<b style="example">Example: Using the
SimpleAsyncHTTP class with redirection</b>
<pre>
# File: <a href="asyncore/asyncore-example-4.py">asyncore-example-4.py</a>

import SimpleAsyncHTTP
import asyncore

class DummyConsumer:
    size = 0

    def http_header(self, request):
        # handle header
        if request.status is None:
            print "connection failed"
        else:
            print "status", "=&gt;", request.status
            for key, value in request.header.items():
                print key, "=", value

    def feed(self, data):
        # handle incoming data
        self.size = self.size + len(data)

    def close(self):
        # end of data
        print self.size, "bytes in body"

class RedirectingConsumer:

    def __init__(self, consumer):
        self.consumer = consumer

    def http_header(self, request):
        # handle header
        if request.status is None or\
           request.status[1] not in ("301", "302"):
            try:
                http_header = self.consumer.http_header
            except AttributeError:
                pass
            else:
                return http_header(request)
        else:
            # redirect!
            uri = request.header["location"]
            print "redirecting to", uri, "..."
            request.close()
            SimpleAsyncHTTP.AsyncHTTP(uri, self)

    def feed(self, data):
        self.consumer.feed(data)

    def close(self):
        self.consumer.close()

#
# try it out

consumer = RedirectingConsumer(DummyConsumer())

request = SimpleAsyncHTTP.AsyncHTTP(
    "http://www.pythonware.com/library",
    consumer
    )

asyncore.loop()

</pre><pre class="computeroutput" moreinfo="NONE">
log: adding channel &lt;AsyncHTTP  at 8e64b0&gt;
redirecting to http://www.pythonware.com/library/ ...
log: closing channel 48:&lt;AsyncHTTP connected at 8e64b0&gt;
log: adding channel &lt;AsyncHTTP  at 8ea790&gt;
status =&gt; ['HTTP/1.1', '200', 'OK\015\012']
server = Apache/Unix (Unix)
content-type = text/html
content-length = 387
...
387 bytes in body
log: closing channel 236:&lt;AsyncHTTP connected at 8ea790&gt;
</pre></div><p>If the server returns status 301 (permanent redirection) or 302
(temporary redirection), the redirecting consumer closes the
current request, and issues a new one for the new address. All
other calls to the consumer are delegated to the original
consumer.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
