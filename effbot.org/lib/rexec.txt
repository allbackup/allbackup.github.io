
@@module rexec

<h1>rexec&#8212;Restricted execution framework</h1>

<p>Changed in version 2.3: Disabled module.


<p class='warning'><b>Warning:</b> The documentation has been left in
place to help in reading old code that uses the module.

<p>This module contains the {@link RExec} class, which supports {@link
r_eval}, {@link r_execfile}, {@link r_exec}, and {@link r_import}
methods, which are restricted versions of the standard Python functions
{@link eval}, {@link execfile} and the {@link exec} and {@link import}
statements. Code executed in this restricted environment will only have
access to modules and functions that are deemed safe; you can subclass
{@link RExec} to add or remove capabilities as desired.


<p class='warning'><b>Warning:</b> While the {@link rexec} module is
designed to perform as described below, it does have a few known
vulnerabilities which could be exploited by carefully written code. Thus
it should not be relied upon in situations requiring &#8220;production
ready&#8221; security. In such situations, execution via sub-processes
or very careful &#8220;cleansing&#8221; of both code and data to be
processed may be necessary. Alternatively, help in patching known {@link
rexec} vulnerabilities would be welcomed.


<p class='note'><b>Note:</b> The {@link RExec} class can prevent code
from performing unsafe operations like reading or writing disk files, or
using TCP/IP sockets. However, it does not protect against code using
extremely large amounts of memory or processor time.

@@class RExec([hooks[, verbose]])

<p>Returns an instance of the {@link RExec} class.

<p>{@var hooks} is an instance of the {@link RHooks} class or a subclass
of it. If it is omitted or {@code None}, the default {@link RHooks}
class is instantiated. Whenever the {@link rexec} module searches for a
module (even a built-in one) or reads a module's code, it doesn't
actually go out to the file system itself. Rather, it calls methods of
an {@link RHooks} instance that was passed to or created by its
constructor. (Actually, the {@link RExec} object doesn't make these
calls -- they are made by a module loader object that's part of the
{@link RExec} object. This allows another level of flexibility, which
can be useful when changing the mechanics of {@link import} within the
restricted environment.)

<p>By providing an alternate {@link RHooks} object, we can control the
file system accesses made to import a module, without changing the
actual algorithm that controls the order in which those accesses are
made. For instance, we could substitute an {@link RHooks} object that
passes all filesystem requests to a file server elsewhere, via some RPC
mechanism such as ILU. Grail's applet loader uses this to support
importing applets from a URL for a directory.

<p>If {@var verbose} is true, additional debugging output may be sent to
standard output.

@@text 

<p>It is important to be aware that code running in a restricted
environment can still call the {@link sys.exit} function. To disallow
restricted code from exiting the interpreter, always protect calls that
cause restricted code to run with a {@link try}/{@link except} statement
that catches the {@link exceptions.SystemExit} exception. Removing the
{@link sys.exit} function from the restricted environment is not
sufficient -- the restricted code could still use {@code raise
SystemExit}. Removing {@link exceptions.SystemExit} is not a reasonable
option; some library code makes use of this and would break were it not
available.

@see 
{@link http://grail.sourceforge.net/ Grail Home Page}

Grail is a Web browser written entirely in Python. It uses the rexec
module as a foundation for supporting Python applets, and can be used as
an example usage of this module.

<h2>RExec Objects</h2>

<p>{@link RExec} instances support the following methods:

@@method RExec.r_eval(code)

<p>{@var code} must either be a string containing a Python expression,
or a compiled code object, which will be evaluated in the restricted
environment's {@link __main__} module. The value of the expression or
code object will be returned.

@@method RExec.r_exec(code)

<p>{@var code} must either be a string containing one or more lines of
Python code, or a compiled code object, which will be executed in the
restricted environment's {@link __main__} module.

@@method RExec.r_execfile(filename)

<p>Execute the Python code contained in the file {@var filename} in the
restricted environment's {@link __main__} module.

@@text 

<p>Methods whose names begin with "{@code s_}" are similar to the
functions beginning with "{@code r_}", but the code will be granted
access to restricted versions of the standard I/O streams {@code
sys.stdin}, {@code sys.stderr}, and {@code sys.stdout}.

@@method RExec.s_eval(code)

<p>{@var code} must be a string containing a Python expression, which
will be evaluated in the restricted environment.

@@method RExec.s_exec(code)

<p>{@var code} must be a string containing one or more lines of Python
code, which will be executed in the restricted environment.

@@method RExec.s_execfile(code)

<p>Execute the Python code contained in the file {@var filename} in the
restricted environment.

@@text 

<p>{@link RExec} objects must also support various methods which will be
implicitly called by code executing in the restricted environment.
Overriding these methods in a subclass is used to change the policies
enforced by a restricted environment.

@@method RExec.r_import(modulename[, globals[, locals[, fromlist]]])

<p>Import the module {@var modulename}, raising an {@link
exceptions.ImportError} exception if the module is considered unsafe.

@@method RExec.r_open(filename[, mode[, bufsize]])

<p>Method called when {@link open} is called in the restricted
environment. The arguments are identical to those of {@link open}, and a
file object (or a class instance compatible with file objects) should be
returned. {@link RExec}'s default behaviour is allow opening any file
for reading, but forbidding any attempt to write a file. See the example
below for an implementation of a less restrictive {@link r_open}.

@@method RExec.r_reload(module)

<p>Reload the module object {@var module}, re-parsing and
re-initializing it.

@@method RExec.r_unload(module)

<p>Unload the module object {@var module} (remove it from the restricted
environment's {@code sys.modules} dictionary).

@@text 

<p>And their equivalents with access to restricted standard I/O streams:

@@method RExec.s_import(modulename[, globals[, locals[, fromlist]]])

<p>Import the module {@var modulename}, raising an {@link
exceptions.ImportError} exception if the module is considered unsafe.

@@method RExec.s_reload(module)

<p>Reload the module object {@var module}, re-parsing and
re-initializing it.

@@method RExec.s_unload(module)

<p>Unload the module object {@var module}.

@@text 

<h2>Defining restricted environments</h2>

<p>The {@link RExec} class has the following class attributes, which are
used by the {@link __init__} method. Changing them on an existing
instance won't have any effect; instead, create a subclass of {@link
RExec} and assign them new values in the class definition. Instances of
the new class will then use those new values. All these attributes are
tuples of strings.

@@attribute RExec.nok_builtin_names

<p>Contains the names of built-in functions which will {@em not} be
available to programs running in the restricted environment. The value
for {@link RExec} is {@code ('open', 'reload', '__import__')}. (This
gives the exceptions, because by far the majority of built-in functions
are harmless. A subclass that wants to override this variable should
probably start with the value from the base class and concatenate
additional forbidden functions -- when new dangerous built-in functions
are added to Python, they will also be added to this module.)

@@attribute RExec.ok_builtin_modules

<p>Contains the names of built-in modules which can be safely imported.
The value for {@link RExec} is {@code ('audioop', 'array', 'binascii',
'cmath', 'errno', 'imageop', 'marshal', 'math', 'md5', 'operator',
'parser', 'regex', 'select', 'sha', '_sre', 'strop', 'struct', 'time')}.
A similar remark about overriding this variable applies -- use the value
from the base class as a starting point.

@@attribute RExec.ok_path

<p>Contains the directories which will be searched when an {@link
import} is performed in the restricted environment. The value for {@link
RExec} is the same as {@code sys.path} (at the time the module is
loaded) for unrestricted code.

@@attribute RExec.ok_posix_names

<p>Contains the names of the functions in the {@link }{@link os} module
which will be available to programs running in the restricted
environment. The value for {@link RExec} is {@code ('error', 'fstat',
'listdir', 'lstat', 'readlink', 'stat', 'times', 'uname', 'getpid',
'getppid', 'getcwd', 'getuid', 'getgid', 'geteuid', 'getegid')}.

@@attribute RExec.ok_sys_names

<p>Contains the names of the functions and variables in the {@link sys}
module which will be available to programs running in the restricted
environment. The value for {@link RExec} is {@code ('ps1', 'ps2',
'copyright', 'version', 'platform', 'exit', 'maxint')}.

@@attribute RExec.ok_file_types

<p>Contains the file types from which modules are allowed to be loaded.
Each file type is an integer constant defined in the {@link imp} module.
The meaningful values are {@code PY_SOURCE}, {@code PY_COMPILED}, and
{@code C_EXTENSION}. The value for {@link RExec} is {@code (C_EXTENSION,
PY_SOURCE)}. Adding {@code PY_COMPILED} in subclasses is not
recommended; an attacker could exit the restricted execution mode by
putting a forged byte-compiled file (.pyc) anywhere in your file system,
for example by writing it to /tmp or uploading it to the /incoming
directory of your public FTP server.

@@text 

<h2>An example</h2>

<p>Let us say that we want a slightly more relaxed policy than the
standard {@link RExec} class. For example, if we're willing to allow
files in /tmp to be written, we can subclass the {@link RExec} class:

<pre>
class TmpWriterRExec(rexec.RExec):
    def r_open(self, file, mode='r', buf=-1):
        if mode in ('r', 'rb'):
            pass
        elif mode in ('w', 'wb', 'a', 'ab'):
            # check filename : must begin with /tmp/
            if file[:5]!='/tmp/': 
                raise IOError, "can't write outside /tmp"
            elif (string.find(file, '/../') &gt;= 0 or
                 file[:3] == '../' or file[-3:] == '/..'):
                raise IOError, "'..' in filename forbidden"
        else: raise IOError, "Illegal open() mode"
        return open(file, mode, buf)
</pre>


<p>Notice that the above code will occasionally forbid a perfectly valid
filename; for example, code in the restricted environment won't be able
to open a file called /tmp/foo/../bar. To fix this, the {@link r_open}
method would have to simplify the filename to /tmp/bar, which would
require splitting apart the filename and performing various operations
on it. In cases where security is at stake, it may be preferable to
write simple code which is sometimes overly restrictive, instead of more
general code that is also more complex and may harbor a subtle security
hole.
