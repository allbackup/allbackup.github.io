<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The formatter&nbsp;module</title></head><body data-page-id="538"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The formatter&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>This module provides formatter classes that can be used together
with the <b><a href="htmllib.htm">htmllib</a></b> module.</p><p>This module provides two class families, <i>formatters</i> and
<i>writers</i>. The former convert a stream of tags and data
strings from the HTML parser into an event stream suitable for an
output device, and the latter renders that event stream on an
output device.</p><p>In most cases, you can use the <b>AbstractFormatter</b> class
to do the formatting. It calls methods on the writer object,
representing different kinds of formatting events. The
<b>AbstractWriter</b> class simply prints a message for each
method call.</p><div class="example">
<b style="example">Example: Using the
formatter module to convert HTML to an event stream</b>
<pre>
# File: <a href="formatter/formatter-example-1.py">formatter-example-1.py</a>

import formatter
import htmllib

w = formatter.AbstractWriter()
f = formatter.AbstractFormatter(w)

file = open("samples/sample.htm")

p = htmllib.HTMLParser(f)
p.feed(file.read())
p.close()

file.close()

</pre><pre class="computeroutput" moreinfo="NONE">
$ python formatter-example-1.py
send_paragraph(1)
new_font(('h1', 0, 1, 0))
send_flowing_data('A Chapter.')
send_line_break()
send_paragraph(1)
new_font(None)
send_flowing_data('Some text. Some more text. Some')
send_flowing_data(' ')
new_font((None, 1, None, None))
send_flowing_data('emphasised')
new_font(None)
send_flowing_data(' text. A')
send_flowing_data(' link')
send_flowing_data('[1]')
send_flowing_data('.')
</pre></div><p>In addition to the <b>AbstractWriter</b> class, the
<b>formatter</b> module provides an <b>NullWriter</b> class,
which ignores all events passed to it, and a <b>DumbWriter</b>
class that converts the event stream to a plain text document:</p><div class="example">
<b style="example">Example: Using the
formatter module convert HTML to plain text</b>
<pre>
# File: <a href="formatter/formatter-example-2.py">formatter-example-2.py</a>

import formatter
import htmllib

w = formatter.DumbWriter() # <i>plain text</i>
f = formatter.AbstractFormatter(w)

file = open("samples/sample.htm")

# <i>print html body as plain text</i>
p = htmllib.HTMLParser(f)
p.feed(file.read())
p.close()

file.close()

# <i>print links</i>
print
print
i = 1
for link in p.anchorlist:
    print i, "=&gt;", link
    i = i + 1

</pre><pre class="computeroutput" moreinfo="NONE">
$ python formatter-example-2.py

A Chapter.

Some text. Some more text. Some emphasised text. A link[1].

1 =&gt; http://www.python.org
</pre></div><p>The following example provides a custom <b>Writer</b>, which
in this case is subclassed from the <b>DumbWriter</b> class. This
version keeps track of the current font style, and tweaks the
output somewhat depending on the font.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the
formatter module with a custom writer</b>
<pre class="wide">
# File: <a href="formatter/formatter-example-3.py">formatter-example-3.py</a>

import formatter
import htmllib, string

class Writer(formatter.DumbWriter):

    def __init__(self):
        formatter.DumbWriter.__init__(self)
        self.tag = ""
        self.bold = self.italic = 0
        self.fonts = []

    def new_font(self, font):
        if font is None:
            font = self.fonts.pop()
            self.tag, self.bold, self.italic = font
        else:
            self.fonts.append((self.tag, self.bold, self.italic))
            tag, bold, italic, typewriter = font
            if tag is not None:
                self.tag = tag
            if bold is not None:
                self.bold = bold
            if italic is not None:
                self.italic = italic

    def send_flowing_data(self, data):
        if not data:
            return
        atbreak = self.atbreak or data[0] in string.whitespace
        for word in string.split(data):
            if atbreak:
                self.file.write(" ")
            if self.tag in ("h1", "h2", "h3"):
                word = string.upper(word)
            if self.bold:
                word = "*" + word + "*"
            if self.italic:
                word = "_" + word + "_"
            self.file.write(word)
            atbreak = 1
        self.atbreak = data[-1] in string.whitespace

w = Writer()
f = formatter.AbstractFormatter(w)

file = open("samples/sample.htm")

# <i>print html body as plain text</i>
p = htmllib.HTMLParser(f)
p.feed(file.read())
p.close()

</pre><pre class="computeroutput wide" moreinfo="NONE">
$ python formatter-example-3.py

_A_ _CHAPTER._

Some text. Some more text. Some *emphasised* text. A link[1].
</pre></div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
