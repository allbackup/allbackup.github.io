<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>What are the "best practices" for using import in a&nbsp;module?</title></head><body data-page-id="895"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">What are the "best practices" for using import in a&nbsp;module?</h1></div><div class="yui-ge"><div class="yui-u first"><p>In general, don&#8217;t use the <a href="/pyref/import.htm"><strong>from modulename import *</strong></a>
form of import.  Doing so clutters the importer&#8217;s namespace.  Some
people avoid this idiom even with modules like <a href="/pyref/Tkinter.htm"><strong>Tkinter</strong></a>
and <a href="/pyref/threading.htm"><strong>threading</strong></a> that are intentionally designed to be imported
in this manner.</p><p>Import modules at the top of a file.  Doing so makes it clear what
other modules your code requires and avoids questions of whether the
module name is in scope.  Using one <a href="/pyref/import.htm"><strong>import</strong></a> per line makes it
easy to add and delete module imports, but using multiple imports per
line uses less screen space.</p><p>It&#8217;s good practice if you import modules in the following order:</p><ol><li>standard library modules &#8212; e.g. <a href="/pyref/sys.htm"><strong>sys</strong></a>, <a href="/pyref/os.htm"><strong>os</strong></a>, <a href="/pyref/getopt.htm"><strong>getopt</strong></a>, <a href="/pyref/re.htm"><strong>re</strong></a>)</li><li>third-party library modules (anything installed in Python&#8217;s site-packages directory) &#8212; e.g. mx.DateTime, ZODB, PIL.Image, etc.</li><li>locally-developed modules</li></ol><p>Avoid relative package imports.  If you&#8217;re writing code that&#8217;s in the
package.sub.m1 module and want to import package.sub.m2, do not just
write import m2, even though it&#8217;s legal.  Write from package.sub import
m2 instead.  Relative imports can lead to a module being initialized
twice, leading to confusing bugs.</p><p>It is sometimes necessary to move imports to a function or class to
avoid problems with circular imports.  Gordon McMillan says:</p><blockquote><p>Circular imports are fine where both modules use the &#8220;import
  &lt;module&gt;&#8221; form of import. They fail when the 2nd module wants
  to grab a name out of the first (&#8220;from module import name&#8221;) and the
  import is at the top level. That&#8217;s because names in the 1st are not
  yet available, because the first module is busy importing the 2nd.</p></blockquote><p>In this case, if the second module is only used in one function, then
the import can easily be moved into that function.  By the time the
import is called, the first module will have finished initializing,
and the second module can do its import.</p><p>It may also be necessary to move imports out of the top level of code
if some of the modules are platform-specific.  In that case, it may not
even be possible to import all of the modules at the top of the
file.  In this case, importing the correct modules in the corresponding
platform-specific code is a good option.</p><p>Only move imports into a local scope, such as inside a function
definition, if it&#8217;s necessary to solve a problem such as avoiding a
circular import or are trying to reduce the initialization time of a
module.  This technique is especially helpful if many of the imports
are unnecessary depending on how the program executes.  You may also
want to move imports into a function if the modules are only ever used
in that function.  Note that loading a module the first time may be
expensive because of the one time initialization of the module, but
loading a module multiple times is virtually free, costing only a
couple of dictionary lookups.  Even if the module name has gone out of
scope, the module is probably available in <a href="/pyref/sys.modules.htm"><strong>sys.modules</strong></a>.</p><p>If only instances of a specific class use a module, then it is
reasonable to import the module in the class&#8217;s <a href="/pyref/__init__.htm"><strong>__init__</strong></a>
method and then assign the module to an instance variable so that the
module is always available (via that instance variable) during the
life of the object.  Note that to delay an import until the class is
instantiated, the import must be inside a method.  Putting the import
inside the class but outside of any method still causes the import to
occur when the module is initialized.</p><p>CATEGORY: programming</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
