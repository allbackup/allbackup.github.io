
@@module gc

<h1>gc&#8212;Garbage Collector interface</h1>

<p>This module provides an interface to the optional garbage collector.
It provides the ability to disable the collector, tune the collection
frequency, and set debugging options. It also provides access to
unreachable objects that the collector found but cannot free. Since the
collector supplements the reference counting already used in Python, you
can disable the collector if you are sure your program does not create
reference cycles. Automatic collection can be disabled by calling {@code
gc.disable()}. To debug a leaking program call {@code
gc.set_debug(gc.DEBUG_LEAK)}. Notice that this includes {@code
gc.DEBUG_SAVEALL}, causing garbage-collected objects to be saved in
gc.garbage for inspection.

<p>The {@link gc} module provides the following functions:

@@function enable()

<p>Enable automatic garbage collection.

@@function disable()

<p>Disable automatic garbage collection.

@@function isenabled()

<p>Returns true if automatic collection is enabled.

@@function collect()

<p>Run a full collection. All generations are examined and the number of
unreachable objects found is returned.

@@function set_debug(flags)

<p>Set the garbage collection debugging flags. Debugging information
will be written to {@code sys.stderr}. See below for a list of debugging
flags which can be combined using bit operations to control debugging.

@@function get_debug()

<p>Return the debugging flags currently set.

@@function get_objects()

<p>Returns a list of all objects tracked by the collector, excluding the
list returned.
<blockquote>
@since New in
version 2.2. <br />
</blockquote>

@@function set_threshold(threshold0[, threshold1[, threshold2]])

<p>Set the garbage collection thresholds (the collection frequency).
Setting {@var threshold0} to zero disables collection.

<p>The GC classifies objects into three generations depending on how
many collection sweeps they have survived. New objects are placed in the
youngest generation (generation {@code 0}). If an object survives a
collection it is moved into the next older generation. Since generation
{@code 2} is the oldest generation, objects in that generation remain
there after a collection. In order to decide when to run, the collector
keeps track of the number object allocations and deallocations since the
last collection. When the number of allocations minus the number of
deallocations exceeds {@var threshold0}, collection starts. Initially
only generation {@code 0} is examined. If generation {@code 0} has been
examined more than {@var threshold1} times since generation {@code 1}
has been examined, then generation {@code 1} is examined as well.
Similarly, {@var threshold2} controls the number of collections of
generation {@code 1} before collecting generation {@code 2}.

@@function get_threshold()

<p>Return the current collection thresholds as a tuple of {@code (}{@var
threshold0}, {@var threshold1}, {@var threshold2}).

@@function get_referrers(*objs)

<p>Return the list of objects that directly refer to any of objs. This
function will only locate those containers which support garbage
collection; extension types which do refer to other objects but do not
support garbage collection will not be found.

<p>Note that objects which have already been dereferenced, but which
live in cycles and have not yet been collected by the garbage collector
can be listed among the resulting referrers. To get only currently live
objects, call {@link collect} before calling {@link get_referrers}.

<p>Care must be taken when using objects returned by {@link
get_referrers} because some of them could still be under construction
and hence in a temporarily invalid state. Avoid using {@link
get_referrers} for any purpose other than debugging.
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function get_referents(*objs)

<p>Return a list of objects directly referred to by any of the
arguments. The referents returned are those objects visited by the
arguments' C-level {@link tp_traverse} methods (if any), and may not be
all objects actually directly reachable. {@link tp_traverse} methods are
supported only by objects that support garbage collection, and are only
required to visit objects that may be involved in a cycle. So, for
example, if an integer is directly reachable from an argument, that
integer object may or may not appear in the result list.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@text 

<p>The following variable is provided for read-only access (you can
mutate its value but should not rebind it):

@@variable garbage

<p>A list of objects which the collector found to be unreachable but
could not be freed (uncollectable objects). By default, this list
contains only objects with {@link __del__} methods.{@link
footnote:5795}Objects that have {@link __del__} methods and are part of
a reference cycle cause the entire reference cycle to be uncollectable,
including objects not necessarily in the cycle but reachable only from
it. Python doesn't collect such cycles automatically because, in
general, it isn't possible for Python to guess a safe order in which to
run the {@link __del__} methods. If you know a safe order, you can force
the issue by examining the {@var garbage} list, and explicitly breaking
cycles due to your objects within the list. Note that these objects are
kept alive even so by virtue of being in the {@var garbage} list, so
they should be removed from {@var garbage} too. For example, after
breaking cycles, do {@code del gc.garbage[:]} to empty the list. It's
generally better to avoid the issue by not creating cycles containing
objects with {@link __del__} methods, and {@var garbage} can be examined
in that case to verify that no such cycles are being created.

<p>If {@code DEBUG_SAVEALL} is set, then all unreachable objects will be
added to this list rather than freed.

@@text 

<p>The following constants are provided for use with {@link set_debug}:

@@variable DEBUG_STATS

<p>Print statistics during collection. This information can be useful
when tuning the collection frequency.

@@variable DEBUG_COLLECTABLE

<p>Print information on collectable objects found.

@@variable DEBUG_UNCOLLECTABLE

<p>Print information of uncollectable objects found (objects which are
not reachable but cannot be freed by the collector). These objects will
be added to the {@code garbage} list.

@@variable DEBUG_INSTANCES

<p>When {@code DEBUG_COLLECTABLE} or {@code DEBUG_UNCOLLECTABLE} is set,
print information about instance objects found.

@@variable DEBUG_OBJECTS

<p>When {@code DEBUG_COLLECTABLE} or {@code DEBUG_UNCOLLECTABLE} is set,
print information about objects other than instance objects found.

@@variable DEBUG_SAVEALL

<p>When set, all unreachable objects found will be appended to {@var
garbage} rather than being freed. This can be useful for debugging a
leaking program.

@@variable DEBUG_LEAK

<p>The debugging flags necessary for the collector to print information
about a leaking program (equal to {@code DEBUG_COLLECTABLE |
DEBUG_UNCOLLECTABLE | DEBUG_INSTANCES | DEBUG_OBJECTS | DEBUG_SAVEALL}).
@@footnote foot5795
<p>Prior to Python 2.2, the list contained all instance objects in
unreachable cycles, not only those with {@link __del__} methods.
