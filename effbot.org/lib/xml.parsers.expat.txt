
@@module xml.parsers.expat

<h1>xml.parsers.expat&#8212;Fast XML parsing using Expat</h1>

<p>New in version 2.0.

<p>The {@link xml.parsers.expat} module is a Python interface to the
Expat non-validating XML parser. The module provides a single extension
type, {@link xmlparser}, that represents the current state of an XML
parser. After an {@link xmlparser} object has been created, various
attributes of the object can be set to handler functions. When an XML
document is then fed to the parser, the handler functions are called for
the character data and markup in the XML document.

<p>This module uses the {@link pyexpat} module to provide access to the
Expat parser. Direct use of the {@link pyexpat} module is deprecated.

<p>This module provides one exception and one type object:

@@exception ExpatError

<p>The exception raised when Expat reports an error. See section {@link
expaterror-objects.html#expaterror-objects}, &#8220;ExpatError
Exceptions,&#8221; for more information on interpreting Expat errors.

@@exception error

<p>Alias for {@link ExpatError}.

@@variable XMLParserType

<p>The type of the return values from the {@link ParserCreate} function.

@@text 

<p>The {@link xml.parsers.expat} module contains two functions:

@@function ErrorString(errno)

<p>Returns an explanatory string for a given error number {@var errno}.

@@function ParserCreate([encoding[, namespace_separator]])

<p>Creates and returns a new {@link xmlparser} object. {@var encoding},
if specified, must be a string naming the encoding used by the XML data.
Expat doesn't support as many encodings as Python does, and its
repertoire of encodings can't be extended; it supports UTF-8, UTF-16,
ISO-8859-1 (Latin1), and ASCII. If {@var encoding} is given it will
override the implicit or explicit encoding of the document.

<p>Expat can optionally do XML namespace processing for you, enabled by
providing a value for {@var namespace_separator}. The value must be a
one-character string; a {@link exceptions.ValueError} will be raised if
the string has an illegal length ({@link None} is considered the same as
omission). When namespace processing is enabled, element type names and
attribute names that belong to a namespace will be expanded. The element
name passed to the element handlers {@link StartElementHandler} and
{@link EndElementHandler} will be the concatenation of the namespace
URI, the namespace separator character, and the local part of the name.
If the namespace separator is a zero byte ({@code chr(0)}) then the
namespace URI and the local part will be concatenated without any
separator.

<p>For example, if {@var namespace_separator} is set to a space
character (" ") and the following document is parsed:

<pre>
&lt;?xml version="1.0"?&gt;
&lt;root xmlns    = "http://default-namespace.org/"
      xmlns:py = "http://www.python.org/ns/"&gt;
  &lt;py:elem1 /&gt;
  &lt;elem2 xmlns="" /&gt;
&lt;/root&gt;
</pre>


<p>{@link StartElementHandler} will receive the following strings for
each element:

<pre>
http://default-namespace.org/ root
http://www.python.org/ns/ elem1
elem2
</pre>


@@text 

@see 
{@link http://www.libexpat.org/ The Expat XML Parser}

Home page of the Expat project.

<h2>XMLParser Objects</h2>

<p>{@link xmlparser} objects have the following methods:

@@method XMLParser.Parse(data[, isfinal])

<p>Parses the contents of the string {@var data}, calling the
appropriate handler functions to process the parsed data. {@var isfinal}
must be true on the final call to this method. {@var data} can be the
empty string at any time.

@@method XMLParser.ParseFile(file)

<p>Parse XML data reading from the object {@var file}. {@var file} only
needs to provide the {@link read(}{@var nbytes}) method, returning the
empty string when there's no more data.

@@method XMLParser.SetBase(base)

<p>Sets the base to be used for resolving relative URIs in system
identifiers in declarations. Resolving relative identifiers is left to
the application: this value will be passed through as the {@var base}
argument to the {@link ExternalEntityRefHandler}, {@link
NotationDeclHandler}, and {@link UnparsedEntityDeclHandler} functions.

@@method XMLParser.GetBase()

<p>Returns a string containing the base set by a previous call to {@link
SetBase}, or {@link None} if {@link SetBase} hasn't been called.

@@method XMLParser.GetInputContext()

<p>Returns the input data that generated the current event as a string.
The data is in the encoding of the entity which contains the text. When
called while an event handler is not active, the return value is {@link
None}.
<blockquote>
@since New in
version 2.1. <br />
</blockquote>

@@method XMLParser.ExternalEntityParserCreate(context[, encoding])

<p>Create a &#8220;child&#8221; parser which can be used to parse an
external parsed entity referred to by content parsed by the parent
parser. The {@var context} parameter should be the string passed to the
{@link ExternalEntityRefHandler} handler function, described below. The
child parser is created with the {@link ordered_attributes}, {@link
returns_unicode} and {@link specified_attributes} set to the values of
this parser.

@@method XMLParser.UseForeignDTD([flag])

<p>Calling this with a true value for {@var flag} (the default) will
cause Expat to call the {@link ExternalEntityRefHandler} with {@code
None} for all arguments to allow an alternate DTD to be loaded. If the
document does not contain a document type declaration, the {@link
ExternalEntityRefHandler} will still be called, but the {@link
StartDoctypeDeclHandler} and {@link EndDoctypeDeclHandler} will not be
called.

<p>Passing a false value for {@var flag} will cancel a previous call
that passed a true value, but otherwise has no effect.

<p>This method can only be called before the {@link Parse} or {@link
ParseFile} methods are called; calling it after either of those have
been called causes {@link ExpatError} to be raised with the {@link code}
attribute set to {@code
errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING}.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@text 

<p>{@link xmlparser} objects have the following attributes:

@@attribute XMLParser.buffer_size

<p>The size of the buffer used when {@link buffer_text} is true. This
value cannot be changed at this time.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@attribute XMLParser.buffer_text

<p>Setting this to true causes the {@link xmlparser} object to buffer
textual content returned by Expat to avoid multiple calls to the {@link
CharacterDataHandler} callback whenever possible. This can improve
performance substantially since Expat normally breaks character data
into chunks at every line ending. This attribute is false by default,
and may be changed at any time.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@attribute XMLParser.buffer_used

<p>If {@link buffer_text} is enabled, the number of bytes stored in the
buffer. These bytes represent UTF-8 encoded text. This attribute has no
meaningful interpretation when {@link buffer_text} is false.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@attribute XMLParser.ordered_attributes

<p>Setting this attribute to a non-zero integer causes the attributes to
be reported as a list rather than a dictionary. The attributes are
presented in the order found in the document text. For each attribute,
two list entries are presented: the attribute name and the attribute
value. (Older versions of this module also used this format.) By
default, this attribute is false; it may be changed at any time.
<blockquote>
@since New in version
2.1. <br />
</blockquote>

@@attribute XMLParser.returns_unicode

<p>If this attribute is set to a non-zero integer, the handler functions
will be passed Unicode strings. If {@link returns_unicode} is 0, 8-bit
strings containing UTF-8 encoded data will be passed to the handlers.
<blockquote>
@since Changed in version 1.6: Can be changed at any time to affect the
result type. <br />
</blockquote>

@@attribute XMLParser.specified_attributes

<p>If set to a non-zero integer, the parser will report only those
attributes which were specified in the document instance and not those
which were derived from attribute declarations. Applications which set
this need to be especially careful to use what additional information is
available from the declarations as needed to comply with the standards
for the behavior of XML processors. By default, this attribute is false;
it may be changed at any time.
<blockquote>
@since New in version 2.1. <br />
</blockquote>

@@text 

<p>The following attributes contain values relating to the most recent
error encountered by an {@link xmlparser} object, and will only have
correct values once a call to {@link Parse} or {@link ParseFile} has
raised a {@link xml.parsers.expat.ExpatError} exception.

@@attribute XMLParser.ErrorByteIndex

<p>Byte index at which an error occurred.

@@attribute XMLParser.ErrorCode

<p>Numeric code specifying the problem. This value can be passed to the
{@link ErrorString} function, or compared to one of the constants
defined in the {@code errors} object.

@@attribute XMLParser.ErrorColumnNumber

<p>Column number at which an error occurred.

@@attribute XMLParser.ErrorLineNumber

<p>Line number at which an error occurred.

@@text 

<p>The following attributes contain values relating to the current parse
location in an {@link xmlparser} object. During a callback reporting a
parse event they indicate the location of the first of the sequence of
characters that generated the event. When called outside of a callback,
the position indicated will be just past the last parse event
(regardless of whether there was an associated callback). New in version
2.4.

@@attribute XMLParser.CurrentByteIndex

<p>Current byte index in the parser input.

@@attribute XMLParser.CurrentColumnNumber

<p>Current column number in the parser input.

@@attribute XMLParser.CurrentLineNumber

<p>Current line number in the parser input.

@@text 

<p>Here is the list of handlers that can be set. To set a handler on an
{@link xmlparser} object {@var o}, use {@var o}.{@var handlername} =
{@var func}. {@var handlername} must be taken from the following list,
and {@var func} must be a callable object accepting the correct number
of arguments. The arguments are all strings, unless otherwise stated.

@@method XMLParser.XmlDeclHandler(version, encoding, standalone)

<p>Called when the XML declaration is parsed. The XML declaration is the
(optional) declaration of the applicable version of the XML
recommendation, the encoding of the document text, and an optional
&#8220;standalone&#8221; declaration. {@var version} and {@var encoding}
will be strings of the type dictated by the {@link returns_unicode}
attribute, and {@var standalone} will be {@code 1} if the document is
declared standalone, {@code 0} if it is declared not to be standalone,
or {@code -1} if the standalone clause was omitted. This is only
available with Expat version 1.95.0 or newer.
<blockquote>
@since New in version 2.1. <br />
</blockquote>

@@method XMLParser.StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)

<p>Called when Expat begins parsing the document type declaration
({@code &lt!DOCTYPE ...}). The {@var doctypeName} is provided exactly as
presented. The {@var systemId} and {@var publicId} parameters give the
system and public identifiers if specified, or {@link None} if omitted.
{@var has_internal_subset} will be true if the document contains and
internal document declaration subset. This requires Expat version 1.2 or
newer.

@@method XMLParser.EndDoctypeDeclHandler()

<p>Called when Expat is done parsing the document type declaration. This
requires Expat version 1.2 or newer.

@@method XMLParser.ElementDeclHandler(name, model)

<p>Called once for each element type declaration. {@var name} is the
name of the element type, and {@var model} is a representation of the
content model.

@@method XMLParser.AttlistDeclHandler(elname, attname, type, default, required)

<p>Called for each declared attribute for an element type. If an
attribute list declaration declares three attributes, this handler is
called three times, once for each attribute. {@var elname} is the name
of the element to which the declaration applies and {@var attname} is
the name of the attribute declared. The attribute type is a string
passed as {@var type}; the possible values are {@code 'CDATA'}, {@code
'ID'}, {@code 'IDREF'}, ... {@var default} gives the default value for
the attribute used when the attribute is not specified by the document
instance, or {@link None} if there is no default value ({@code #IMPLIED}
values). If the attribute is required to be given in the document
instance, {@var required} will be true. This requires Expat version
1.95.0 or newer.

@@method XMLParser.StartElementHandler(name, attributes)

<p>Called for the start of every element. {@var name} is a string
containing the element name, and {@var attributes} is a dictionary
mapping attribute names to their values.

@@method XMLParser.EndElementHandler(name)

<p>Called for the end of every element.

@@method XMLParser.ProcessingInstructionHandler(target, data)

<p>Called for every processing instruction.

@@method XMLParser.CharacterDataHandler(data)

<p>Called for character data. This will be called for normal character
data, CDATA marked content, and ignorable whitespace. Applications which
must distinguish these cases can use the {@link
StartCdataSectionHandler}, {@link EndCdataSectionHandler}, and {@link
ElementDeclHandler} callbacks to collect the required information.

@@method XMLParser.UnparsedEntityDeclHandler(entityName, base, systemId, publicId, notationName)

<p>Called for unparsed (NDATA) entity declarations. This is only present
for version 1.2 of the Expat library; for more recent versions, use
{@link EntityDeclHandler} instead. (The underlying function in the Expat
library has been declared obsolete.)

@@method XMLParser.EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)

<p>Called for all entity declarations. For parameter and internal
entities, {@var value} will be a string giving the declared contents of
the entity; this will be {@link None} for external entities. The {@var
notationName} parameter will be {@code None} for parsed entities, and
the name of the notation for unparsed entities. {@var
is_parameter_entity} will be true if the entity is a parameter entity or
false for general entities (most applications only need to be concerned
with general entities). This is only available starting with version
1.95.0 of the Expat library.
<blockquote>
@since New in version
2.1. <br />
</blockquote>

@@method XMLParser.NotationDeclHandler(notationName, base, systemId, publicId)

<p>Called for notation declarations. {@var notationName}, {@var base},
and {@var systemId}, and {@var publicId} are strings if given. If the
public identifier is omitted, {@var publicId} will be {@link None}.

@@method XMLParser.StartNamespaceDeclHandler(prefix, uri)

<p>Called when an element contains a namespace declaration. Namespace
declarations are processed before the {@link StartElementHandler} is
called for the element on which declarations are placed.

@@method XMLParser.EndNamespaceDeclHandler(prefix)

<p>Called when the closing tag is reached for an element that contained
a namespace declaration. This is called once for each namespace
declaration on the element in the reverse of the order for which the
{@link StartNamespaceDeclHandler} was called to indicate the start of
each namespace declaration's scope. Calls to this handler are made after
the corresponding {@link EndElementHandler} for the end of the element.

@@method XMLParser.CommentHandler(data)

<p>Called for comments. {@var data} is the text of the comment,
excluding the leading `{@code &lt!-}{@code -}' and trailing `{@code
-}{@code ->}'.

@@method XMLParser.StartCdataSectionHandler()

<p>Called at the start of a CDATA section. This and {@link
StartCdataSectionHandler} are needed to be able to identify the
syntactical start and end for CDATA sections.

@@method XMLParser.EndCdataSectionHandler()

<p>Called at the end of a CDATA section.

@@method XMLParser.DefaultHandler(data)

<p>Called for any characters in the XML document for which no applicable
handler has been specified. This means characters that are part of a
construct which could be reported, but for which no handler has been
supplied.

@@method XMLParser.DefaultHandlerExpand(data)

<p>This is the same as the {@link DefaultHandler}, but doesn't inhibit
expansion of internal entities. The entity reference will not be passed
to the default handler.

@@method XMLParser.NotStandaloneHandler()

<p>Called if the XML document hasn't been declared as being a standalone
document. This happens when there is an external subset or a reference
to a parameter entity, but the XML declaration does not set standalone
to {@code yes} in an XML declaration. If this handler returns {@code 0},
then the parser will throw an {@code XML_ERROR_NOT_STANDALONE} error. If
this handler is not set, no exception is raised by the parser for this
condition.

@@method XMLParser.ExternalEntityRefHandler(context, base, systemId, publicId)

<p>Called for references to external entities. {@var base} is the
current base, as set by a previous call to {@link SetBase}. The public
and system identifiers, {@var systemId} and {@var publicId}, are strings
if given; if the public identifier is not given, {@var publicId} will be
{@link None}. The {@var context} value is opaque and should only be used
as described below.

<p>For external entities to be parsed, this handler must be implemented.
It is responsible for creating the sub-parser using {@code
ExternalEntityParserCreate(}{@var context}), initializing it with the
appropriate callbacks, and parsing the entity. This handler should
return an integer; if it returns {@code 0}, the parser will throw an
{@code XML_ERROR_EXTERNAL_ENTITY_HANDLING} error, otherwise parsing will
continue.

<p>If this handler is not provided, external entities are reported by
the {@link DefaultHandler} callback, if provided.

@@text 

<h2>ExpatError Exceptions</h2>

<p>{@link ExpatError} exceptions have a number of interesting
attributes:

@@attribute XMLParser.code

<p>Expat's internal error number for the specific error. This will match
one of the constants defined in the {@code errors} object from this
module.
<blockquote>
@since New in version
2.1. <br />
</blockquote>

@@attribute XMLParser.lineno

<p>Line number on which the error was detected. The first line is
numbered {@code 1}.
<blockquote>
@since New in version
2.1. <br />
</blockquote>

@@attribute XMLParser.offset

<p>Character offset into the line where the error occurred. The first
column is numbered {@code 0}.
<blockquote>
@since New in version 2.1. <br />
</blockquote>

@@text 

<h2>Example</h2>

<p>The following program defines three handlers that just print out
their arguments.

<pre>
import xml.parsers.expat

# 3 handler functions
def start_element(name, attrs):
    print 'Start element:', name, attrs
def end_element(name):
    print 'End element:', name
def char_data(data):
    print 'Character data:', repr(data)

p = xml.parsers.expat.ParserCreate()

p.StartElementHandler = start_element
p.EndElementHandler = end_element
p.CharacterDataHandler = char_data

p.Parse("""&lt;?xml version="1.0"?&gt;
&lt;parent id="top"&gt;&lt;child1 name="paul"&gt;Text goes here&lt;/child1&gt;
&lt;child2 name="fred"&gt;More text&lt;/child2&gt;
&lt;/parent&gt;""", 1)
</pre>


<p>The output from this program is:

<pre>
Start element: parent {'id': 'top'}
Start element: child1 {'name': 'paul'}
Character data: 'Text goes here'
End element: child1
Character data: '\n'
Start element: child2 {'name': 'fred'}
Character data: 'More text'
End element: child2
Character data: '\n'
End element: parent
</pre>


<h2>Content Model Descriptions</h2>

<p>Content modules are described using nested tuples. Each tuple
contains four values: the type, the quantifier, the name, and a tuple of
children. Children are simply additional content module descriptions.

<p>The values of the first two fields are constants defined in the
{@code model} object of the {@link xml.parsers.expat} module. These
constants can be collected in two groups: the model type group and the
quantifier group.

<p>The constants in the model type group are:

@@variable XML_CTYPE_ANY

<p>The element named by the model name was declared to have a content
model of {@code ANY}.

@@variable XML_CTYPE_CHOICE

<p>The named element allows a choice from a number of options; this is
used for content models such as {@code (A | B | C)}.

@@variable XML_CTYPE_EMPTY

<p>Elements which are declared to be {@code EMPTY} have this model type.

@@variable XML_CTYPE_MIXED

@@variable XML_CTYPE_NAME

@@variable XML_CTYPE_SEQ

<p>Models which represent a series of models which follow one after the
other are indicated with this model type. This is used for models such
as {@code (A, B, C)}.

@@text 

<p>The constants in the quantifier group are:

@@variable XML_CQUANT_NONE

<p>No modifier is given, so it can appear exactly once, as for {@code
A}.

@@variable XML_CQUANT_OPT

<p>The model is optional: it can appear once or not at all, as for
{@code A?}.

@@variable XML_CQUANT_PLUS

<p>The model must occur one or more times (like {@code A+}).

@@variable XML_CQUANT_REP

<p>The model must occur zero or more times, as for {@code A*}.

@@text 

<h2>Expat error constants</h2>

<p>The following constants are provided in the {@code errors} object of
the {@link xml.parsers.expat} module. These constants are useful in
interpreting some of the attributes of the {@link ExpatError} exception
objects raised when an error has occurred.

<p>The {@code errors} object has the following attributes:

@@variable XML_ERROR_ASYNC_ENTITY

@@variable XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF

<p>An entity reference in an attribute value referred to an external
entity instead of an internal entity.

@@variable XML_ERROR_BAD_CHAR_REF

<p>A character reference referred to a character which is illegal in XML
(for example, character {@code 0}, or `{@code &amp;#0;}').

@@variable XML_ERROR_BINARY_ENTITY_REF

<p>An entity reference referred to an entity which was declared with a
notation, so cannot be parsed.

@@variable XML_ERROR_DUPLICATE_ATTRIBUTE

<p>An attribute was used more than once in a start tag.

@@variable XML_ERROR_INCORRECT_ENCODING

@@variable XML_ERROR_INVALID_TOKEN

<p>Raised when an input byte could not properly be assigned to a
character; for example, a NUL byte (value {@code 0}) in a UTF-8 input
stream.

@@variable XML_ERROR_JUNK_AFTER_DOC_ELEMENT

<p>Something other than whitespace occurred after the document element.

@@variable XML_ERROR_MISPLACED_XML_PI

<p>An XML declaration was found somewhere other than the start of the
input data.

@@variable XML_ERROR_NO_ELEMENTS

<p>The document contains no elements (XML requires all documents to
contain exactly one top-level element)..

@@variable XML_ERROR_NO_MEMORY

<p>Expat was not able to allocate memory internally.

@@variable XML_ERROR_PARAM_ENTITY_REF

<p>A parameter entity reference was found where it was not allowed.

@@variable XML_ERROR_PARTIAL_CHAR

<p>An incomplete character was found in the input.

@@variable XML_ERROR_RECURSIVE_ENTITY_REF

<p>An entity reference contained another reference to the same entity;
possibly via a different name, and possibly indirectly.

@@variable XML_ERROR_SYNTAX

<p>Some unspecified syntax error was encountered.

@@variable XML_ERROR_TAG_MISMATCH

<p>An end tag did not match the innermost open start tag.

@@variable XML_ERROR_UNCLOSED_TOKEN

<p>Some token (such as a start tag) was not closed before the end of the
stream or the next token was encountered.

@@variable XML_ERROR_UNDEFINED_ENTITY

<p>A reference was made to a entity which was not defined.

@@variable XML_ERROR_UNKNOWN_ENCODING

<p>The document encoding is not supported by Expat.

@@variable XML_ERROR_UNCLOSED_CDATA_SECTION

<p>A CDATA marked section was not closed.

@@variable XML_ERROR_EXTERNAL_ENTITY_HANDLING

@@variable XML_ERROR_NOT_STANDALONE

<p>The parser determined that the document was not
&#8220;standalone&#8221; though it declared itself to be in the XML
declaration, and the {@link NotStandaloneHandler} was set and returned
{@code 0}.

@@variable XML_ERROR_UNEXPECTED_STATE

@@variable XML_ERROR_ENTITY_DECLARED_IN_PE

@@variable XML_ERROR_FEATURE_REQUIRES_XML_DTD

<p>An operation was requested that requires DTD support to be compiled
in, but Expat was configured without DTD support. This should never be
reported by a standard build of the {@link xml.parsers.expat} module.

@@variable XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING

<p>A behavioral change was requested after parsing started that can only
be changed before parsing has started. This is (currently) only raised
by {@link UseForeignDTD}.

@@variable XML_ERROR_UNBOUND_PREFIX

<p>An undeclared prefix was found when namespace processing was enabled.

@@variable XML_ERROR_UNDECLARING_PREFIX

<p>The document attempted to remove the namespace declaration associated
with a prefix.

@@variable XML_ERROR_INCOMPLETE_PE

<p>A parameter entity contained incomplete markup.

@@variable XML_ERROR_XML_DECL

<p>The document contained no document element at all.

@@variable XML_ERROR_TEXT_DECL

<p>There was an error parsing a text declaration in an external entity.

@@variable XML_ERROR_PUBLICID

<p>Characters were found in the public id that are not allowed.

@@variable XML_ERROR_SUSPENDED

<p>The requested operation was made on a suspended parser, but isn't
allowed. This includes attempts to provide additional input or to stop
the parser.

@@variable XML_ERROR_NOT_SUSPENDED

<p>An attempt to resume the parser was made when the parser had not been
suspended.

@@variable XML_ERROR_ABORTED

<p>This should not be reported to Python applications.

@@variable XML_ERROR_FINISHED

<p>The requested operation was made on a parser which was finished
parsing input, but isn't allowed. This includes attempts to provide
additional input or to stop the parser.

@@variable XML_ERROR_SUSPEND_PE
