<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>A Simple Image&nbsp;Viewer</title></head><body data-page-id="266"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">A Simple Image&nbsp;Viewer</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | May 2003 | Originally posted to <a href="http://online.effbot.org">online.effbot.org</a></p><p>Here&#8217;s a simple image viewer widget, designed for use with the Tkinter
version of the <a href="http://effbot.org/zone/wck.htm">Widget
Construction Kit</a>.</p><pre class="python">
<span class="pykeyword">from</span> PIL <span class="pykeyword">import</span> ImageTk
<span class="pykeyword">from</span> WCK <span class="pykeyword">import</span> Widget

<span class="pykeyword">class</span> <span class="pyclass">ImageView</span>(Widget):

    ui_option_width = 512
    ui_option_height = 512

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, master, **options):
        self.photo = self.image = None
        self.ui_init(master, options)

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_config</span>(self):
        <span class="pykeyword">return</span> (
            int(self.ui_option_width),
            int(self.ui_option_height)
        )

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        <span class="pykeyword">if</span> self.photo <span class="pykeyword">is</span> None:
            <span class="pykeyword">return</span>
        <span class="pykeyword">if</span> self.image <span class="pykeyword">is</span> None:
            self.image = self.ui_image(str(self.photo))
        draw.paste(self.image)

    <span class="pykeyword">def</span> <span class="pyfunction">setimage</span>(self, image):
        self.photo = ImageTk.PhotoImage(image)
        self.image = None
        self.ui_damage()</pre><p>This widget uses the <b>ui_image</b> method to wraps an image
object in a WCK-specific pixmap object.  The pixmap is then pasted
onto the window surface in the <b>ui_handle_repair</b> method.</p><p>The image object must be of a type known to the actual WCK
implementation.  For the Tkinter version of the WCK, the <b>ui_image</b>
method currently requires a Tkinter <b>PhotoImage</b> instance, or
the corresponding PIL object.</p><p>Note that the viewer creates the WCK object when the widget is
about to be redrawn (in <b>ui_handle_repair</b>.  The reason for
this is that the <b>ui_image</b> method requires the widget to
exist; if you try to call it on a widget that hasn&#8217;t yet been
displayed, the method may fail.  (in the current release, doing
this may even crash the WCK library).</p><p>Using this widget is straightforward.  Just create the widget as
usual (by calling the widget constructor, passing in the parent
widget), and call <b>setimage</b> with a PIL <b>Image</b> object.  If
necessary, you can also call the <b>config</b> method to resize the
widget.</p><p>Here&#8217;s an example:</p><pre class="python">
<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> Tk
<span class="pykeyword">from</span> PIL <span class="pykeyword">import</span> Image

root = Tk()
root.title(<span class="pystring">"viewer"</span>)

view = ImageView(root)
view.pack()

image = Image.open(filename)

view.setimage(image)
view.config(width=image.size[0], height=image.size[1])

root.mainloop()</pre><p>A drawback with the current <b>ui_image</b> interface is that the
method requires a platform-specific image object.  In future versions,
the method will be modified to accept a standard PIL <b>Image</b> as
well.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
