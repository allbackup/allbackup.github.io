<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Why doesn't closing sys.stdout (stdin, stderr) really close&nbsp;it?</title></head><body data-page-id="940"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Why doesn't closing sys.stdout (stdin, stderr) really close&nbsp;it?</h1></div><div class="yui-ge"><div class="yui-u first"><p>Python file objects are a high-level layer of abstraction on top of C <strong>stdio</strong>
streams, which in turn are a medium-level layer of abstraction on top of (among other things) low-level C file descriptors.</p><p>For most file objects you create in Python via the builtin <a href="/pyref/open.htm"><strong>open</strong></a> constructor, calling <a href="/pyref/file.close.htm"><strong>close</strong></a> marks the Python file object as being closed from Python&#8217;s point of view, and also arranges to close the underlying C stream.  This also happens automatically in <em>f</em>&#8216;s destructor, when <em>f</em> becomes garbage.</p><p>But stdin, stdout and stderr are treated specially by Python, because of the special status also given to them by C. Calling <a href="/pyref/sys.stdout.close.htm"><strong>sys.stdout.close</strong></a> marks the Python-level file object as being closed, but does <em>not</em> close the associated C stream.</p><p>To close the underlying C stream for one of these three, you should first be sure that this is what you really want to do (e.g., you may confuse extension modules trying to do I/O). If it is, use <a href="/pyref/os.close.htm"><strong>os.close</strong></a>:</p><pre class="python">os.close(0)   <span class="pycomment"># close C's stdin stream</span>
os.close(1)   <span class="pycomment"># close C's stdout stream</span>
os.close(2)   <span class="pycomment"># close C's stderr stream</span></pre><p>CATEGORY: library</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
