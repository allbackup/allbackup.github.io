<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Publishing SVN Backups as Trac&nbsp;Attachments</title></head><body data-page-id="2015"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Publishing SVN Backups as Trac&nbsp;Attachments</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | January 2008</p><p>We&#8217;re using customer-specific Trac and Subversion instances for some
of our customers, which is working pretty well.  Recently, one
customer wanted to be able to download complete Subversion archives of
their code from the site, at will.  Since the customer was already
downloading code releases via the Trac wiki, we decided to make the
archives available through the Trac wiki as well.  Here&#8217;s how we did
it.</p><p>Trac stores attachments in a subdirectory, <strong>attachments/wiki</strong> in the
Trac data directory.  For example, on our server, attachments for the
<strong>SvnBackup</strong> page in the <strong>customer.trac</strong> wiki would be stored in
this directory:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>/home/company/webapps/customer.trac/attachments/wiki/SvnBackup
</code></pre></div><div class="yui-ge"><div class="yui-u first"><h2 id="creating-archive-tarballs">Creating Archive Tarballs&#160;<a class="nav" href="#creating-archive-tarballs" title="bookmark!">#</a></h2><p>So, the first step is to create regular backups, and store them in
that directory.  Well, we&#8217;re already creating nightly backups using
<a href="http://svnbook.red-bean.com/nightly/en/svn.reposadmin.maint.html#svn.reposadmin.maint.backup">the <strong>hot-backup.py</strong>
script</a>,
so the first step is to tell the <strong>hot-backup.py</strong> script to put
those backups in the right directory:</p><pre><code>$ mkdir webapps/customer.trac/attachments/wiki/SvnBackup

$ bin/hot-backup.py --archive-type=gz --num-backups=10 \
  webapps/customer.svn/ \
  webapps/customer.trac/attachments/wiki/SvnBackup
</code></pre><p>(the hot-backup.py command should be written on a single line)</p><p>The above command tells the <strong>hot-backup.py</strong> script to create a
hotcopy of the <strong>webapps/customer.svn</strong> repository, run it through
<strong>tar</strong> and <strong>gzip</strong>, and store the resulting tarball in the
<strong>SvnBackup</strong> attachment directory (which has to exist).  Up to ten
tarballs are kept around.</p><h2 id="attaching-the-tarballs-to-a-wiki-page">Attaching the Tarballs to a Wiki Page&#160;<a class="nav" href="#attaching-the-tarballs-to-a-wiki-page" title="bookmark!">#</a></h2><p>Next, we need to tell Trac about the attachments.  Just putting some
files in the directory isn&#8217;t enough; we also need to update Trac&#8217;s
database.  Trac stores a list of attachments in the <strong>attachment</strong>
table in a local sqlite3 database; to update the list, we just need to
clean out any old attachments for the page, and add entries for the
existing files.</p><p>This script (<strong>svnbackup.py</strong>) does the trick:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide"><span class="pycomment"># usage: svnbackup.py &lt;trac dir&gt; &lt;page&gt;</span>
<span class="pycomment">#   e.g: svnbackup.py webapps/customer.trac SvnBackup</span>

<span class="pykeyword">import</span> glob, sys
<span class="pykeyword">import</span> sqlite3 <span class="pykeyword">as</span> dbapi

<span class="pykeyword">from</span> os.path <span class="pykeyword">import</span> *

TRAC_ROOT, PAGE = sys.argv[1:3]

db = dbapi.connect(join(TRAC_ROOT, <span class="pystring">"db/trac.db"</span>))

db.execute(<span class="pystring">"delete from attachment where type = 'wiki' and id = ?"</span>, [PAGE])

<span class="pykeyword">for</span> file <span class="pykeyword">in</span> glob.glob(join(TRAC_ROOT, <span class="pystring">"attachments/wiki"</span>, PAGE, <span class="pystring">"*"</span>)):
    <span class="pykeyword">print</span> os.path.basename(file)
    db.execute(
        <span class="pystring">"insert into attachment"</span>
        <span class="pystring">" (type, id, filename, size, time, description, author, ipnr)"</span>
        <span class="pystring">" values ('wiki', ?, ?, ?, ?, '', 'system', '127.0.0.1')"</span>,
        [PAGE, basename(file), getsize(file), getmtime(file)]
        )

db.commit()
db.close()</pre></div><div class="yui-ge"><div class="yui-u first"><p>Running this script adds the files to the given page:</p><pre><code>$ python svnbackup.py webapps/customer.trac SvnBackup
customer.svn-500.tar.gz
customer.svn-505.tar.gz
customer.svn-501.tar.gz
</code></pre><p>This results in an attachment section that looks something like:</p><div style="border: 1px solid black; padding-left: 10px;"><h3 id="attachments">Attachments&#160;<a class="nav" href="#attachments" title="bookmark!">#</a></h3><ul><li><a href="#">customer.svn-500.tar.gz</a> (72.9 MB) - added by system on 01/07/08 08:47:26.</li><li><a href="#">customer.svn-501.tar.gz</a> (72.9 MB) - added by system on 01/07/08 11:47:08.</li><li><a href="#">customer.svn-505.tar.gz</a> (72.9 MB) - added by system on 01/08/08 18:17:24.</li></ul></div><h2 id="wrapping-up">Wrapping Up&#160;<a class="nav" href="#wrapping-up" title="bookmark!">#</a></h2><p>The final step is to add the hot-backup.py and svnbackup.py commands to your standard backup cronjob, and tell the customer about it.  My cron entry looks like this:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>15 0 * * * /home/company/BACKUP.sh &gt;/home/company/backup.log 2&gt;&amp;1
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>and the BACKUP.sh script simply contains the hot-backup.py and svnbackup.py commands shown earlier (and lots of other stuff as well, but that&#8217;s outside the scope of this article).</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><a href="#creating-archive-tarballs">Creating Archive Tarballs</a></li><li><a href="#attaching-the-tarballs-to-a-wiki-page">Attaching the Tarballs to a Wiki Page</a></li><li><ul><li><a href="#attachments">Attachments</a></li></ul></li><li><a href="#wrapping-up">Wrapping Up</a></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
