
@@module code

<h1>code&#8212;Interpreter base classes</h1>

<p>The {@code code} module provides facilities to implement
read-eval-print loops in Python. Two classes and convenience functions
are included which can be used to build applications which provide an
interactive interpreter prompt.

@@class InteractiveInterpreter([locals])

<p>This class deals with parsing and interpreter state (the user's
namespace); it does not deal with input buffering or prompting or input
file naming (the filename is always passed in explicitly). The optional
{@var locals} argument specifies the dictionary in which code will be
executed; it defaults to a newly created dictionary with key {@code
'__name__'} set to {@code '__console__'} and key {@code '__doc__'} set
to {@code None}.

@@class InteractiveConsole([locals[, filename]])

<p>Closely emulate the behavior of the interactive Python interpreter.
This class builds on {@link InteractiveInterpreter} and adds prompting
using the familiar {@code sys.ps1} and {@code sys.ps2}, and input
buffering.

@@function interact([banner[, readfunc[, local]]])

<p>Convenience function to run a read-eval-print loop. This creates a
new instance of {@link InteractiveConsole} and sets {@var readfunc} to
be used as the {@link raw_input} method, if provided. If {@var local} is
provided, it is passed to the {@link InteractiveConsole} constructor for
use as the default namespace for the interpreter loop. The {@link
interact} method of the instance is then run with {@var banner} passed
as the banner to use, if provided. The console object is discarded after
use.

@@function compile_command(source[, filename[, symbol]])

<p>This function is useful for programs that want to emulate Python's
interpreter main loop (a.k.a. the read-eval-print loop). The tricky part
is to determine when the user has entered an incomplete command that can
be completed by entering more text (as opposed to a complete command or
a syntax error). This function {@em almost} always makes the same
decision as the real interpreter main loop.

<p>{@var source} is the source string; {@var filename} is the optional
filename from which source was read, defaulting to {@code '&ltinput>'};
and {@var symbol} is the optional grammar start symbol, which should be
either {@code 'single'} (the default) or {@code 'eval'}.

<p>Returns a code object (the same as {@code compile(}{@var source},
{@var filename}, {@var symbol})) if the command is complete and valid;
{@code None} if the command is incomplete; raises {@link
exceptions.SyntaxError} if the command is complete and contains a syntax
error, or raises {@link exceptions.OverflowError} or {@link
exceptions.ValueError} if the command contains an invalid literal.

@@text 

<h2>Interactive Interpreter Objects</h2>

@@method runsource(source[, filename[, symbol]])

<p>Compile and run some source in the interpreter. Arguments are the
same as for {@link compile_command}; the default for {@var filename} is
{@code '&ltinput>'}, and for {@var symbol} is {@code 'single'}. One
several things can happen:
<ul>
<li>
<p>The input is incorrect; {@link compile_command} raised an exception
({@link exceptions.SyntaxError} or {@link exceptions.OverflowError}). A
syntax traceback will be printed by calling the {@link showsyntaxerror}
method. {@link runsource} returns {@link False}.
<li>
<p>The input is incomplete, and more input is required; {@link
compile_command} returned {@link None}. {@link runsource} returns {@link
True}.
<li>
<p>The input is complete; {@link compile_command} returned a code
object. The code is executed by calling the {@link runcode} (which also
handles run-time exceptions, except for {@link exceptions.SystemExit}).
{@link runsource} returns {@link False}.
</ul>

<p>The return value can be used to decide whether to use {@code sys.ps1}
or {@code sys.ps2} to prompt the next line.

@@method runcode(code)

<p>Execute a code object. When an exception occurs, {@link
showtraceback} is called to display a traceback. All exceptions are
caught except {@link exceptions.SystemExit}, which is allowed to
propagate.

<p>A note about {@link exceptions.KeyboardInterrupt}: this exception may
occur elsewhere in this code, and may not always be caught. The caller
should be prepared to deal with it.

@@method showsyntaxerror([filename])

<p>Display the syntax error that just occurred. This does not display a
stack trace because there isn't one for syntax errors. If {@var
filename} is given, it is stuffed into the exception instead of the
default filename provided by Python's parser, because it always uses
{@code '&ltstring>'} when reading from a string. The output is written
by the {@link write} method.

@@method showtraceback()

<p>Display the exception that just occurred. We remove the first stack
item because it is within the interpreter object implementation. The
output is written by the {@link write} method.

@@method write(data)

<p>Write a string to the standard error stream ({@code sys.stderr}).
Derived classes should override this to provide the appropriate output
handling as needed.

@@text 

<h2>Interactive Console Objects</h2>

<p>The {@link InteractiveConsole} class is a subclass of {@link
InteractiveInterpreter}, and so offers all the methods of the
interpreter objects as well as the following additions.

@@method interact([banner])

<p>Closely emulate the interactive Python console. The optional banner
argument specify the banner to print before the first interaction; by
default it prints a banner similar to the one printed by the standard
Python interpreter, followed by the class name of the console object in
parentheses (so as not to confuse this with the real interpreter - since
it's so close!).

@@method push(line)

<p>Push a line of source text to the interpreter. The line should not
have a trailing newline; it may have internal newlines. The line is
appended to a buffer and the interpreter's {@link runsource} method is
called with the concatenated contents of the buffer as source. If this
indicates that the command was executed or invalid, the buffer is reset;
otherwise, the command is incomplete, and the buffer is left as it was
after the line was appended. The return value is {@code True} if more
input is required, {@link False} if the line was dealt with in some way
(this is the same as {@link runsource}).

@@method resetbuffer()

<p>Remove any unhandled source text from the input buffer.

@@method raw_input([prompt])

<p>Write a prompt and read a line. The returned line does not include
the trailing newline. When the user enters the EOF key sequence, {@link
exceptions.EOFError} is raised. The base implementation uses the
built-in function {@link raw_input}; a subclass may replace this with a
different implementation.
