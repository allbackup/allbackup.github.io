<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>What kinds of global value mutation are&nbsp;thread-safe?</title></head><body data-page-id="912"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">What kinds of global value mutation are&nbsp;thread-safe?</h1></div><div class="yui-ge"><div class="yui-u first"><p>The <a href="what-is-the-global-interpreter-lock">Global Interpreter Lock</a>
(GIL) is used internally to ensure that only
one thread runs in the Python VM at a time. In general, Python offers
to switch among threads only between bytecode instructions; how
frequently it switches can be set via <a href="/pyref/sys.setcheckinterval.htm"><strong>sys.setcheckinterval</strong></a>.
Each bytecode instruction and therefore all the C implementation code
reached from each instruction is therefore atomic from the point of
view of a Python program.</p><p>In theory, this means an exact accounting requires an exact
understanding of the PVM bytecode implementation. In practice, it
means that operations on shared variables of builtin data types
(<a href="/pyref/int.htm"><strong>int</strong></a>, <a href="/pyref/list.htm"><strong>list</strong></a>, <a href="/pyref/dict.htm"><strong>dict</strong></a>, etc) that &#8220;look
atomic&#8221; really are.</p><p>For example, the following operations are all atomic (L, L1, L2 are
lists, D, D1, D2 are dicts, x, y are objects, i, j are ints):</p><pre class="python">L.append(x)
L1.extend(L2)
x = L[i]
x = L.pop()
L1[i:j] = L2
L.sort()
x = y
x.field = y
D[x] = y
D1.update(D2)
D.keys()</pre><p>These aren&#8217;t:</p><pre class="python">i = i+1
L.append(L[-1])
L[i] = L[j]
D[x] = D[x] + 1</pre><p>Operations that replace other objects may invoke those other objects&#8217;
<a href="/pyref/__del__.htm"><strong>__del__</strong></a> method when their reference count reaches zero,
and that can affect things. This is especially true for the mass
updates to dictionaries and lists. When in doubt, use a mutex!</p><p>CATEGORY: library cleanup</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
