<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Reading Text&nbsp;Files</title></head><body data-page-id="252"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Reading Text&nbsp;Files</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">June 09, 2000 | Fredrik Lundh</p><p class="note"><i>This is somewhat outdated, given the additions of
xreadlines in 2.1 and text file iterators in 2.2.  See the end of the
page for examples.</i></p><p>This very brief note discusses a few more or less efficient ways
to read lines of text from a file.</p><h3>Doing it the usual way</h3><p>The standard idiom consists of a an &#8216;endless&#8217; <i class="statement">while</i> loop, in which we repeatedly call the
file&#8217;s <i class="method">readline</i> method. Here&#8217;s an
example:</p><pre class="python">
<span class="pycomment"># File: readline-example-1.py</span>

file = open(<span class="pystring">"sample.txt"</span>)

<span class="pykeyword">while</span> 1:
    line = file.readline()
    <span class="pykeyword">if</span> <span class="pykeyword">not</span> line:
        <span class="pykeyword">break</span>
    <span class="pykeyword">pass</span> <span class="pycomment"># do something</span></pre><p>This snippet reads the file line by line. If <i class="method">
readline</i> reaches the end of the file, it returns an empty
string. Otherwise, it returns the line of text, including the
trailing newline character.</p><p>On my test machine, using a 10 megabyte sample text file, this
script reads about <b>32,000</b> lines per second.</p><h3>Using the fileinput module</h3><p>If you think the <i class="statement">while</i> loop is ugly,
you can hide the <i class="method">readline</i> call in a wrapper
class. The standard <i class="module">fileinput</i> module contains
an <i class="class">input</i> class which does exactly that.</p><pre class="python">
<span class="pycomment"># File: readline-example-2.py</span>

<span class="pykeyword">import</span> fileinput

<span class="pykeyword">for</span> line <span class="pykeyword">in</span> fileinput.input(<span class="pystring">"sample.txt"</span>):
    <span class="pykeyword">pass</span></pre><p>However, adding more layers of Python code doesn&#8217;t exactly help.
For the same test setup, performance drops to <b>13,000</b> lines
per second. That&#8217;s nearly two and half times slower!</p><h3>Speeding up line reading</h3><p>To speed things up, we obviously need to make sure we spend as
little time on in Python code (running under the interpreter) as
possible.</p><p>One way to do this is to tell the file object to read larger
chunks of data. For example, if you have enough memory, you can
slurp the entire file into memory, using the <i class="method">
readlines</i> method. Or you could even use the <i class="method">
read</i> method to read the entire file into a single memory block,
and then use <i class="function">string.split</i> to chop it up
into individual lines.</p><p>However, if you&#8217;re processing really large files, it would be
nice if you could limit the chunk size to something reasonable. For
example, if you read a few thousand lines at a time, you probably
won&#8217;t use up more than 100 kilobytes or so.</p><p>The following script uses a nested loop. The outer loop uses <i class="method">readlines</i> to read about 100,000 bytes of text,
and the inner loop processes those lines using a simple <i class="statement">for-in</i> loop:</p><pre class="python">
<span class="pycomment"># File: readline-example-3.py</span>

file = open(<span class="pystring">"sample.txt"</span>)

<span class="pykeyword">while</span> 1:
    lines = file.readlines(100000)
    <span class="pykeyword">if</span> <span class="pykeyword">not</span> lines:
        <span class="pykeyword">break</span>
    <span class="pykeyword">for</span> line <span class="pykeyword">in</span> lines:
        <span class="pykeyword">pass</span> <span class="pycomment"># do something</span></pre><p>Can this really be faster? You bet. With the same test data, we
can now process <b>96,900</b> lines of text per second!</p><p>Or to put it another way, this solution is three times as fast
as the standard solution, and over seven times faster than the <i class="module">fileinput</i> version.</p><hr /><p>In Python 2.2 and later, you can loop over the file object itself.
This works pretty much like readlines(N) under the covers, but looks
much better:</p><pre class="python">
<span class="pycomment"># File: readline-example-5.py</span>

file = open(<span class="pystring">"sample.txt"</span>)

<span class="pykeyword">for</span> line <span class="pykeyword">in</span> file:
    <span class="pykeyword">pass</span> <span class="pycomment"># do something</span></pre><p>In Python 2.1, you have to use the <b>xreadlines</b> iterator
factory instead:</p><pre class="python">
<span class="pycomment"># File: readline-example-4.py</span>

file = open(<span class="pystring">"sample.txt"</span>)

<span class="pykeyword">for</span> line <span class="pykeyword">in</span> file.xreadlines():
    <span class="pykeyword">pass</span> <span class="pycomment"># do something</span></pre><p class="info">Copyright &#169; 2000 Fredrik Lundh</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
