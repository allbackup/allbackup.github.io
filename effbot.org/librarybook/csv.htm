<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The csv&nbsp;Module</title></head><body data-page-id="504"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The csv&nbsp;Module</h1></div><div class="yui-ge"><div class="yui-u first"><p>(New in 2.3) The <b>csv</b> module is used to read data files in
the CSV (comma-separated values) format, as used by Microsoft Excel
and many other applications.  A CSV file contains a number of rows,
each containing a number of columns, usually separated by commas.  An
example:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide">
Title,Release Date,Director
And Now For Something Completely Different,1971,Ian MacNaughton
Monty Python And The Holy Grail,1975,Terry Gilliam and Terry Jones
Monty Python's Life Of Brian,1979,Terry Jones
Monty Python Live At The Hollywood Bowl,1982,Terry Hughes
Monty Python's The Meaning Of Life,1983,Terry Jones
</pre></div><div class="yui-ge"><div class="yui-u first"><p>To read this file, you could simply loop over the lines, and use the
<b>split</b> method to get the individual columns:</p><pre>
for line in open("samples/sample.csv"):
    title, year, director = line.split(",")
    print year, title
</pre><p>Using the <b>csv</b> module instead, you can write:</p><pre>
# File: csv-example-1.py

import csv

reader = csv.reader(open("samples/sample.csv"))

for title, year, director in reader:
    print year, title
</pre><pre>
$ python csv-example-1.py
Release Date Title
1971 And Now For Something Completely Different
1975 Monty Python And The Holy Grail
1979 Monty Python's Life Of Brian
1982 Monty Python Live At The Hollywood Bowl
1983 Monty Python's The Meaning Of Life
</pre><p>The <b>reader</b> function takes sequence or an iterable file object,
and returns an iterator.</p><p>
</p><p>The parser used by the <b>csv</b> module does a lot more than just
splitting strings on commas.  It handles quoted values and line
endings properly, so you can read files that contain arbitrary strings
(including strings that contain commas).  It&#8217;s also configurable; you
can create and register &#8220;dialect&#8221; descriptors, and use them to read
different CSV flavours.</p><p>For example, here&#8217;s how to read the Swedish variant of CSV, which
uses semicolons instead of commas:</p><pre>
# File: csv-example-2.py

import csv

class SKV(csv.excel):
    # <i>like excel, but uses semicolons</i>
    delimiter = ";"

csv.register_dialect("SKV", SKV)

reader = csv.reader(open("samples/sample.skv"), "SKV")

for title, year, director in reader:
    print year, title
</pre><p>Note that if you only need to modify a few parameters, you can pass
them as keyword arguments to the <b>reader</b> function:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide">
# File: csv-example-3.py

import csv

reader = csv.reader(open("samples/sample.skv"), delimiter=";")

for title, year, director in reader:
    print year, title
</pre></div><div class="yui-ge"><div class="yui-u first"><p>The module can also be used to create CSV files.  The <b>writer</b>
function creates a CSV writer object, which converts values to strings
and escapes them properly.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide">
# File: csv-example-4.py

import csv
import sys

data = [
    ("And Now For Something Completely Different", 1971, "Ian MacNaughton"),
    ("Monty Python And The Holy Grail", 1975, "Terry Gilliam, Terry Jones"),
    ("Monty Python's Life Of Brian", 1979, "Terry Jones"),
    ("Monty Python Live At The Hollywood Bowl", 1982, "Terry Hughes"),
    ("Monty Python's The Meaning Of Life", 1983, "Terry Jones")
]

writer = csv.writer(sys.stdout)

for item in data:
    writer.writerow(item)
</pre></div><div class="yui-g"><pre class="wide wide">
$ python csv-example-4.py
And Now For Something Completely Different,1971,Ian MacNaughton
Monty Python And The Holy Grail,1975,"Terry Gilliam, Terry Jones"
Monty Python's Life Of Brian,1979,Terry Jones
Monty Python Live At The Hollywood Bowl,1982,Terry Hughes
Monty Python's The Meaning Of Life,1983,Terry Jones
</pre></div><div class="yui-ge"><div class="yui-u first"><p>If you have data in a sequence (or any other iterable object), you
can use the <b>writerows</b> method instead:</p><pre>
writer = csv.writer(sys.stdout)
writer.writerows(data)
</pre><p>The <b>writer</b> function also supports different dialects.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
