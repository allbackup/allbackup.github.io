<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The with&nbsp;statement</title><script type="text/javascript">effbot_page_id=1786;</script></head><body><div id="doc2" class="yui-t2"><div id="hd"><!-- header --></div><!-- hd --><div id="bd"><!-- body --><p class="note" style="text-align: center"><strong>

We're back after a server migration that caused effbot.org to fall
over a bit harder than expected.  Expect some glitches.

</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The with&nbsp;statement</h1></div><!-- yui-g --><body><p>New in version 2.5.</p>
<p>The <strong>with</strong> statement is used to wrap the execution of a block
with functionality provided by a separate guard object (see
<a href="context-managers.htm"><strong>context-managers</strong></a>).  This allows common try-except-finally
usage patterns to be encapsulated for convenient reuse.</p>
<p>To enable in 2.5:</p>
<blockquote>
<p><strong>from __future__ import with_statement</strong></p>
</blockquote>
<p>Syntax:</p>
<blockquote>
<p><strong>with</strong> <em><a href="syntax-expression">expression</a></em> [<strong>as</strong> <em><a href="syntax-target">target</a></em>] <strong>:</strong> <br />
  &#160;&#160;&#160;&#160;<em><a href="syntax-suite">suite</a></em></p>
</blockquote>
<p>or:</p>
<blockquote>
<p><strong>with</strong> <em><a href="syntax-expression">expression</a></em> [<strong>as</strong> <strong>(</strong> <em><a href="syntax-target">target list</a></em> <strong>)</strong> ] <strong>:</strong> <br />
  &#160;&#160;&#160;&#160;<em><a href="syntax-suite">suite</a></em></p>
</blockquote>
<p>The expression is evaluated once, and should yield a <em>context guard</em>,
which is used to control execution of the suite.  The guard can provide
execution-specific data, which is assigned to the target (or target list).</p>
<p>Note that if a target list is used instead of a single target, the list
must be parenthesized.</p>
<p>Here&#8217;s a more detailed description:</p>
<ol>
<li>The context expression is evaluated, to obtain a <em>context guard</em>.</li>
<li>The guard object&#8217;s <a href="__enter__.htm"><strong>__enter__</strong></a> method is invoked to obtain the <em>context
entry value</em>.</li>
<li>The context entry value is assigned to the target or target list, if present.</li>
<li>The suite is executed.</li>
<li>No matter what happens in the suite, the guard object&#8217;s <a href="__exit__.htm"><strong>__exit__</strong></a> method
is invoked. If an exception caused the suite to be exited, its type,
value, and traceback are passed as arguments to <a href="__exit__.htm"><strong>__exit__</strong></a>. Otherwise,
three <a href="None.htm"><strong>None</strong></a> arguments are supplied.</li>
</ol>
<p>If the suite was exited due to an exception, and the return value from
the <a href="__exit__.htm"><strong>__exit__</strong></a> method is false, the exception is reraised.  If
the return value is true, the exception is suppressed, and execution
continues with the statement following the <strong>with</strong> statement.</p>
<p>If the suite was exited for any reason other than an exception (e.g.,
by <q>falling off</q> the end of the suite, or via <a href="return.htm"><strong>return</strong></a>, <a href="break.htm"><strong>break</strong></a>,
or <a href="continue.htm"><strong>continue</strong></a>), the return value from <a href="__exit__.htm"><strong>__exit__</strong></a> is ignored, and
execution proceeds at the normal location for the kind of exit that was
taken.</p>
<p><strong>Note:</strong> The <strong>with</strong> statement guarantees that if the <a href="__enter__.htm"><strong>__enter__</strong></a>
method returns without an error, then <a href="__exit__.htm"><strong>__exit__</strong></a> will always be
called. Thus, if an error occurs during the assignment to the target
list, it will be treated the same as an error occurring within the
suite would be. See step 5 above.</p>
<p><strong>Note:</strong> In Python 2.5, the <strong>with</strong> statement is only allowed when the
<a href="with_statement.htm"><strong>with_statement</strong></a> feature has been enabled. It will always be enabled
in Python 2.6. This <a href="__future__.htm"><strong>__future__</strong></a> import statement can be used to
enable the feature (see <a href="future.htm"><strong>future</strong></a>):</p>
<pre><code>from __future__ import with_statement
</code></pre>
<p><strong>See Also:</strong> <a href="http://www.python.org/peps/pep-0343.html">PEP 0343, <em>The &#8220;with&#8221; statement</em></a>
The specification, background, and examples for the Python with statement.</p></body><div class="yui-g"></div><!-- yui-g --></div><!-- content --></div><!-- yui-b --></div><!-- yui-main --><div class="yui-b"><div id='menu'></div><!-- menu --></div><!-- yui-b --></div><!-- bd --><div id="ft"><!-- footer --></div><!-- ft --></div><!-- doc --><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
