<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Tkinter Tricks: Using WCK-Style Controllers in&nbsp;Tkinter</title></head><body data-page-id="300"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Tkinter Tricks: Using WCK-Style Controllers in&nbsp;Tkinter</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | November 2005 | Originally posted to <a href="http://online.effbot.org">online.effbot.org</a></p><p>In an earlier article, I described <a href="wck-trackers.htm">the
<b>Controller</b> mechanism</a> in <a href="wck.htm">the Widget Construction Kit</a> (WCK).</p><p>The WCK uses different classes for code that draws a widget, and
code that implements interactive behaviour.  The main widget class
is responsible for drawing the widget, but all interactive behaviour
is provided by a separate <i>controller</i> class.</p><p>The
<a href="tkcontroller.htm"><b>tkController</b>
module</a> provides a similar mechanism for plain Tkinter.  Just like
in the WCK, you subclass the <b>Controller</b> class, and manipulate
the target widget via attributes on the <b>event</b> instance.  Once
you have a working controller, you can attach it to any compatible
widget.</p><p>To see this in action, here&#8217;s a Tkinter version of the first example
from the earlier article.  Here, the <b>MyController</b> class responds
to button clicks by printing a message to the console.</p><pre class="python">
<span class="pykeyword">from</span> tkController <span class="pykeyword">import</span> Controller
<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> Canvas

<span class="pykeyword">class</span> <span class="pyclass">ClickController</span>(Controller):
    <span class="pykeyword">def</span> <span class="pyfunction">create</span>(self, bind):
        bind(<span class="pystring">"&lt;Button-1&gt;"</span>, self.click)
    <span class="pykeyword">def</span> <span class="pyfunction">click</span>(self, event):
        <span class="pykeyword">print</span> <span class="pystring">"CLICK!"</span>, event.x, event.y

<span class="pycomment"># try it out</span>
canvas = Canvas()
canvas.pack()

controller = ClickController()
controller.install(canvas)

canvas.mainloop()</pre><p>Since this controller don&#8217;t really depend on the widget itself,
you can attach it to any Tkinter widget.  To track mouse movements
and clicks, a <b>Frame</b> widget works as well as a <b>Canvas</b>.

</p><p>Here&#8217;s a more advanced example, based on the WCK
<b>LineController</b> example.  This controller adds a line item to
the canvas when you press the mouse button over the canvas, updates it
as long as you keep the button pressed, and redraws it as a 2-pixel
wide red line when you&#8217;re done:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> Canvas
<span class="pykeyword">from</span> tkController <span class="pykeyword">import</span> Controller

<span class="pykeyword">class</span> <span class="pyclass">LineController</span>(Controller):
    <span class="pykeyword">def</span> <span class="pyfunction">create</span>(self, bind):
        bind(<span class="pystring">"&lt;ButtonPress-1&gt;"</span>, self.press)
        bind(<span class="pystring">"&lt;B1-Motion&gt;"</span>, self.motion)
        bind(<span class="pystring">"&lt;ButtonRelease-1&gt;"</span>, self.release)
    <span class="pykeyword">def</span> <span class="pyfunction">press</span>(self, event):
        self.anchor = event.x, event.y
        self.item = None
    <span class="pykeyword">def</span> <span class="pyfunction">motion</span>(self, event):
        xy = self.anchor + (event.x, event.y)
        <span class="pykeyword">if</span> self.item <span class="pykeyword">is</span> None:
            self.item = event.widget.create_line(xy)
        <span class="pykeyword">else</span>:
            event.widget.coords(self.item, xy)
    <span class="pykeyword">def</span> <span class="pyfunction">release</span>(self, event):
        xy = self.anchor + (event.x, event.y)
        event.widget.coords(self.item, xy)
        event.widget.itemconfig(self.item, fill=<span class="pystring">"red"</span>, width=2)
        <span class="pykeyword">print</span> <span class="pystring">"LINE"</span>, xy

<span class="pycomment"># try it out</span>
canvas = Canvas(bg=<span class="pystring">"white"</span>)
canvas.pack()

canvas_controller = LineController()
canvas_controller.install(canvas)

canvas.mainloop()</pre></div><div class="yui-ge"><div class="yui-u first"><p>This controller uses the <b>event.widget</b> attribute to locate
the current widget.  This lets you use the same controller instance
in multiple controllers:</p><pre class="python">
canvas1 = Canvas(bg=<span class="pystring">"white"</span>)
canvas1.pack(side=<span class="pystring">"left"</span>)

canvas2 = Canvas(bg=<span class="pystring">"white"</span>)
canvas2.pack(side=<span class="pystring">"left"</span>)

canvas_controller = LineController()
canvas_controller.install(canvas1)
canvas_controller.install(canvas2)

canvas.mainloop()</pre><p>This controller uses <b>Canvas</b>-specific methods to do the drawing,
which limits its use to Canvas widgets.  While it may be overkill in this
case, you can reduce the coupling somewhat by defining a more &#8220;abstract&#8221;
interface, and move more of the implementation over to the widget itself.</p><p>Here&#8217;s a slightly refactored version of the <b>LineController</b>,
where the controller uses <b>rubberband_line</b> and <b>add_line</b>
methods to do the drawing, and a <b>Canvas</b> subclass is used to
provide the actual implementation.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> Canvas
<span class="pykeyword">from</span> tkController <span class="pykeyword">import</span> Controller

<span class="pykeyword">class</span> <span class="pyclass">LineController</span>(Controller):
    <span class="pykeyword">def</span> <span class="pyfunction">create</span>(self, bind):
        bind(<span class="pystring">"&lt;ButtonPress-1&gt;"</span>, self.press)
        bind(<span class="pystring">"&lt;B1-Motion&gt;"</span>, self.motion)
        bind(<span class="pystring">"&lt;ButtonRelease-1&gt;"</span>, self.release)
    <span class="pykeyword">def</span> <span class="pyfunction">press</span>(self, event):
        self.anchor = event.x, event.y
    <span class="pykeyword">def</span> <span class="pyfunction">motion</span>(self, event):
        event.widget.rubberband_line(self.anchor, (event.x, event.y))
    <span class="pykeyword">def</span> <span class="pyfunction">release</span>(self, event):
        event.widget.add_line(self.anchor, (event.x, event.y))

<span class="pykeyword">class</span> <span class="pyclass">MyCanvas</span>(Canvas):
    item = None
    <span class="pykeyword">def</span> <span class="pyfunction">rubberband_line</span>(self, start, end):
        <span class="pykeyword">if</span> self.item <span class="pykeyword">is</span> None:
            self.item = self.create_line(start, end)
        self.coords(self.item, start + end)
    <span class="pykeyword">def</span> <span class="pyfunction">add_line</span>(self, start, end):
        self.delete(self.item); self.item = None
        self.create_line(start, end, fill=<span class="pystring">"red"</span>, width=2)

<span class="pycomment"># try it out</span>
canvas = MyCanvas(bg=<span class="pystring">"white"</span>)
canvas.pack()

canvas_controller = LineController()
canvas_controller.install(canvas)

canvas.mainloop()</pre></div><div class="yui-ge"><div class="yui-u first"><p>With this design, you can use the same controller on different kind
of widgets.  The new methods might also be useful for other tools.</p><p>The earlier article also discussed the <i>tracker</i> model, which
uses multiple controllers to implement more complex tool behaviour.
I&#8217;ll get back to this in a later article.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
