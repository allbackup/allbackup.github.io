
@@module fileinput

<h1>fileinput&#8212;Iterate over lines from multiple input streams</h1>

<p>This module implements a helper class and functions to quickly write
a loop over standard input or a list of files.

<p>The typical use is:

<pre>
import fileinput
for line in fileinput.input():
    process(line)
</pre>


<p>This iterates over the lines of all files listed in {@code
sys.argv[1:]}, defaulting to {@code sys.stdin} if the list is empty. If
a filename is {@code '-'}, it is also replaced by {@code sys.stdin}. To
specify an alternative list of filenames, pass it as the first argument
to {@link input}. A single file name is also allowed.

<p>All files are opened in text mode. If an I/O error occurs during
opening or reading a file, {@link exceptions.IOError} is raised.

<p>If {@code sys.stdin} is used more than once, the second and further
use will return no lines, except perhaps for interactive use, or if it
has been explicitly reset (e.g. using {@code sys.stdin.seek(0)}).

<p>Empty files are opened and immediately closed; the only time their
presence in the list of filenames is noticeable at all is when the last
file opened is empty.

<p>It is possible that the last line of a file does not end in a newline
character; lines are returned including the trailing newline when it is
present.

<p>The following function is the primary interface of this module:

@@function input([files[, inplace[, backup]]])

<p>Create an instance of the {@link FileInput} class. The instance will
be used as global state for the functions of this module, and is also
returned to use during iteration. The parameters to this function will
be passed along to the constructor of the {@link FileInput} class.

@@text 

<p>The following functions use the global state created by {@link
input}; if there is no active state, {@link exceptions.RuntimeError} is
raised.

@@function filename()

<p>Return the name of the file currently being read. Before the first
line has been read, returns {@link None}.

@@function lineno()

<p>Return the cumulative line number of the line that has just been
read. Before the first line has been read, returns {@code 0}. After the
last line of the last file has been read, returns the line number of
that line.

@@function filelineno()

<p>Return the line number in the current file. Before the first line has
been read, returns {@code 0}. After the last line of the last file has
been read, returns the line number of that line within the file.

@@function isfirstline()

<p>Returns true if the line just read is the first line of its file,
otherwise returns false.

@@function isstdin()

<p>Returns true if the last line was read from {@code sys.stdin},
otherwise returns false.

@@function nextfile()

<p>Close the current file so that the next iteration will read the first
line from the next file (if any); lines not read from the file will not
count towards the cumulative line count. The filename is not changed
until after the first line of the next file has been read. Before the
first line has been read, this function has no effect; it cannot be used
to skip the first file. After the last line of the last file has been
read, this function has no effect.

@@function close()

<p>Close the sequence.

@@text 

<p>The class which implements the sequence behavior provided by the
module is available for subclassing as well:

@@class FileInput([files[, inplace[, backup]]])

<p>Class {@link FileInput} is the implementation; its methods {@link
filename}, {@link lineno}, {@link fileline}, {@link isfirstline}, {@link
isstdin}, {@link nextfile} and {@link close} correspond to the functions
of the same name in the module. In addition it has a {@link readline}
method which returns the next input line, and a {@link __getitem__}
method which implements the sequence behavior. The sequence must be
accessed in strictly sequential order; random access and {@link
readline} cannot be mixed.

@@text 

<p>Optional in-place filtering: if the keyword argument {@var inplace}=1
is passed to {@link input} or to the {@link FileInput} constructor, the
file is moved to a backup file and standard output is directed to the
input file (if a file of the same name as the backup file already
exists, it will be replaced silently). This makes it possible to write a
filter that rewrites its input file in place. If the keyword argument
{@var backup}='.&ltsome extension>' is also given, it specifies the
extension for the backup file, and the backup file remains around; by
default, the extension is {@code '.bak'} and it is deleted when the
output file is closed. In-place filtering is disabled when standard
input is read.

<p>Caveat: The current implementation does not work for MS-DOS 8+3
filesystems.
