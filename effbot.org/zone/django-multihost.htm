<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Serving Multiple Hosts from a Single Django&nbsp;Instance</title></head><body data-page-id="42"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Serving Multiple Hosts from a Single Django&nbsp;Instance</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | December 2006</p><p>The <a href="django.htm">Django</a> framework has excellent support for
running multiple sites on a single Django installation, via the
<s><a href="http://www.djangoproject.com/documentation/sites/">sites framework</a></s> (dead link).
This framework is based on a global site identifier setting (SITE_ID),
which is then used by different components to distinguish between data
for different sites in the database.</p><p>However, SITE_ID is a global setting, so the site framework requires
you to run multiple instances of Django; at least one for each site.</p><p>This article describes a more light-weight approach, which lets you
serve multiple distinct host names from a <i>single</i> instance, by
switching between different URL configurations on the fly.  This approach
doesn&#8217;t provide full separation, so it&#8217;s mostly usable for servering
related material under different URL:s, such as a company site with one
or more product subsites, etc.</p><h3 id="patch">Patching the Django code base&#160;<a class="nav" href="#patch" title="bookmark!">#</a></h3><p class="note"><b>Update:</b>
This patch was added to the Django trunk in revision 
<a href="http://code.djangoproject.com/changeset/4237">4237</a>.</p><p>First, a simple patch.  This allows a middleware component to
specify a request-specific URL configuration, instead of always having
to rely on the global ROOT_URLCONF setting:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide">
Index: django/core/handlers/base.py
===================================================================
--- django/core/handlers/base.py	(revision 4234)
+++ django/core/handlers/base.py	(working copy)
@@ -60,7 +60,10 @@
             if response:
                 return response
 
-        resolver = urlresolvers.RegexURLResolver(r'^/', settings.ROOT_URLCONF)
+        # Get urlconf from request object, if available.  Otherwise use default.
+        urlconf = getattr(request, "urlconf", settings.ROOT_URLCONF)
+
+        resolver = urlresolvers.RegexURLResolver(r'^/', urlconf)
         try:
             callback, callback_args, callback_kwargs = resolver.resolve(request.path)
 
</pre></div><div class="yui-ge"><div class="yui-u first"><h3 id="middleware">The MultiHost Middleware&#160;<a class="nav" href="#middleware" title="bookmark!">#</a></h3><p>To set a host specific URL configuration, you need to add a simple
middleware component.  Here&#8217;s the code:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pycomment"># File: multihost.py</span>

<span class="pycomment">##</span>
<span class="pycomment"># A simple middleware component that lets you use a single Django</span>
<span class="pycomment"># instance to server multiple distinct hosts.</span>
<span class="pycomment">##</span>

<span class="pykeyword">from</span> django.conf <span class="pykeyword">import</span> settings
<span class="pykeyword">from</span> django.utils.cache <span class="pykeyword">import</span> patch_vary_headers

<span class="pykeyword">class</span> <span class="pyclass">MultiHostMiddleware</span>:

    <span class="pykeyword">def</span> <span class="pyfunction">process_request</span>(self, request):
        <span class="pykeyword">try</span>:
            host = request.META[<span class="pystring">"HTTP_HOST"</span>]
            <span class="pykeyword">if</span> host[-3:] == <span class="pystring">":80"</span>:
                host = host[:-3] <span class="pycomment"># ignore default port number, if present</span>
            request.urlconf = settings.HOST_MIDDLEWARE_URLCONF_MAP[host]
        <span class="pykeyword">except</span> KeyError:
            <span class="pykeyword">pass</span> <span class="pycomment"># use default urlconf (settings.ROOT_URLCONF)</span>

    <span class="pykeyword">def</span> <span class="pyfunction">process_response</span>(self, request, response):
        <span class="pykeyword">if</span> getattr(request, <span class="pystring">"urlconf"</span>, None):
            patch_vary_headers(response, (<span class="pystring">'Host'</span>,))
        <span class="pykeyword">return</span> response</pre></div><div class="yui-ge"><div class="yui-u first"><p>Here, the <b>process_request</b> hook will look up the host name in
the global HOST_MIDDLEWARE_URLCONF_MAP dictionary (more on this
below), and use the corresponding value instead of ROOT_URLCONF for
this request.  If the host is not found, the default ROOT_URLCONF
value is used instead.

</p><p>The <b>process_response</b> hook is used to make caching work; it
tells Django that the output from this server will depend on the HTTP
Host header field.

<h3 id="configuation">Configuration&#160;<a class="nav" href="#configuation" title="bookmark!">#</a></h3></p><p>To enable multihost support, you need to do the following:

<ul><li><p>Add an URL configuration file for each application.</p></li><li><p>Add a HOST_MIDDLEWARE_URLCONF_MAP dictionary to the
<b>settings.py</b> file, which maps host names to the URL
configuration files you just created.</p></li><li><p>Add a reference to the MultiHost middleware to the
MIDDLEWARE_CLASSES list.  This middleware must be placed <i>after</i>
the cache middleware, if present.</p></li></ul></p><p>For example, if you&#8217;re going to serve <b>company.com</b> and
<b>blog.example.com</b>, you can add <b>company_urls.py</b> and
<b>blog_urls.py</b> files to your application directory, and add the
following entry to your <b>settings.py</b> file:

<pre class="python">
<span class="pycomment"># File: settings.py</span>

...

HOST_MIDDLEWARE_URLCONF_MAP = {
    <span class="pystring">"company.com"</span>: <span class="pystring">"mydjango.app.company_urls"</span>,
    <span class="pystring">"blog.example.com"</span>: <span class="pystring">"mydjango.app.blog_urls"</span>,
}

...</pre><h3 id="errors">Error Handling&#160;<a class="nav" href="#errors" title="bookmark!">#</a></h3></p><p>Note that Django will still use the default mechanisms to handle
404 and 500 errors for all sites.  If you want to use different
templates for your sites, set the <b>handler404</b> and
<b>handler500</b> variables in your URL configuration files:</p><pre class="python">
<span class="pycomment"># File: company_urls.py</span>

handler404 = <span class="pystring">"mydjango.app.company_view.handler404"</span>
handler500 = <span class="pystring">"mydjango.app.company_view.handler500"</span>

urlpatterns = (
   ...
)</pre></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pycomment"># File: company_view.py</span>

<span class="pykeyword">from</span> django.views.defaults <span class="pykeyword">import</span> page_not_found, server_error

<span class="pykeyword">def</span> <span class="pyfunction">handler404</span>(request):
    <span class="pykeyword">return</span> page_not_found(request, <span class="pystring">"company_404.html"</span>)

<span class="pykeyword">def</span> <span class="pyfunction">handler500</span>(request):
    <span class="pykeyword">return</span> server_error(request, <span class="pystring">"company_500.html"</span>)</pre></div><div class="yui-ge"><div class="yui-u first"><p>The custom handlers used in this example simply call Django&#8217;s
default handlers, with custom templates.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><ul><li><a href="#patch">Patching the Django code base</a></li><li><a href="#middleware">The MultiHost Middleware</a></li><li><a href="#configuation">Configuration</a></li><li><a href="#errors">Error Handling</a></li></ul></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
