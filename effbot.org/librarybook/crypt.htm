<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The crypt&nbsp;module</title></head><body data-page-id="502"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The crypt&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>(Optional). This module implements one-way DES encryption. Unix
systems use this encryption algorithm to store passwords, and this
module is really only useful to generate or check such
passwords.</p><p>To encrypt a password, call <b>crypt.crypt</b> with the
password string, plus a <span>&#8220;salt&#8221;</span>, which should consist
of two random characters. You can now throw away the actual
password, and just store the encrypted string somewhere.</p><div class="example">
<b style="example">Example: Using the crypt module</b>
<pre>
# File: <a href="crypt/crypt-example-1.py">crypt-example-1.py</a>

import crypt

import random, string

def getsalt(chars = string.letters + string.digits):
    # <i>generate a random 2-character 'salt'</i>
    return random.choice(chars) + random.choice(chars)

print crypt.crypt("bananas", getsalt())

</pre><pre class="computeroutput" moreinfo="NONE">
$ python crypt-example-1.py
'py8UGrijma1j6'
</pre></div><p>To verify a given password, encrypt the new password using the
two first characters from the encrypted string as the salt. If the
result matches the encrypted string, the password is valid. The
following example uses the <b><a href="pwd.htm">pwd</a></b> module
to fetch the encrypted password for a given user.</p><div class="example">
<b style="example">Example: Using the crypt module for authentication</b>
<pre>
# File: <a href="crypt/crypt-example-2.py">crypt-example-2.py</a>

import pwd, crypt

def login(user, password):
    "Check if user would be able to login using password"
    try:
        pw1 = pwd.getpwnam(user)[1]
        pw2 = crypt.crypt(password, pw1[:2])
        return pw1 == pw2
    except KeyError:
        return 0 # <i>no such user</i>

user = raw_input("username:")
password = raw_input("password:")

if login(user, password):
    print "welcome", user
else:
    print "login failed"
</pre></div><p>For other ways to implement authentication, see the description
of the <b><a href="md5.htm">md5</a></b> module.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
