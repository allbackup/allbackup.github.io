
@@module shlex

<h1>shlex&#8212;Simple lexical analysis</h1>

<p>New in version 1.5.2.

<p>The {@link shlex} class makes it easy to write lexical analyzers for
simple syntaxes resembling that of the Unix shell. This will often be
useful for writing minilanguages, (for example, in run control files for
Python applications) or for parsing quoted strings.

<p>The {@link shlex} module defines the following functions:

@@function split(s[, comments])

<p>Split the string {@var s} using shell-like syntax. If {@var comments}
is {@code False} (the default), the parsing of comments in the given
string will be disabled (setting the {@link commenters} member of the
{@link shlex} instance to the empty string). This function operates in
POSIX mode.
<blockquote>
@since New in
version 2.3. <br />
</blockquote>

@@text 

<p>The {@link shlex} module defines the following class:

@@class shlex([instream[, infile[, posix]]])

<p>A {@link shlex} instance or subclass instance is a lexical analyzer
object. The initialization argument, if present, specifies where to read
characters from. It must be a file-/stream-like object with {@link read}
and {@link readline} methods, or a string (strings are accepted since
Python 2.3). If no argument is given, input will be taken from {@code
sys.stdin}. The second optional argument is a filename string, which
sets the initial value of the {@link infile} member. If the {@var
instream} argument is omitted or equal to {@code sys.stdin}, this second
argument defaults to &#8220;stdin&#8221;. The {@var posix} argument was
introduced in Python 2.3, and defines the operational mode. When {@var
posix} is not true (default), the {@link shlex} instance will operate in
compatibility mode. When operating in POSIX mode, {@link shlex} will try
to be as close as possible to the POSIX shell parsing rules. See section
{@link shlex-objects.html#shlex-objects}.

@@text 

@see 
{@link ConfigParser Module ConfigParser}

Parser for configuration files similar to the Windows .ini files.

<h2>shlex Objects</h2>

<p>A {@link shlex} instance has the following methods:

@@method shlex.get_token()

<p>Return a token. If tokens have been stacked using {@link push_token},
pop a token off the stack. Otherwise, read one from the input stream. If
reading encounters an immediate end-of-file, {@link self.eof} is
returned (the empty string ({@code &#8221;}) in non-POSIX mode, and
{@code None} in POSIX mode).

@@method shlex.push_token(str)

<p>Push the argument onto the token stack.

@@method shlex.read_token()

<p>Read a raw token. Ignore the pushback stack, and do not interpret
source requests. (This is not ordinarily a useful entry point, and is
documented here only for the sake of completeness.)

@@method shlex.sourcehook(filename)

<p>When {@link shlex} detects a source request (see {@link source}
below) this method is given the following token as argument, and
expected to return a tuple consisting of a filename and an open
file-like object.

<p>Normally, this method first strips any quotes off the argument. If
the result is an absolute pathname, or there was no previous source
request in effect, or the previous source was a stream (such as {@code
sys.stdin}), the result is left alone. Otherwise, if the result is a
relative pathname, the directory part of the name of the file
immediately before it on the source inclusion stack is prepended (this
behavior is like the way the C preprocessor handles {@code #include
"file.h"}).

<p>The result of the manipulations is treated as a filename, and
returned as the first component of the tuple, with {@link open} called
on it to yield the second component. (Note: this is the reverse of the
order of arguments in instance initialization!)

<p>This hook is exposed so that you can use it to implement directory
search paths, addition of file extensions, and other namespace hacks.
There is no corresponding `close' hook, but a shlex instance will call
the {@link close} method of the sourced input stream when it returns
EOF.

<p>For more explicit control of source stacking, use the {@link
push_source} and {@link pop_source} methods.

@@method shlex.push_source(stream[, filename])

<p>Push an input source stream onto the input stack. If the filename
argument is specified it will later be available for use in error
messages. This is the same method used internally by the {@link
sourcehook} method.
<blockquote>
@since New in version 2.1. <br />
</blockquote>

@@method shlex.pop_source()

<p>Pop the last-pushed input source from the input stack. This is the
same method used internally when the lexer reaches EOF on a stacked
input stream.
<blockquote>
@since New in version
2.1. <br />
</blockquote>

@@method shlex.error_leader([file[, line]])

<p>This method generates an error message leader in the format of a Unix
C compiler error label; the format is {@code '"%s", line %d: '}, where
the "{@code %s}" is replaced with the name of the current source file
and the "{@code %d}" with the current input line number (the optional
arguments can be used to override these).

<p>This convenience is provided to encourage {@link shlex} users to
generate error messages in the standard, parseable format understood by
Emacs and other Unix tools.

@@text 

<p>Instances of {@link shlex} subclasses have some public instance
variables which either control lexical analysis or can be used for
debugging:

@@attribute shlex.commenters

<p>The string of characters that are recognized as comment beginners.
All characters from the comment beginner to end of line are ignored.
Includes just "{@code #}" by default.

@@attribute shlex.wordchars

<p>The string of characters that will accumulate into multi-character
tokens. By default, includes all ASCII alphanumerics and underscore.

@@attribute shlex.whitespace

<p>Characters that will be considered whitespace and skipped. Whitespace
bounds tokens. By default, includes space, tab, linefeed and
carriage-return.

@@attribute shlex.escape

<p>Characters that will be considered as escape. This will be only used
in POSIX mode, and includes just "{@code \}" by default.
<blockquote>
@since New
in version 2.3. <br />
</blockquote>

@@attribute shlex.quotes

<p>Characters that will be considered string quotes. The token
accumulates until the same quote is encountered again (thus, different
quote types protect each other as in the shell.) By default, includes
ASCII single and double quotes.

@@attribute shlex.escapedquotes

<p>Characters in {@link quotes} that will interpret escape characters
defined in {@link escape}. This is only used in POSIX mode, and includes
just "{@code "}" by default.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@attribute shlex.whitespace_split

<p>If {@link True}, tokens will only be split in whitespaces. This is
useful, for example, for parsing command lines with {@link shlex},
getting tokens in a similar way to shell arguments.
<blockquote>
@since New in version
2.3. <br />
</blockquote>

@@attribute shlex.infile

<p>The name of the current input file, as initially set at class
instantiation time or stacked by later source requests. It may be useful
to examine this when constructing error messages.

@@attribute shlex.instream

<p>The input stream from which this {@link shlex} instance is reading
characters.

@@attribute shlex.source

<p>This member is {@link None} by default. If you assign a string to it,
that string will be recognized as a lexical-level inclusion request
similar to the "{@code source}" keyword in various shells. That is, the
immediately following token will opened as a filename and input taken
from that stream until EOF, at which point the {@link close} method of
that stream will be called and the input source will again become the
original input stream. Source requests may be stacked any number of
levels deep.

@@attribute shlex.debug

<p>If this member is numeric and {@code 1} or more, a {@link shlex}
instance will print verbose progress output on its behavior. If you need
to use this, you can read the module source code to learn the details.

@@attribute shlex.lineno

<p>Source line number (count of newlines seen so far plus one).

@@attribute shlex.token

<p>The token buffer. It may be useful to examine this when catching
exceptions.

@@attribute shlex.eof

<p>Token used to determine end of file. This will be set to the empty
string ({@code &#8221;}), in non-POSIX mode, and to {@code None} in
POSIX mode.
<blockquote>
@since New in version
2.3. <br />
</blockquote>

@@text 

<h2>Parsing Rules</h2>

<p>When operating in non-POSIX mode, {@link shlex} will try to obey to
the following rules.
<ul>
<li>
<p>Quote characters are not recognized within words ({@code
Do"Not"Separate} is parsed as the single word {@code Do"Not"Separate});
<li>
<p>Escape characters are not recognized;
<li>
<p>Enclosing characters in quotes preserve the literal value of all
characters within the quotes;
<li>
<p>Closing quotes separate words ({@code "Do"Separate} is parsed as
{@code "Do"} and {@code Separate});
<li>
<p>If {@link whitespace_split} is {@code False}, any character not
declared to be a word character, whitespace, or a quote will be returned
as a single-character token. If it is {@link True}, {@link shlex} will
only split words in whitespaces;
<li>
<p>EOF is signaled with an empty string ({@code &#8221;});
<li>
<p>It's not possible to parse empty strings, even if quoted.
</ul>

<p>When operating in POSIX mode, {@link shlex} will try to obey to the
following parsing rules.
<ul>
<li>
<p>Quotes are stripped out, and do not separate words ({@code
"Do"Not"Separate"} is parsed as the single word {@code DoNotSeparate});
<li>
<p>Non-quoted escape characters (e.g. "{@code \}") preserve the literal
value of the next character that follows;
<li>
<p>Enclosing characters in quotes which are not part of {@link
escapedquotes} (e.g. "{@code '}") preserve the literal value of all
characters within the quotes;
<li>
<p>Enclosing characters in quotes which are part of {@link
escapedquotes} (e.g. "{@code "}") preserves the literal value of all
characters within the quotes, with the exception of the characters
mentioned in {@link escape}. The escape characters retain its special
meaning only when followed by the quote in use, or the escape character
itself. Otherwise the escape character will be considered a normal
character.
<li>
<p>EOF is signaled with a {@code None} value;
<li>
<p>Quoted empty strings ({@code &#8221;}) are allowed;
</ul>
