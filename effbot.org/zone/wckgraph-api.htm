<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The wckgraph&nbsp;Module</title></head><body data-page-id="366"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The wckgraph&nbsp;Module</h1></div><div class="yui-ge"><div class="yui-u first"><p>The <b>wckgraph</b> package is a simple graph library for the WCK
toolkit.  To display a diagram, first create a <b>GraphWidget</b>
widget, and then add graph components to the diagram.
</p><p>
The following example draws a simple line diagram:
<pre>
graph = wckgraph.GraphWidget(root)

data = xdata, ydata

graph.add(wckgraph.Axes(data))
graph.add(wckgraph.LineGraph(data))
</pre>

The <b>Axes</b> component calculates a suitable viewport based on
the data, and also draws the axis (including labels).  The
<b>LineGraph</b> component draws a line diagram into that viewport.
You can use options to configure the axes and the graph components.
</p><p>
For details, see below.
</p><h2>Module Contents</h2><dl><dt><b>_DrawContext(widget, bbox)</b> (class) [<a href="#_DrawContext-class">#</a>]</dt><dd>
<p>(Internal) Drawing context.</p><p>For more information about this class, see <a href="#_DrawContext-class"><i>The _DrawContext Class</i></a>.</p></dd>
<dt><b>AreaGraph(data, **options)</b> (class) [<a href="#AreaGraph-class">#</a>]</dt><dd>
<p>Area plot.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
<dt><i>brush=</i></dt><dd>
Brush object.</dd>
</dl><br />
<p>For more information about this class, see <a href="#AreaGraph-class"><i>The AreaGraph Class</i></a>.</p></dd>
<dt><b>Axes(data=None, **options)</b> (class) [<a href="#Axes-class">#</a>]</dt><dd>
<p>Standard axes handling.</p><dl><dt><i>data</i></dt><dd>
Graph data.  If given, the class calculates the
    extent from the actual graph values.  If not given, the
    extent is taken from the <b>extent</b> option.
</dd>
<dt><i>**options</i></dt><dd>
Axes options.</dd>
<dt><i>extent=</i></dt><dd>
Graph extent.</dd>
<dt><i>grid=</i></dt><dd>
Grid pen.  If given, this should be a <a class="link" href="#Pen-class"><b>Pen</b></a>
    object.
</dd>
<dt><i>xaxis=</i></dt><dd>
Where to draw the x-axis.  Can be &#8220;bottom&#8221; or
    &#8220;none&#8221;.  Default is &#8220;bottom&#8221;.</dd>
<dt><i>yaxis=</i></dt><dd>
Where to draw the y-axis.  Can be one of &#8220;left&#8221;,
    &#8220;right&#8221;, &#8220;both&#8221;, or &#8220;none&#8221;.  Default is &#8220;left&#8221;.</dd>
<dt><i>xoffset=</i></dt><dd>
Distance between the x-axis and the graph canvas.
    Defaults to 0.</dd>
<dt><i>yoffset=</i></dt><dd>
Distance between the y-axis and the graph canvas.
    Defaults to 0.</dd>
</dl><br />
<p>For more information about this class, see <a href="#Axes-class"><i>The Axes Class</i></a>.</p></dd>
<dt><b>BarGraph(data, **options)</b> (class) [<a href="#BarGraph-class">#</a>]</dt><dd>
<p>Simple bar plot.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).
    Both arrays should have the same length.</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
<dt><i>brush=</i></dt><dd>
Brush object to use when filling the bars.  Use
    Brush(None) to draw hollow bars.</dd>
<dt><i>pen=</i></dt><dd>
Pen object to use for the bar border.  Use Pen(None)
    to draw bars without a border.</dd>
<dt><i>barwidth=</i></dt><dd>
Relative barwidth.  Defaults to 1.0 (100%).</dd>
</dl><br />
<p>For more information about this class, see <a href="#BarGraph-class"><i>The BarGraph Class</i></a>.</p></dd>
<dt><b>Brush(color=&#8221;yellow&#8221;)</b> (class) [<a href="#Brush-class">#</a>]</dt><dd>
<p>Brush object.</p><dl><dt><i>color=</i></dt><dd>
Brush color.</dd>
</dl><br />
<p>For more information about this class, see <a href="#Brush-class"><i>The Brush Class</i></a>.</p></dd>
<dt><b>GraphWidget(master, **options)</b> (class) [<a href="#GraphWidget-class">#</a>]</dt><dd>
<p>Graph widget.</p><dl><dt><i>master</i></dt><dd>
Parent widget.</dd>
<dt><i>**options</i></dt><dd>
Widget options.</dd>
<dt><i>background=</i></dt><dd>
Widget background color.</dd>
<dt><i>font=</i></dt><dd>
Widget font.</dd>
<dt><i>foreground=</i></dt><dd>
Widget text color.</dd>
<dt><i>canvasbackground=</i></dt><dd>
Graph canvas background color.  Default
    is same as the widget background.</dd>
<dt><i>height=</i></dt><dd>
Widget height (in pixels).  Defaults to 600 pixels.</dd>
<dt><i>width=</i></dt><dd>
Widget width (in pixels).  Defaults to 400 pixels.</dd>
</dl><br />
<p>For more information about this class, see <a href="#GraphWidget-class"><i>The GraphWidget Class</i></a>.</p></dd>
<dt><b>LineGraph(data, **options)</b> (class) [<a href="#LineGraph-class">#</a>]</dt><dd>
<p>Line plot.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).
    Both arrays should have the same length, and the X array should
    be monotonically increasing (that is, xdata[i] &lt; xdata[i+1]
    should be true for the entire array).
</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
<dt><i>pen=</i></dt><dd>
Pen object to use when drawing the line.  Defaults to
    a thin black line.</dd>
<dt><i>marker=</i></dt><dd>
Marker object.  If omitted, markers are not drawn.</dd>
<dt><i>interpolation=</i></dt><dd>
Line interpolation method.  Can be one of
    &#8220;linear&#8221;, &#8220;smooth&#8221;, &#8220;stairs&#8221;, &#8220;stem&#8221; or &#8220;step&#8221;.  Defaults to
    &#8220;linear&#8221;.</dd>
</dl><br />
<p>For more information about this class, see <a href="#LineGraph-class"><i>The LineGraph Class</i></a>.</p></dd>
<dt><b>Marker(style=&#8221;circle&#8221;, color=&#8221;blue&#8221;, border=&#8221;black&#8221;, size=5)</b> (class) [<a href="#Marker-class">#</a>]</dt><dd>
<p>Marker object.</p><dl><dt><i>style=</i></dt><dd>
Marker style.  One of &#8220;circle&#8221;, &#8220;diamond&#8221;, &#8220;plus&#8221;,
    &#8220;square&#8221;, or &#8220;triangle&#8221;.  Defaults to &#8220;circle&#8221;.</dd>
<dt><i>color=</i></dt><dd>
Marker fill color.  Use None to draw just the border.</dd>
<dt><i>border=</i></dt><dd>
Marker border color.</dd>
<dt><i>size=</i></dt><dd>
Marker size (radius), in pixels.  Defaults to 5.</dd>
</dl><br />
<p>For more information about this class, see <a href="#Marker-class"><i>The Marker Class</i></a>.</p></dd>
<dt><b>Pen(color=&#8221;black&#8221;, width=1)</b> (class) [<a href="#Pen-class">#</a>]</dt><dd>
<p>Pen object.</p><dl><dt><i>color=</i></dt><dd>
Pen color.</dd>
<dt><i>width=</i></dt><dd>
Pen width.</dd>
</dl><br />
<p>For more information about this class, see <a href="#Pen-class"><i>The Pen Class</i></a>.</p></dd>
<dt><b>ScatterGraph(data, **options)</b> (class) [<a href="#ScatterGraph-class">#</a>]</dt><dd>
<p>Scatter (X-Y) plot.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).
    Both arrays should have the same length.</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
<dt><i>marker=</i></dt><dd>
Marker object.  This should be an instance of the
    <a class="link" href="#Marker-class"><b>Marker</b></a> class.  If omitted, a default marker style is used.
</dd>
</dl><br />
<p>For more information about this class, see <a href="#ScatterGraph-class"><i>The ScatterGraph Class</i></a>.</p></dd>
<dt><b>SimpleGraph(data, **options)</b> (class) [<a href="#SimpleGraph-class">#</a>]</dt><dd>
<p>Base class for simple graphs.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).
    Both arrays should have the same length.</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
</dl><br />
<p>For more information about this class, see <a href="#SimpleGraph-class"><i>The SimpleGraph Class</i></a>.</p></dd>
</dl><h2><a id="_DrawContext-class" name="_DrawContext-class">The _DrawContext Class</a></h2><dl><dt><b>_DrawContext(widget, bbox)</b> (class) [<a href="#_DrawContext-class">#</a>]</dt><dd>
<p>(Internal) Drawing context.  A fully populated instance of this
class is passed to the graph components during drawing.</p></dd>
</dl><h2><a id="AreaGraph-class" name="AreaGraph-class">The AreaGraph Class</a></h2><dl><dt><b>AreaGraph(data, **options)</b> (class) [<a href="#AreaGraph-class">#</a>]</dt><dd>
<p>Area plot.  This is similar to <a class="link" href="#LineGraph-class"><b>LineGraph</b></a>, but fills the region
beneath the line.

</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
<dt><i>brush=</i></dt><dd>
Brush object.</dd>
</dl><br />
</dd>
</dl><h2><a id="Axes-class" name="Axes-class">The Axes Class</a></h2><dl><dt><b>Axes(data=None, **options)</b> (class) [<a href="#Axes-class">#</a>]</dt><dd>
<p>Standard axes handling.  This element sets up a drawing extent for
subsequent elements, and also draws axes to the left and below the
graph area.</p><dl><dt><i>data</i></dt><dd>
Graph data.  If given, the class calculates the
    extent from the actual graph values.  If not given, the
    extent is taken from the <b>extent</b> option.
</dd>
<dt><i>**options</i></dt><dd>
Axes options.</dd>
<dt><i>extent=</i></dt><dd>
Graph extent.</dd>
<dt><i>grid=</i></dt><dd>
Grid pen.  If given, this should be a <a class="link" href="#Pen-class"><b>Pen</b></a>
    object.
</dd>
<dt><i>xaxis=</i></dt><dd>
Where to draw the x-axis.  Can be &#8220;bottom&#8221; or
    &#8220;none&#8221;.  Default is &#8220;bottom&#8221;.</dd>
<dt><i>yaxis=</i></dt><dd>
Where to draw the y-axis.  Can be one of &#8220;left&#8221;,
    &#8220;right&#8221;, &#8220;both&#8221;, or &#8220;none&#8221;.  Default is &#8220;left&#8221;.</dd>
<dt><i>xoffset=</i></dt><dd>
Distance between the x-axis and the graph canvas.
    Defaults to 0.</dd>
<dt><i>yoffset=</i></dt><dd>
Distance between the y-axis and the graph canvas.
    Defaults to 0.</dd>
</dl><br />
</dd>
<dt><a id="Axes.getextent-method" name="Axes.getextent-method"><b>getextent()</b></a> [<a href="#Axes.getextent-method">#</a>]</dt><dd>
<p>Gets the current graph extent.</p><dl><dt>Returns:</dt><dd>
The graph extent (xmin, ymin, xmax, ymax).</dd>
</dl><br />
</dd>
<dt><a id="Axes.makeaxis-method" name="Axes.makeaxis-method"><b>makeaxis(axis, lo, hi)</b></a> [<a href="#Axes.makeaxis-method">#</a>]</dt><dd>
<p>(Hook) Calculates min and max values for an individual graph
axis, and determines where to draw tick marks.</p><dl><dt><i>axis</i></dt><dd>
Axis type (&#8220;x&#8221; or &#8220;y&#8221;).</dd>
<dt><i>lo</i></dt><dd>
Start of axis.</dd>
<dt><i>hi</i></dt><dd>
End of axis.</dd>
<dt>Returns:</dt><dd>
A tuple containing adjusted start and end positions,
    plus a list of (value, label) tick specifiers.</dd>
</dl><br />
</dd>
<dt><a id="Axes.render-method" name="Axes.render-method"><b>render(context)</b></a> [<a href="#Axes.render-method">#</a>]</dt><dd>
<p>(Internal) Renders axes.</p><dl><dt><i>context</i></dt><dd>
Graph drawing context.</dd>
</dl><br />
</dd>
<dt><a id="Axes.setextent-method" name="Axes.setextent-method"><b>setextent(extent)</b></a> [<a href="#Axes.setextent-method">#</a>]</dt><dd>
<p>Sets the graph extent.</p><dl><dt><i>extent</i></dt><dd>
The new extent (xmin, ymin, xmax, ymax).</dd>
</dl><br />
</dd>
<dt><a id="Axes.xlabel-method" name="Axes.xlabel-method"><b>xlabel(x, label)</b></a> [<a href="#Axes.xlabel-method">#</a>]</dt><dd>
<p>(Hook) Generates label for the X axis.</p><dl><dt><i>x</i></dt><dd>
X value.</dd>
<dt><i>label</i></dt><dd>
Suggested label.  The default implementation simply
    returns this label.</dd>
<dt>Returns:</dt><dd>
The new label.  To suppress the label, return None or an
    empty string.</dd>
</dl><br />
</dd>
<dt><a id="Axes.ylabel-method" name="Axes.ylabel-method"><b>ylabel(y, label)</b></a> [<a href="#Axes.ylabel-method">#</a>]</dt><dd>
<p>(Hook) Generates label for the Y axis.</p><dl><dt><i>y</i></dt><dd>
Y value.</dd>
<dt><i>label</i></dt><dd>
Suggested label.  The default implementation simply
    returns this label.</dd>
<dt>Returns:</dt><dd>
The new label.  To suppress the label, return None or an
    empty string.</dd>
</dl><br />
</dd>
</dl><h2><a id="BarGraph-class" name="BarGraph-class">The BarGraph Class</a></h2><dl><dt><b>BarGraph(data, **options)</b> (class) [<a href="#BarGraph-class">#</a>]</dt><dd>
<p>Simple bar plot.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).
    Both arrays should have the same length.</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
<dt><i>brush=</i></dt><dd>
Brush object to use when filling the bars.  Use
    Brush(None) to draw hollow bars.</dd>
<dt><i>pen=</i></dt><dd>
Pen object to use for the bar border.  Use Pen(None)
    to draw bars without a border.</dd>
<dt><i>barwidth=</i></dt><dd>
Relative barwidth.  Defaults to 1.0 (100%).</dd>
</dl><br />
</dd>
</dl><h2><a id="Brush-class" name="Brush-class">The Brush Class</a></h2><dl><dt><b>Brush(color=&#8221;yellow&#8221;)</b> (class) [<a href="#Brush-class">#</a>]</dt><dd>
<p>Brush object.  This class is used to specify fill styles for various
drawing operations.</p><dl><dt><i>color=</i></dt><dd>
Brush color.</dd>
</dl><br />
</dd>
</dl><h2><a id="GraphWidget-class" name="GraphWidget-class">The GraphWidget Class</a></h2><dl><dt><b>GraphWidget(master, **options)</b> (class) [<a href="#GraphWidget-class">#</a>]</dt><dd>
<p>Graph widget.  To display a graph, add an axis component, and one or
more graph components.</p><dl><dt><i>master</i></dt><dd>
Parent widget.</dd>
<dt><i>**options</i></dt><dd>
Widget options.</dd>
<dt><i>background=</i></dt><dd>
Widget background color.</dd>
<dt><i>font=</i></dt><dd>
Widget font.</dd>
<dt><i>foreground=</i></dt><dd>
Widget text color.</dd>
<dt><i>canvasbackground=</i></dt><dd>
Graph canvas background color.  Default
    is same as the widget background.</dd>
<dt><i>height=</i></dt><dd>
Widget height (in pixels).  Defaults to 600 pixels.</dd>
<dt><i>width=</i></dt><dd>
Widget width (in pixels).  Defaults to 400 pixels.</dd>
</dl><br />
</dd>
<dt><a id="GraphWidget.add-method" name="GraphWidget.add-method"><b>add(layer)</b></a> [<a href="#GraphWidget.add-method">#</a>]</dt><dd>
<p>Adds a graph component to this widget.</p><dl><dt><i>layer</i></dt><dd>
Layer component.</dd>
</dl><br />
</dd>
<dt><a id="GraphWidget.clear-method" name="GraphWidget.clear-method"><b>clear()</b></a> [<a href="#GraphWidget.clear-method">#</a>]</dt><dd>
<p>Removes all layers from widget.</p></dd>
</dl><h2><a id="LineGraph-class" name="LineGraph-class">The LineGraph Class</a></h2><dl><dt><b>LineGraph(data, **options)</b> (class) [<a href="#LineGraph-class">#</a>]</dt><dd>
<p>Line plot.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).
    Both arrays should have the same length, and the X array should
    be monotonically increasing (that is, xdata[i] &lt; xdata[i+1]
    should be true for the entire array).
</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
<dt><i>pen=</i></dt><dd>
Pen object to use when drawing the line.  Defaults to
    a thin black line.</dd>
<dt><i>marker=</i></dt><dd>
Marker object.  If omitted, markers are not drawn.</dd>
<dt><i>interpolation=</i></dt><dd>
Line interpolation method.  Can be one of
    &#8220;linear&#8221;, &#8220;smooth&#8221;, &#8220;stairs&#8221;, &#8220;stem&#8221; or &#8220;step&#8221;.  Defaults to
    &#8220;linear&#8221;.</dd>
</dl><br />
</dd>
</dl><h2><a id="Marker-class" name="Marker-class">The Marker Class</a></h2><dl><dt><b>Marker(style=&#8221;circle&#8221;, color=&#8221;blue&#8221;, border=&#8221;black&#8221;, size=5)</b> (class) [<a href="#Marker-class">#</a>]</dt><dd>
<p>Marker object.  This is used to specify marker styles for various
plotting operations.</p><dl><dt><i>style=</i></dt><dd>
Marker style.  One of &#8220;circle&#8221;, &#8220;diamond&#8221;, &#8220;plus&#8221;,
    &#8220;square&#8221;, or &#8220;triangle&#8221;.  Defaults to &#8220;circle&#8221;.</dd>
<dt><i>color=</i></dt><dd>
Marker fill color.  Use None to draw just the border.</dd>
<dt><i>border=</i></dt><dd>
Marker border color.</dd>
<dt><i>size=</i></dt><dd>
Marker size (radius), in pixels.  Defaults to 5.</dd>
</dl><br />
</dd>
<dt><a id="Marker.plot-method" name="Marker.plot-method"><b>plot(context, xy)</b></a> [<a href="#Marker.plot-method">#</a>]</dt><dd>
<p>Plot markers on a surface.</p><dl><dt><i>context</i></dt><dd>
Rendering context.</dd>
<dt><i>xy</i></dt><dd>
Coordinate array.</dd>
</dl><br />
</dd>
</dl><h2><a id="Pen-class" name="Pen-class">The Pen Class</a></h2><dl><dt><b>Pen(color=&#8221;black&#8221;, width=1)</b> (class) [<a href="#Pen-class">#</a>]</dt><dd>
<p>Pen object.  This class is used to specify pen styles for various
drawing operations.</p><dl><dt><i>color=</i></dt><dd>
Pen color.</dd>
<dt><i>width=</i></dt><dd>
Pen width.</dd>
</dl><br />
</dd>
</dl><h2><a id="ScatterGraph-class" name="ScatterGraph-class">The ScatterGraph Class</a></h2><dl><dt><b>ScatterGraph(data, **options)</b> (class) [<a href="#ScatterGraph-class">#</a>]</dt><dd>
<p>Scatter (X-Y) plot.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).
    Both arrays should have the same length.</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
<dt><i>marker=</i></dt><dd>
Marker object.  This should be an instance of the
    <a class="link" href="#Marker-class"><b>Marker</b></a> class.  If omitted, a default marker style is used.
</dd>
</dl><br />
</dd>
</dl><h2><a id="SimpleGraph-class" name="SimpleGraph-class">The SimpleGraph Class</a></h2><dl><dt><b>SimpleGraph(data, **options)</b> (class) [<a href="#SimpleGraph-class">#</a>]</dt><dd>
<p>Base class for simple graphs.</p><dl><dt><i>data</i></dt><dd>
Input data, given as a tuple of two arrays (xdata, ydata).
    Both arrays should have the same length.</dd>
<dt><i>**options</i></dt><dd>
Plot options.</dd>
</dl><br />
</dd>
<dt><a id="SimpleGraph.render-method" name="SimpleGraph.render-method"><b>render(context)</b></a> [<a href="#SimpleGraph.render-method">#</a>]</dt><dd>
<p>(Hook) Render graph in context.  The default implementation
maps input coordinates to pixel coordinates, relative to the
graph canvas, and then calls the <a class="link" href="#SimpleGraph.render_xy-method"><b>render_xy</b></a>
method.

</p><dl><dt><i>context</i></dt><dd>
Rendering context.</dd>
</dl><br />
</dd>
<dt><a id="SimpleGraph.render_xy-method" name="SimpleGraph.render_xy-method"><b>render_xy(context, xy)</b></a> [<a href="#SimpleGraph.render_xy-method">#</a>]</dt><dd>
<p>(Hook) Renders graph in context.  Same as <a class="link" href="#SimpleGraph.render-method"><b>render</b></a>,
but the coordinates are given in pixel coordinates.

</p><dl><dt><i>context</i></dt><dd>
Rendering context.</dd>
<dt><i>xy</i></dt><dd>
Coordinate array.</dd>
</dl><br />
</dd>
</dl></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
