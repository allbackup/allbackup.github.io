<html>
<head>
<title>element ::: www.effbot.org</title>
<link rel='stylesheet' href='/effbot.css' type='text/css' media='screen' />
</head>
<body bgcolor='#ccffcc'>
<div>[<a href='element.htm'>back</a>]</div>
<h3>Welcome to the effbot.org user editor!</h3>


<p><b>Note: This is not a contact form!  Support questions, spam, and
other off-topic stuff will be ignored.</b></p>

<p>To suggest changes, edit the HTML fragment in the text box below.
You can use the 'update preview' button to check your changes (the
preview is displayed beneath the text box).  When done, fill in the
name and address fields (optional) and click 'submit patch' to mail
the patch to me.  (I reserve the right to decide which patches to
include, of course.)  Thanks! /F</p>

<form method='post' id='useredit'>
<input type='hidden' name='name' value='element'/>
<p>
<input type='submit' name='preview' value='update preview' style='background:#084; color:white; width:200px; font-weight:bold;' >
&nbsp;&nbsp;&nbsp;
<input type='submit' name='submit' value='submit patch'  style='background:#084; color:white; width:200px; font-weight:bold;' >
</p>
<textarea name='text' rows='30' cols='80'>Elements and Element Trees

&lt;!-- ADSENSE --&gt;

&lt;p class='info'&gt;Updated September 7, 2004 | Fredrik Lundh&lt;/p&gt;

&lt;!-- &lt;p class='note'&gt;&lt;b&gt;Update 2004-09-06:&lt;/b&gt;
Lots of small improvements, plus a new section on &lt;a href="#xml-namespaces"&gt;XML namespaces&lt;/a&gt;.
&lt;/p&gt; --&gt;

&lt;p&gt;This note introduces the Element, SubElement and ElementTree types
available in &lt;a href="/downloads/index.cgi#elementtree"&gt;the effbot.org
elementtree library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For an overview, with links to articles and more documentation, see the
&lt;a href="element-index.htm"&gt;&lt;cite&gt;ElementTree Overview&lt;/cite&gt;&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;For an API reference, see &lt;a
href="pythondoc-elementtree-ElementTree.htm"&gt;&lt;cite&gt;The
elementtree.ElementTree Module&lt;/cite&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can download the library from &lt;a
href="/downloads/index.cgi#elementtree"&gt;the effbot.org downloads
page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a href='#the-element-type'&gt;The Element Type&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href='#attributes'&gt;Attributes&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href='#text-content'&gt;Text Content&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href='#searching-for-subelements'&gt;Searching for Subelements&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href='#reading-and-writing-xml-files'&gt;Reading and Writing XML Files&lt;/a&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;a href='#xml-namespaces'&gt;XML Namespaces&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;

&lt;h2 id='the-element-type'&gt;The Element Type&lt;/h2&gt;

&lt;p&gt;The &lt;a href="pythondoc-elementtree-ElementTree.htm#elementtree.ElementTree.Element-function"&gt;&lt;b&gt;Element&lt;/b&gt;&lt;/a&gt; type is a flexible container object, designed
to store hierarchical data structures in memory.  The type can be
described as a cross between a list and a dictionary.&lt;/p&gt;

&lt;p&gt;Each element has a number of properties associated with it:&lt;/p&gt;&lt;ul&gt;

&lt;li&gt;a &lt;i&gt;tag&lt;/i&gt;.  This is a string identifying what kind of data this
element represents (the &lt;i&gt;element type&lt;/i&gt;, in other words).&lt;/li&gt;

&lt;li&gt;a number of &lt;i&gt;attributes&lt;/i&gt;, stored in a Python dictionary.&lt;/li&gt;

&lt;li&gt;a &lt;i&gt;text&lt;/i&gt; string&lt;/li&gt;

&lt;li&gt;a number of &lt;i&gt;child elements&lt;/i&gt;, stored in a Python sequence&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;All elements must have a tag, but all other properties are
optional.  All strings can either be Unicode strings, or 8-bit
strings containing US-ASCII only.&lt;/p&gt;

&lt;p&gt;To create an element, call the &lt;b&gt;Element&lt;/b&gt; constructor, and pass
in the tag string as the first argument:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import Element

root = Element(&amp;quot;root&amp;quot;)
&lt;/pre&gt;

&lt;p&gt;You can access the tag string via the &lt;b&gt;tag&lt;/b&gt; attribute:&lt;/p&gt;

&lt;pre&gt;
print root.tag
&lt;/pre&gt;

&lt;p&gt;To build a tree, create more elements, and append them to the
parent element:&lt;/p&gt;

&lt;pre&gt;
root = Element(&amp;quot;root&amp;quot;)

root.append(Element(&amp;quot;one&amp;quot;))
root.append(Element(&amp;quot;two&amp;quot;))
root.append(Element(&amp;quot;three&amp;quot;))
&lt;/pre&gt;

&lt;p&gt;Since this is a very common operation, the library provides a
 function called &lt;b&gt;SubElement&lt;/b&gt;.  This helper function creates a
new element and adds it to its parent, in one operation:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import Element, SubElement

root = Element(&amp;quot;root&amp;quot;)

SubElement(root, &amp;quot;one&amp;quot;)
SubElement(root, &amp;quot;two&amp;quot;)
SubElement(root, &amp;quot;three&amp;quot;)
&lt;/pre&gt;

&lt;p&gt;To access the subelements, you can use ordinary list (sequence)
operations.  This includes &lt;b&gt;len(element)&lt;/b&gt; to get the number of
subelements, &lt;b&gt;element[i]&lt;/b&gt; to fetch the i'th subelement, and using
the &lt;b&gt;for-in&lt;/b&gt; statement to loop over the subelements:&lt;/p&gt;

&lt;pre&gt;
for node in root:
    print node
&lt;/pre&gt;

&lt;p&gt;Note that in ElementTree 1.2 and earlier, the sequence behaviour
means that an element without subelements tests as false (since it's
an empty sequence).  To check the return value from a function or
method that may return None instead of a node, you must use an
explicit test.&lt;/p&gt;

&lt;pre&gt;
node = fetchnode()

if not node: # &lt;i&gt;careful!&lt;/i&gt;
    print "node not found, or node has no subnodes"

if node is None:
    print "node not found"
&lt;/pre&gt;

&lt;p class='note'&gt;&lt;b&gt;Note:&lt;/b&gt;
This behaviour is likely to change somewhat in ElementTree 1.3.  To write
code that is compatible in both directions, use "element is None" to test
for a missing element, and "len(element)" to test for non-empty elements.
&lt;/p&gt;

&lt;p&gt;The element type also supports slicing (including slice
assignment), and the standard &lt;b&gt;append&lt;/b&gt;, &lt;b&gt;insert&lt;/b&gt; and
&lt;b&gt;remove&lt;/b&gt; methods:&lt;/p&gt;

&lt;pre&gt;
nodes = node[1:5]
node.append(subnode)
node.insert(0, subnode)
node.remove(subnode)
&lt;/pre&gt;

&lt;p&gt;Note that &lt;b&gt;remove&lt;/b&gt; takes an element, not a tag.  To find the
element to remove, you can either loop over the parent, or use one of
the &lt;b&gt;find&lt;/b&gt; methods described below.&lt;/p&gt;

&lt;p&gt;The element structure has no parent pointers.  If you need to keep
track of child/parent relations, you can either structure your program
to work on the parents rather than the children, or use a separate data
structure to map from child elements to their parents.  On Python 2.4,
the following one-liner creates a child/parent map for an entire tree:

&lt;pre&gt;
parent_map = dict((c, p) for p in tree.getiterator() for c in p)
&lt;/pre&gt;

&lt;h2 id='attributes'&gt;Attributes&lt;/h2&gt;

&lt;p&gt;In addition to the tag and the list of subelements, each element
can have one or more attributes.  Each element attribute consists of
a string key, and a corresponding value.  As for ordinary Python
dictionaries, all keys must be unique.&lt;/p&gt;

&lt;p&gt;Element attributes are in fact stored in a standard Python
dictionary, which can be accessed via the &lt;b&gt;attrib&lt;/b&gt; attribute.  To
set attributes, you can simply assign to &lt;b&gt;attrib&lt;/b&gt; members:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import Element

elem = Element(&amp;quot;tag&amp;quot;)
elem.attrib[&amp;quot;first&amp;quot;] = &amp;quot;1&amp;quot;
elem.attrib[&amp;quot;second&amp;quot;] = &amp;quot;2&amp;quot;
&lt;/pre&gt;

&lt;p&gt;When creating a new element, you can pass in element attributes
using keyword arguments.  The previous example is better written
as:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import Element

elem = Element(&amp;quot;tag&amp;quot;, first=&amp;quot;1&amp;quot;, second=&amp;quot;2&amp;quot;)
&lt;/pre&gt;

&lt;p&gt;The Element type provides shortcuts for &lt;b&gt;attrib.get&lt;/b&gt;,
&lt;b&gt;attrib.keys&lt;/b&gt;, and &lt;b&gt;attrib.items&lt;/b&gt;.  There's also a
&lt;b&gt;set&lt;/b&gt; method, to set the value of an element attribute:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import Element

elem = Element(&amp;quot;tag&amp;quot;, first=&amp;quot;1&amp;quot;, second=&amp;quot;2&amp;quot;)

# &lt;i&gt;print 'first' attribute&lt;/i&gt;
print elem.attrib.get(&amp;quot;first&amp;quot;)

# &lt;i&gt;same, using shortcut&lt;/i&gt;
print elem.get(&amp;quot;first&amp;quot;)

# &lt;i&gt;print list of keys (using shortcuts)&lt;/i&gt;
print elem.keys()
print elem.items()

# &lt;i&gt;the 'third' attribute doesn't exist&lt;/i&gt;
print elem.get(&amp;quot;third&amp;quot;)
print elem.get(&amp;quot;third&amp;quot;, "default")

# &lt;i&gt;add the attribute and try again&lt;/i&gt;
elem.set(&amp;quot;third&amp;quot;, &amp;quot;3&amp;quot;)
print elem.get(&amp;quot;third&amp;quot;, "default")

&lt;b&gt;
1
1
['first', 'second']
[('first', '1'), ('second', '2')]
None
default
3&lt;/b&gt;
&lt;/pre&gt;

&lt;p&gt;Note that while the &lt;b&gt;attrib&lt;/b&gt; value is required to be a real
mutable Python dictionary, an ElementTree implementation may choose to
use another internal representation, and create the dictionary only if
someone asks for it.  To take advantage of such implementations, stick
to the shortcut methods whenever possible.&lt;/p&gt;

&lt;h2 id='text-content'&gt;Text Content&lt;/h2&gt;

&lt;p&gt;The element type also provides a &lt;b&gt;text&lt;/b&gt; attribute, which can
be used to hold additional data associated with the element.  As the
name implies, this attribute is usually used to hold a text string,
but it can be used for other, application-specific purposes.&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import Element

elem = Element(&amp;quot;tag&amp;quot;)
elem.text = &amp;quot;this element also contains text&amp;quot;
&lt;/pre&gt;

&lt;p&gt;If there is no additional data, this attribute is set to an empty
string, or None.&lt;/p&gt;

&lt;p&gt;The element type actually provides two attributes that can be used
in this way; in addition to &lt;b&gt;text&lt;/b&gt;, there's a similar attribute
called &lt;b&gt;tail&lt;/b&gt;.  It too can contain a text string, an
application-specific object, or None.  The tail attribute is used to
store trailing text nodes when reading mixed-content XML files; see
the &lt;a href="element-infoset.htm#mixed-content"&gt;&lt;i&gt;Mixed Content&lt;/i&gt;&lt;/a&gt;
section for more information.&lt;/p&gt;

&lt;h3&gt;Example&lt;/h3&gt;

&lt;div class='example'&gt;
&lt;b&gt;File: elementtree-example-1.py&lt;/b&gt;
&lt;pre&gt;# elementtree-example-1.py

from elementtree.ElementTree import Element, SubElement, dump

window = Element(&amp;quot;window&amp;quot;)

title = SubElement(window, &amp;quot;title&amp;quot;, font=&amp;quot;large&amp;quot;)
title.text = &amp;quot;A sample text window&amp;quot;

text = SubElement(window, &amp;quot;text&amp;quot;, wrap=&amp;quot;word&amp;quot;)

box = SubElement(window, &amp;quot;buttonbox&amp;quot;)
SubElement(box, &amp;quot;button&amp;quot;).text = &amp;quot;OK&amp;quot;
SubElement(box, &amp;quot;button&amp;quot;).text = &amp;quot;Cancel&amp;quot;

dump(window)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;b&gt;
$ python elementtree-example-1.py
&amp;lt;window&amp;gt;&amp;lt;title font="large"&amp;gt;A sample text window&amp;lt;/title&amp;gt;&amp;lt;text wrap=
"word" /&amp;gt;&amp;lt;buttonbox&amp;gt;&amp;lt;button&amp;gt;OK&amp;lt;/button&amp;gt;&amp;lt;button&amp;gt;Cancel&amp;lt;/button&amp;gt;&amp;lt;/but
tonbox&amp;gt;&amp;lt;/window&amp;gt;
&lt;/b&gt;&lt;/pre&gt;

&lt;h2 id='searching-for-subelements'&gt;Searching for Subelements&lt;/h2&gt;

&lt;p&gt;The Element type provides a number of methods that can be used to
search for subelements:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;find(pattern)&lt;/b&gt; returns the first subelement that matches the
given pattern, or None if there is no matching element.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;findtext(pattern)&lt;/b&gt; returns the value of the &lt;b&gt;text&lt;/b&gt;
attribute for the first subelement that matches the given pattern.  If
there is no matching element, this method returns None.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;findall(pattern)&lt;/b&gt; returns a list (or another iterable object)
of all subelements that match the given pattern.&lt;/p&gt;

&lt;p&gt;In ElementTree 1.2 and later, the pattern argument can either be a
tag name, or &lt;a href="element-xpath.htm"&gt;a path expression&lt;/a&gt;.  If a
tag name is given, only direct subelements are checked.  Path
expressions can be used to search the entire subtree.&lt;/p&gt;

&lt;p&gt;ElementTree 1.1 and earlier only supports plain tag names.&lt;/p&gt;

&lt;p&gt;In addition, the &lt;b&gt;getiterator&lt;/b&gt; method can be used to loop over
the tree in depth-first order:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;getiterator(tag)&lt;/b&gt; returns a list (or another iterable object)
which contains all subelements that has the given tag, on all levels in
the subtree.  The elements are returned in document order.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;getiterator()&lt;/b&gt; (without argument) returns a list (or another
iterable object) of all subelement in the subtree.&lt;/p&gt;


&lt;p&gt;&lt;b&gt;getchildren()&lt;/b&gt; returns a list (or another iterable object) of
all direct child elements.  This method is deprecated; new code should
use indexing or slicing to access the children, or &lt;b&gt;list(elem)&lt;/b&gt; to
get a list.&lt;/p&gt;

&lt;h2 id='reading-and-writing-xml-files'&gt;Reading and Writing XML Files&lt;/h2&gt;

&lt;p&gt;The Element type can be used to represent XML files in memory.  The
&lt;a href="pythondoc-elementtree-ElementTree.htm#elementtree.ElementTree.ElementTree-class"&gt;&lt;b&gt;ElementTree&lt;/b&gt;&lt;/a&gt; wrapper class is used to read and write XML
files.&lt;/p&gt;

&lt;p&gt;To load an XML file into an Element structure, use the &lt;b&gt;parse&lt;/b&gt;
function:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import parse

tree = parse(filename)
elem = tree.getroot()
&lt;/pre&gt;

&lt;p&gt;You can also pass in a file handle (or any object with a
&lt;b&gt;read&lt;/b&gt; method):&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import parse

file = open(filename, &amp;quot;r&amp;quot;)
tree = parse(file)
elem = tree.getroot()
&lt;/pre&gt;

&lt;p&gt;The &lt;b&gt;parse&lt;/b&gt; method returns an &lt;a href="pythondoc-elementtree-ElementTree.htm#elementtree.ElementTree.ElementTree-class"&gt;ElementTree&lt;/a&gt; object.  To get the
topmost element object, use the &lt;b&gt;getroot&lt;/b&gt; method.&lt;/p&gt;

&lt;p&gt;In recent versions of the ElementTree module, you can also use the
&lt;b&gt;file&lt;/b&gt; keyword argument to create a tree, and fill it with
contents from a file in one operation:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import ElementTree

tree = ElementTree(file=filename)
elem = tree.getroot()
&lt;/pre&gt;

&lt;p&gt;To save an element tree back to disk, use the &lt;b&gt;write&lt;/b&gt; method
on the ElementTree class.  Like the &lt;b&gt;parse&lt;/b&gt; function, it takes
either a filename or a file object (or any object with a &lt;b&gt;write&lt;/b&gt;
method):&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import ElementTree

tree = ElementTree(file=infile)
tree.write(outfile)
&lt;/pre&gt;

&lt;p&gt;If you want to write an Element object hierarchy to disk, wrap it
in an ElementTree instance:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import Element, SubElement, ElementTree

html = Element(&amp;quot;html&amp;quot;)
body = SubElement(html, &amp;quot;body&amp;quot;)
ElementTree(html).write(outfile)
&lt;/pre&gt;

&lt;p&gt;Note that the standard element writer creates a compact output.
There is no built-in support for pretty printing or user-defined
namespace prefixes in the current version, so the output may not
always be suitable for human consumption (to the extent XML is
suitable for human consumption, that is).&lt;/p&gt;

&lt;p&gt;One way to produce nicer output is to add whitespace to the tree
before saving it; see the &lt;b&gt;indent&lt;/b&gt; function on the
&lt;a href="http://effbot.org/zone/element-lib.htm#prettyprint"&gt;
&lt;cite&gt;Element Library Functions&lt;/cite&gt;&lt;/a&gt; page for an example.

&lt;p&gt;To convert between XML and strings, you can use the &lt;b&gt;XML&lt;/b&gt;,
&lt;b&gt;fromstring&lt;/b&gt;, and &lt;b&gt;tostring&lt;/b&gt; helpers:&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import XML, fromstring, tostring

elem = XML(text)

elem = fromstring(text) # &lt;i&gt;same as XML(text)&lt;/i&gt;

text = tostring(elem)
&lt;/pre&gt;

&lt;h2 id='xml-namespaces'&gt;XML Namespaces&lt;/h2&gt;

&lt;p&gt;The &lt;b&gt;elementtree&lt;/b&gt; module supports &lt;b&gt;qualified names&lt;/b&gt;
(QNames) for element tags and attribute names.  A qualified name
consists of a (uri, local name) pair.&lt;/p&gt;

&lt;p&gt;Qualified names was introduced with the &lt;a
href="http://www.w3.org/TR/REC-xml-names/"&gt;XML Namespace
specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The element type represents a qualified name pair, also called
&lt;a href="http://www.jclark.com/xml/xmlns.htm"&gt;&lt;i&gt;universal name&lt;/i&gt;&lt;/a&gt;,
as a string of the form "&lt;b&gt;{uri}local&lt;/b&gt;".  This syntax can be used
both for tag names and for attribute keys.&lt;/p&gt;

&lt;p&gt;The following example creates an element where the tag
is the qualified name pair &lt;b&gt;(http://spam.effbot.org, egg)&lt;/b&gt;.&lt;/p&gt;

&lt;pre&gt;
from elementtree.ElementTree import Element

elem = Element("{http://spam.effbot.org}egg"}
&lt;/pre&gt;

&lt;p&gt;If you save this to an XML file, the writer will automatically
generate proper XML namespace declarations, and pick a suitable
prefix.  When you load an XML file, the parser converts qualified
tag and attribute names to the element syntax.&lt;/p&gt;

&lt;p&gt;Note that the standard parser discards namespace prefixes and
declarations, so if you need to access the prefixes later on (e.g.
to handle qualified names in attribute values or character data),
you must use an alternate parser.  For more information on this
topic, see the articles
&lt;a href='element-iterparse.htm'&gt;&lt;cite&gt;The ElementTree iterparse Function&lt;/cite&gt;&lt;/a&gt; and
&lt;a href='elementsoap-3.htm'&gt;&lt;cite&gt;Dealing with Qualified Names&lt;/cite&gt;.&lt;/a&gt;&lt;/p&gt;</textarea>
<table>
<tr><td><label for='author'>Name:</label></td><td>
<div><input name='author' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='email'>Mail:</label></td><td>
<div><input name='email' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='note'>Comment:</label></td><td>
<div><input name='note' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='password'>Password:</label></td><td>
<div><input name='password' value="(replace with the sum of 7+4)" size=40></div>
</td><td>(Required)</td></tr>
</table>
<p>
<input type='submit' name='preview' value='update preview' style='background:#084; color:white; width:200px; font-weight:bold;' >
&nbsp;&nbsp;&nbsp;
<input type='submit' name='submit' value='submit patch'  style='background:#084; color:white; width:200px; font-weight:bold;' >
</p>
<p>&nbsp;</p>
</form>
<div style='background: white; border: 2px solid #084; padding: 0px 20px;'>
<h2>Elements and Element Trees</h2>

<!-- ADSENSE -->

<p class='info'>Updated September 7, 2004 | Fredrik Lundh</p>

<!-- <p class='note'><b>Update 2004-09-06:</b>
Lots of small improvements, plus a new section on <a href="#xml-namespaces">XML namespaces</a>.
</p> -->

<p>This note introduces the Element, SubElement and ElementTree types
available in <a href="/downloads/index.cgi#elementtree">the effbot.org
elementtree library</a>.</p>

<p>For an overview, with links to articles and more documentation, see the
<a href="element-index.htm"><cite>ElementTree Overview</cite></a> page.</p>

<p>For an API reference, see <a
href="pythondoc-elementtree-ElementTree.htm"><cite>The
elementtree.ElementTree Module</cite></a>.</p>

<p>You can download the library from <a
href="/downloads/index.cgi#elementtree">the effbot.org downloads
page</a>.</p>

<p>In this article:</p>

<dl>
<dt><a href='#the-element-type'>The Element Type</a></dt>
<dt><a href='#attributes'>Attributes</a></dt>
<dt><a href='#text-content'>Text Content</a></dt>
<dt><a href='#searching-for-subelements'>Searching for Subelements</a></dt>
<dt><a href='#reading-and-writing-xml-files'>Reading and Writing XML Files</a></dt>
<dt><a href='#xml-namespaces'>XML Namespaces</a></dt>
</dl>

<h2 id='the-element-type'>The Element Type</h2>

<p>The <a href="pythondoc-elementtree-ElementTree.htm#elementtree.ElementTree.Element-function"><b>Element</b></a> type is a flexible container object, designed
to store hierarchical data structures in memory.  The type can be
described as a cross between a list and a dictionary.</p>

<p>Each element has a number of properties associated with it:</p><ul>

<li>a <i>tag</i>.  This is a string identifying what kind of data this
element represents (the <i>element type</i>, in other words).</li>

<li>a number of <i>attributes</i>, stored in a Python dictionary.</li>

<li>a <i>text</i> string</li>

<li>a number of <i>child elements</i>, stored in a Python sequence</li>

</ul>

<p>All elements must have a tag, but all other properties are
optional.  All strings can either be Unicode strings, or 8-bit
strings containing US-ASCII only.</p>

<p>To create an element, call the <b>Element</b> constructor, and pass
in the tag string as the first argument:</p>

<pre>
from elementtree.ElementTree import Element

root = Element(&quot;root&quot;)
</pre>

<p>You can access the tag string via the <b>tag</b> attribute:</p>

<pre>
print root.tag
</pre>

<p>To build a tree, create more elements, and append them to the
parent element:</p>

<pre>
root = Element(&quot;root&quot;)

root.append(Element(&quot;one&quot;))
root.append(Element(&quot;two&quot;))
root.append(Element(&quot;three&quot;))
</pre>

<p>Since this is a very common operation, the library provides a
 function called <b>SubElement</b>.  This helper function creates a
new element and adds it to its parent, in one operation:</p>

<pre>
from elementtree.ElementTree import Element, SubElement

root = Element(&quot;root&quot;)

SubElement(root, &quot;one&quot;)
SubElement(root, &quot;two&quot;)
SubElement(root, &quot;three&quot;)
</pre>

<p>To access the subelements, you can use ordinary list (sequence)
operations.  This includes <b>len(element)</b> to get the number of
subelements, <b>element[i]</b> to fetch the i'th subelement, and using
the <b>for-in</b> statement to loop over the subelements:</p>

<pre>
for node in root:
    print node
</pre>

<p>Note that in ElementTree 1.2 and earlier, the sequence behaviour
means that an element without subelements tests as false (since it's
an empty sequence).  To check the return value from a function or
method that may return None instead of a node, you must use an
explicit test.</p>

<pre>
node = fetchnode()

if not node: # <i>careful!</i>
    print "node not found, or node has no subnodes"

if node is None:
    print "node not found"
</pre>

<p class='note'><b>Note:</b>
This behaviour is likely to change somewhat in ElementTree 1.3.  To write
code that is compatible in both directions, use "element is None" to test
for a missing element, and "len(element)" to test for non-empty elements.
</p>

<p>The element type also supports slicing (including slice
assignment), and the standard <b>append</b>, <b>insert</b> and
<b>remove</b> methods:</p>

<pre>
nodes = node[1:5]
node.append(subnode)
node.insert(0, subnode)
node.remove(subnode)
</pre>

<p>Note that <b>remove</b> takes an element, not a tag.  To find the
element to remove, you can either loop over the parent, or use one of
the <b>find</b> methods described below.</p>

<p>The element structure has no parent pointers.  If you need to keep
track of child/parent relations, you can either structure your program
to work on the parents rather than the children, or use a separate data
structure to map from child elements to their parents.  On Python 2.4,
the following one-liner creates a child/parent map for an entire tree:

<pre>
parent_map = dict((c, p) for p in tree.getiterator() for c in p)
</pre>

<h2 id='attributes'>Attributes</h2>

<p>In addition to the tag and the list of subelements, each element
can have one or more attributes.  Each element attribute consists of
a string key, and a corresponding value.  As for ordinary Python
dictionaries, all keys must be unique.</p>

<p>Element attributes are in fact stored in a standard Python
dictionary, which can be accessed via the <b>attrib</b> attribute.  To
set attributes, you can simply assign to <b>attrib</b> members:</p>

<pre>
from elementtree.ElementTree import Element

elem = Element(&quot;tag&quot;)
elem.attrib[&quot;first&quot;] = &quot;1&quot;
elem.attrib[&quot;second&quot;] = &quot;2&quot;
</pre>

<p>When creating a new element, you can pass in element attributes
using keyword arguments.  The previous example is better written
as:</p>

<pre>
from elementtree.ElementTree import Element

elem = Element(&quot;tag&quot;, first=&quot;1&quot;, second=&quot;2&quot;)
</pre>

<p>The Element type provides shortcuts for <b>attrib.get</b>,
<b>attrib.keys</b>, and <b>attrib.items</b>.  There's also a
<b>set</b> method, to set the value of an element attribute:</p>

<pre>
from elementtree.ElementTree import Element

elem = Element(&quot;tag&quot;, first=&quot;1&quot;, second=&quot;2&quot;)

# <i>print 'first' attribute</i>
print elem.attrib.get(&quot;first&quot;)

# <i>same, using shortcut</i>
print elem.get(&quot;first&quot;)

# <i>print list of keys (using shortcuts)</i>
print elem.keys()
print elem.items()

# <i>the 'third' attribute doesn't exist</i>
print elem.get(&quot;third&quot;)
print elem.get(&quot;third&quot;, "default")

# <i>add the attribute and try again</i>
elem.set(&quot;third&quot;, &quot;3&quot;)
print elem.get(&quot;third&quot;, "default")

<b>
1
1
['first', 'second']
[('first', '1'), ('second', '2')]
None
default
3</b>
</pre>

<p>Note that while the <b>attrib</b> value is required to be a real
mutable Python dictionary, an ElementTree implementation may choose to
use another internal representation, and create the dictionary only if
someone asks for it.  To take advantage of such implementations, stick
to the shortcut methods whenever possible.</p>

<h2 id='text-content'>Text Content</h2>

<p>The element type also provides a <b>text</b> attribute, which can
be used to hold additional data associated with the element.  As the
name implies, this attribute is usually used to hold a text string,
but it can be used for other, application-specific purposes.</p>

<pre>
from elementtree.ElementTree import Element

elem = Element(&quot;tag&quot;)
elem.text = &quot;this element also contains text&quot;
</pre>

<p>If there is no additional data, this attribute is set to an empty
string, or None.</p>

<p>The element type actually provides two attributes that can be used
in this way; in addition to <b>text</b>, there's a similar attribute
called <b>tail</b>.  It too can contain a text string, an
application-specific object, or None.  The tail attribute is used to
store trailing text nodes when reading mixed-content XML files; see
the <a href="element-infoset.htm#mixed-content"><i>Mixed Content</i></a>
section for more information.</p>

<h3>Example</h3>

<div class='example'>
<b>File: elementtree-example-1.py</b>
<pre># elementtree-example-1.py

from elementtree.ElementTree import Element, SubElement, dump

window = Element(&quot;window&quot;)

title = SubElement(window, &quot;title&quot;, font=&quot;large&quot;)
title.text = &quot;A sample text window&quot;

text = SubElement(window, &quot;text&quot;, wrap=&quot;word&quot;)

box = SubElement(window, &quot;buttonbox&quot;)
SubElement(box, &quot;button&quot;).text = &quot;OK&quot;
SubElement(box, &quot;button&quot;).text = &quot;Cancel&quot;

dump(window)
</pre>
</div>

<pre><b>
$ python elementtree-example-1.py
&lt;window&gt;&lt;title font="large"&gt;A sample text window&lt;/title&gt;&lt;text wrap=
"word" /&gt;&lt;buttonbox&gt;&lt;button&gt;OK&lt;/button&gt;&lt;button&gt;Cancel&lt;/button&gt;&lt;/but
tonbox&gt;&lt;/window&gt;
</b></pre>

<h2 id='searching-for-subelements'>Searching for Subelements</h2>

<p>The Element type provides a number of methods that can be used to
search for subelements:</p>

<p><b>find(pattern)</b> returns the first subelement that matches the
given pattern, or None if there is no matching element.</p>

<p><b>findtext(pattern)</b> returns the value of the <b>text</b>
attribute for the first subelement that matches the given pattern.  If
there is no matching element, this method returns None.</p>

<p><b>findall(pattern)</b> returns a list (or another iterable object)
of all subelements that match the given pattern.</p>

<p>In ElementTree 1.2 and later, the pattern argument can either be a
tag name, or <a href="element-xpath.htm">a path expression</a>.  If a
tag name is given, only direct subelements are checked.  Path
expressions can be used to search the entire subtree.</p>

<p>ElementTree 1.1 and earlier only supports plain tag names.</p>

<p>In addition, the <b>getiterator</b> method can be used to loop over
the tree in depth-first order:</p>

<p><b>getiterator(tag)</b> returns a list (or another iterable object)
which contains all subelements that has the given tag, on all levels in
the subtree.  The elements are returned in document order.</p>

<p><b>getiterator()</b> (without argument) returns a list (or another
iterable object) of all subelement in the subtree.</p>


<p><b>getchildren()</b> returns a list (or another iterable object) of
all direct child elements.  This method is deprecated; new code should
use indexing or slicing to access the children, or <b>list(elem)</b> to
get a list.</p>

<h2 id='reading-and-writing-xml-files'>Reading and Writing XML Files</h2>

<p>The Element type can be used to represent XML files in memory.  The
<a href="pythondoc-elementtree-ElementTree.htm#elementtree.ElementTree.ElementTree-class"><b>ElementTree</b></a> wrapper class is used to read and write XML
files.</p>

<p>To load an XML file into an Element structure, use the <b>parse</b>
function:</p>

<pre>
from elementtree.ElementTree import parse

tree = parse(filename)
elem = tree.getroot()
</pre>

<p>You can also pass in a file handle (or any object with a
<b>read</b> method):</p>

<pre>
from elementtree.ElementTree import parse

file = open(filename, &quot;r&quot;)
tree = parse(file)
elem = tree.getroot()
</pre>

<p>The <b>parse</b> method returns an <a href="pythondoc-elementtree-ElementTree.htm#elementtree.ElementTree.ElementTree-class">ElementTree</a> object.  To get the
topmost element object, use the <b>getroot</b> method.</p>

<p>In recent versions of the ElementTree module, you can also use the
<b>file</b> keyword argument to create a tree, and fill it with
contents from a file in one operation:</p>

<pre>
from elementtree.ElementTree import ElementTree

tree = ElementTree(file=filename)
elem = tree.getroot()
</pre>

<p>To save an element tree back to disk, use the <b>write</b> method
on the ElementTree class.  Like the <b>parse</b> function, it takes
either a filename or a file object (or any object with a <b>write</b>
method):</p>

<pre>
from elementtree.ElementTree import ElementTree

tree = ElementTree(file=infile)
tree.write(outfile)
</pre>

<p>If you want to write an Element object hierarchy to disk, wrap it
in an ElementTree instance:</p>

<pre>
from elementtree.ElementTree import Element, SubElement, ElementTree

html = Element(&quot;html&quot;)
body = SubElement(html, &quot;body&quot;)
ElementTree(html).write(outfile)
</pre>

<p>Note that the standard element writer creates a compact output.
There is no built-in support for pretty printing or user-defined
namespace prefixes in the current version, so the output may not
always be suitable for human consumption (to the extent XML is
suitable for human consumption, that is).</p>

<p>One way to produce nicer output is to add whitespace to the tree
before saving it; see the <b>indent</b> function on the
<a href="http://effbot.org/zone/element-lib.htm#prettyprint">
<cite>Element Library Functions</cite></a> page for an example.

<p>To convert between XML and strings, you can use the <b>XML</b>,
<b>fromstring</b>, and <b>tostring</b> helpers:</p>

<pre>
from elementtree.ElementTree import XML, fromstring, tostring

elem = XML(text)

elem = fromstring(text) # <i>same as XML(text)</i>

text = tostring(elem)
</pre>

<h2 id='xml-namespaces'>XML Namespaces</h2>

<p>The <b>elementtree</b> module supports <b>qualified names</b>
(QNames) for element tags and attribute names.  A qualified name
consists of a (uri, local name) pair.</p>

<p>Qualified names was introduced with the <a
href="http://www.w3.org/TR/REC-xml-names/">XML Namespace
specification</a>.</p>

<p>The element type represents a qualified name pair, also called
<a href="http://www.jclark.com/xml/xmlns.htm"><i>universal name</i></a>,
as a string of the form "<b>{uri}local</b>".  This syntax can be used
both for tag names and for attribute keys.</p>

<p>The following example creates an element where the tag
is the qualified name pair <b>(http://spam.effbot.org, egg)</b>.</p>

<pre>
from elementtree.ElementTree import Element

elem = Element("{http://spam.effbot.org}egg"}
</pre>

<p>If you save this to an XML file, the writer will automatically
generate proper XML namespace declarations, and pick a suitable
prefix.  When you load an XML file, the parser converts qualified
tag and attribute names to the element syntax.</p>

<p>Note that the standard parser discards namespace prefixes and
declarations, so if you need to access the prefixes later on (e.g.
to handle qualified names in attribute values or character data),
you must use an alternate parser.  For more information on this
topic, see the articles
<a href='element-iterparse.htm'><cite>The ElementTree iterparse Function</cite></a> and
<a href='elementsoap-3.htm'><cite>Dealing with Qualified Names</cite>.</a></p>
</div>
</body>
</html>
