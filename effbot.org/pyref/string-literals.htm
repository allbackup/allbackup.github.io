<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>String&nbsp;literals</title><script type="text/javascript">effbot_page_id=1588;</script></head><body><div id="doc2" class="yui-t2"><div id="hd"><!-- header --></div><!-- hd --><div id="bd"><!-- body --><p class="note" style="text-align: center"><strong>

We're back after a server migration that caused effbot.org to fall
over a bit harder than expected.  Expect some glitches.

</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">String&nbsp;literals</h1></div><!-- yui-g --><body><p>COMMENT: <strong>Needs refactoring!</strong></p>

<p>String literals are described by the following lexical definitions:</p>

<p>stringliteral ::= [[stringprefix][1]]([shortstring][2] | [ longstring][3])
stringprefix ::= &#8220;r&#8221; | &#8220;u&#8221; | &#8220;ur&#8221; | &#8220;R&#8221; | &#8220;U&#8221; | &#8220;UR&#8221; | &#8220;Ur&#8221; | &#8220;uR&#8221;
shortstring ::= &#8220;&#8217;&#8221; [shortstringitem][4]* &#8220;&#8217;&#8221; | &#8216;&#8221;&#8217; [shortstringitem][4]* &#8216;&#8221;&#8217;
longstring ::= &#8220;&#8221;&#8217;&#8221; [longstringitem][5]* &#8220;&#8221;&#8217;&#8221;
<code>| '"""' [longstringitem][5]\* '"""'</code>
shortstringitem ::= [shortstringchar][6] | [ escapeseq][7]
longstringitem ::= [ longstringchar][8] | [escapeseq][7]
shortstringchar ::= &lt;any source character except &#8220;" or newline or the quote&gt;
longstringchar ::= &lt;any source character except &#8220;"&gt;
escapeseq ::= &#8220;" &lt;any ASCII character&gt;</p>

<p>One syntactic restriction not indicated by these productions is that whitespace is not allowed between the [stringprefix][1] and the rest of the string literal. The source character set is defined by the encoding declaration; it is ASCII if no encoding declaration is given in the source file; see section&#160;[2.1.4][10].</p>

<p>In plain English: String literals can be enclosed in matching single quotes (<code>'</code>) or double quotes (<code>"</code>). They can also be enclosed in matching groups of three single or double quotes (these are generally referred to as <em>triple-quoted strings</em>). The backslash (<code>\</code>) character is used to escape characters that otherwise have a special meaning, such as newline, backslash itself, or the quote character. String literals may optionally be prefixed with a letter &#8220;r&#8221; or &#8220;R&#8221;; such strings are called <em>raw strings</em> and use different rules for interpreting backslash escape sequences. A prefix of &#8220;u&#8221; or &#8220;U&#8221; makes the string a Unicode string. Unicode strings use the Unicode character set as defined by the Unicode Consortium and ISO&#160;10646. Some additional escape sequences, described below, are available in Unicode strings. The two prefix characters may be combined; in this case, &#8220;u&#8221; must appear before &#8220;r&#8221;.</p>

<p>In triple-quoted strings, unescaped newlines and quotes are allowed (and are retained), except that three unescaped quotes in a row terminate the string. (A <code>`quote'' is the character used to open the string, i.e. either</code>&#8217;<code>or</code>&#8220;`.)</p>

<p>Unless an &#8220;r&#8221; or &#8220;R&#8221; prefix is present, escape sequences in strings are interpreted according to rules similar to those used by Standard C. The recognized escape sequences are:</p>

<pre><code>`\newline` Ignored
`\\` Backslash (`\`)
`\'` Single quote (`'`)
`\"` Double quote (`"`)
`\a` ASCII Bell (BEL)
`\b` ASCII Backspace (BS)
`\f` ASCII Formfeed (FF)
`\n` ASCII Linefeed (LF)
`\N{name}` Character named name in the Unicode database (Unicode only)
`\r` ASCII Carriage Return (CR)
`\t` ASCII Horizontal Tab (TAB)
`\uxxxx` Character with 16-bit hex value xxxx (Unicode only) (1)
`\Uxxxxxxxx` Character with 32-bit hex value  xxxxxxxx (Unicode only) (2)
`\v` ASCII Vertical Tab (VT)
`\ooo` Character with octal value ooo (3,5)
`\xhh` Character with hex value hh (4,5)
</code></pre>

<p>Notes:</p>

<p>(1) Individual code units which form parts of a surrogate pair can be
encoded using this escape sequence.</p>

<p>(2) Any Unicode character can be encoded this way, but characters
outside the Basic Multilingual Plane (BMP) will be encoded using a
surrogate pair if Python is compiled to use 16-bit code units (the
default). Individual code units which form parts of a surrogate pair
can be encoded using this escape sequence.</p>

<p>(3) As in Standard C, up to three octal digits are accepted.</p>

<p>(4) Unlike in Standard C, at most two hex digits are accepted.</p>

<p>(5) In a string literal, hexadecimal and octal escapes denote the byte
with the given value; it is not necessary that the byte encodes a
character in the source character set. In a Unicode literal, these
escapes denote a Unicode character with the given value.</p>

<p>Unlike Standard C, all unrecognized escape sequences are left in the
string unchanged, i.e., <em>the backslash is left in the string</em>. (This
behavior is useful when debugging: if an escape sequence is mistyped,
the resulting output is more easily recognized as broken.) It is also
important to note that the escape sequences marked as &#8220;(Unicode
only)&#8221; in the table above fall into the category of unrecognized
escapes for non-Unicode string literals.</p>

<p>When an &#8220;r&#8221; or &#8220;R&#8221; prefix is present, a character following a
backslash is included in the string without change, and <em>all
backslashes are left in the string</em>. For example, the string literal
<code>r"\n"</code> consists of two characters: a backslash and a lowercase
&#8220;n&#8221;. String quotes can be escaped with a backslash, but the backslash
remains in the string; for example, <code>r"\""</code> is a valid string literal
consisting of two characters: a backslash and a double quote; <code>r"\"</code>
is not a valid string literal (even a raw string cannot end in an odd
number of backslashes). Specifically, <em>a raw string cannot end in a
single backslash</em> (since the backslash would escape the following
quote character). Note also that a single backslash followed by a
newline is interpreted as those two characters as part of the string,
<em>not</em> as a line continuation.</p>

<p>When an &#8220;r&#8221; or &#8220;R&#8221; prefix is used in conjunction with a &#8220;u&#8221; or &#8220;U&#8221;
prefix, then the <code>\uXXXX</code> and <code>\UXXXXXXXX</code> escape sequences are
processed while <em>all other backslashes are left in the string</em>. For
example, the string literal <code>ur"\u0062\n"</code> consists of three Unicode
characters: <code>LATIN SMALL LETTER B',</code>REVERSE SOLIDUS&#8217;, and `LATIN
SMALL LETTER N&#8217;. Backslashes can be escaped with a preceding
backslash; however, both remain in the string. As a result, <code>\uXXXX</code>
escape sequences are only recognized when there are an odd number of
backslashes.</p>

<h2 id="string-literal-concatenation">String literal concatenation</h2>

<p>Multiple adjacent string literals (delimited by whitespace), possibly
using different quoting conventions, are allowed, and their meaning is
the same as their concatenation. Thus, <code>"hello" 'world'</code> is
equivalent to <code>"helloworld"</code>. This feature can be used to reduce the
number of backslashes needed, to split long strings conveniently
across long lines, or even to add comments to parts of strings, for
example:</p>

<pre class="python"><code>re.compile("[A-Za-z_]"       # letter or underscore
           "[A-Za-z0-9_]*"   # letter, digit or underscore
          )
</code></pre>

<p>Note that this feature is defined at the syntactical level, but
implemented at compile time. The `+&#8217; operator must be used to
concatenate string expressions at run time. Also note that literal
concatenation can use different quoting styles for each component
(even mixing raw strings and triple quoted strings).</p></body><div class="yui-g"></div><!-- yui-g --></div><!-- content --></div><!-- yui-b --></div><!-- yui-main --><div class="yui-b"><div id='menu'></div><!-- menu --></div><!-- yui-b --></div><!-- bd --><div id="ft"><!-- footer --></div><!-- ft --></div><!-- doc --><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
