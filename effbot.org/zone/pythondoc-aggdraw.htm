<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The aggdraw&nbsp;Module</title></head><body data-page-id="228"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The aggdraw&nbsp;Module</h1></div><div class="yui-ge"><div class="yui-u first"><p>An AGG-based drawing interface.
</p><p>
The aggdraw module implements the basic
<a href="http://effbot.org/zone/wck.htm">WCK 2D Drawing Interface</a>
on top of
<a href="http://www.antigrain.com/">the AGG library</a>.
This library supports anti-aliasing and alpha compositing, but is
otherwise fully compatible with the WCK renderer.
</p><p>Examples:</p><pre class="python">
<span class="pycomment"># draw cross on top of PIL image</span>
d = aggdraw.Draw(im)
p = aggdraw.Pen(<span class="pystring">"black"</span>, 0.5)
d.line((0, 0, 500, 500), p)
d.line((0, 500, 500, 0), p)
d.flush()</pre><pre class="python">
<span class="pycomment"># draw cross on internal image memory</span>
d = aggdraw.Draw(<span class="pystring">"RGB"</span>, (320, 200), <span class="pystring">"white"</span>)
p = aggdraw.Pen(<span class="pystring">"black"</span>, 0.5)
d.line((0, 0, 500, 500), p)
d.line((0, 500, 500, 0), p)
s = d.tostring()</pre><h2>Module Contents</h2><dl><dt><a id="aggdraw.Brush-function" name="aggdraw.Brush-function"><b>Brush(color, opacity=255)</b></a> [<a href="#aggdraw.Brush-function">#</a>]</dt><dd>
<p>Creates a brush object.</p><dl><dt><i>color</i></dt><dd>
Brush color.  This can be a color tuple, a CSS-style color
    name, or a color integer (0xaarrggbb).</dd>
<dt><i>opacity=</i></dt><dd>
Optional brush opacity.  The default is to create a
    solid brush.</dd>
<dt>Returns:</dt><dd>
A brush object.</dd>
</dl><br />
</dd>
<dt><b>Dib</b> (class)  [<a href="#aggdraw.Dib-class">#</a>]</dt><dd>
<p>(Windows only; new in 1.2) Creates a drawing interface object that
can be copied to a window.</p><dl><dt><i>mode</i></dt><dd>
A mode string.  In the current release, this string
    must be &#8220;RGB&#8221;.</dd>
<dt><i>size</i></dt><dd>
The image size, as a 2-tuple.</dd>
<dt><i>color</i></dt><dd>
An optional background color specifier.  If a mode
    string was given, this is used to initialize the image memory.
    If omitted, it defaults to white with full alpha.</dd>
</dl><br />
<p>For more information about this class, see <a href="#aggdraw.Dib-class"><i>The Dib Class</i></a>.</p></dd>
<dt><b>Draw(image_or_mode, size, color=None)</b> (class) [<a href="#aggdraw.Draw-class">#</a>]</dt><dd>
<p>Creates a drawing interface object.</p><dl><dt><i>image_or_mode</i></dt><dd>
A PIL Image, or a mode string.  The following
    modes are supported: &#8220;L&#8221;, &#8220;RGB&#8221;, &#8220;RGBA&#8221;, &#8220;BGR&#8221;, &#8220;BGRA&#8221;.</dd>
<dt><i>size</i></dt><dd>
If a mode string was given, this argument gives the
    image size, as a 2-tuple.</dd>
<dt><i>color</i></dt><dd>
An optional background color specifier.  If a mode
    string was given, this is used to initialize the image memory.
    If omitted, it defaults to white with full alpha.</dd>
</dl><br />
<p>For more information about this class, see <a href="#aggdraw.Draw-class"><i>The Draw Class</i></a>.</p></dd>
<dt><a id="aggdraw.Font-function" name="aggdraw.Font-function"><b>Font(color, file, size=12, opacity=255)</b></a> [<a href="#aggdraw.Font-function">#</a>]</dt><dd>
<p>Font factory.  This creates a font object for use with <a class="link" href="#aggdraw.Draw.text-method"><b>text</b></a>
and <a class="link" href="#aggdraw.Draw.textsize-method"><b>textsize</b></a>, from a truetype font file.

</p><dl><dt><i>color</i></dt><dd>
Font color.  This can be a color tuple, a CSS-style color
    name, or a color integer (0xaarrggbb).</dd>
<dt><i>file</i></dt><dd>
Font source file.</dd>
<dt><i>size=</i></dt><dd>
Optional font size, in pixels.</dd>
<dt><i>opacity=</i></dt><dd>
Optional font opacity.</dd>
<dt>Returns:</dt><dd>
A font object.</dd>
</dl><br />
</dd>
<dt><b>Path()</b> (class) [<a href="#aggdraw.Path-class">#</a>]</dt><dd>
<p>(experimental) Path factory.</p><dl><dt>Returns:</dt><dd>
A path object.</dd>
</dl><br />
<p>For more information about this class, see <a href="#aggdraw.Path-class"><i>The Path Class</i></a>.</p></dd>
<dt><a id="aggdraw.Pen-function" name="aggdraw.Pen-function"><b>Pen(color, width=1, opacity=255)</b></a> [<a href="#aggdraw.Pen-function">#</a>]</dt><dd>
<p>Creates a pen object.</p><dl><dt><i>color</i></dt><dd>
Pen color.  This can be a color tuple, a CSS-style color
    name, or a color integer (0xaarrggbb).</dd>
<dt><i>width=</i></dt><dd>
Optional pen width.</dd>
<dt><i>opacity=</i></dt><dd>
Optional pen opacity.  The default is to create a
    solid pen.</dd>
<dt>Returns:</dt><dd>
A pen object.</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Symbol-function" name="aggdraw.Symbol-function"><b>Symbol(path)</b></a> [<a href="#aggdraw.Symbol-function">#</a>]</dt><dd>
<p>(experimental) Symbol factory.  This creates a symbol object for use
with <a class="link" href="#aggdraw.Draw.symbol-method"><b>symbol</b></a>.

</p><dl><dt><i>path</i></dt><dd>
An SVG-style path descriptor.  The following operators
   are supported: M (move), L (line), H (horizontal line), V
   (vertical line), C (cubic bezier), S (smooth cubic bezier), Q
   (quadratic bezier), T (smooth quadratic bezier), and Z (close
   path).  Use lower-case operators for relative coordinates,
   upper-case for absolute coordinates.</dd>
<dt>Returns:</dt><dd>
A symbol object.</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.VERSION-variable" name="aggdraw.VERSION-variable"><b>VERSION</b></a> (variable) [<a href="#aggdraw.VERSION-variable">#</a>]</dt><dd>
<p>Version number, given as a string.  If this variable doesn&#8217;t exist,
the version is &#8220;1.1b1&#8221; or earlier.</p></dd>
</dl><h2><a id="aggdraw.Dib-class" name="aggdraw.Dib-class">The Dib Class</a></h2><dl><dt><b>Dib</b> (class)  [<a href="#aggdraw.Dib-class">#</a>]</dt><dd>
<p>(Windows only; new in 1.2) Creates a drawing interface object that
can be copied to a window.  This object has the same methods as
<a class="link" href="#aggdraw.Draw-class"><b>Draw</b></a>, plus an <a class="link" href="#aggdraw.Dib.expose-method"><b>expose</b></a> method that copies the
contents to a given window.
</p><p>Example:</p><pre>
d = aggdraw.Dib("RGB", (800, 600), "white")
...
d.expose(hwnd=window)
</pre><dl><dt><i>mode</i></dt><dd>
A mode string.  In the current release, this string
    must be &#8220;RGB&#8221;.</dd>
<dt><i>size</i></dt><dd>
The image size, as a 2-tuple.</dd>
<dt><i>color</i></dt><dd>
An optional background color specifier.  If a mode
    string was given, this is used to initialize the image memory.
    If omitted, it defaults to white with full alpha.</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Dib.expose-method" name="aggdraw.Dib.expose-method"><b>expose(hwnd=0, hdc=0)</b></a> [<a href="#aggdraw.Dib.expose-method">#</a>]</dt><dd>
<p>Copies the contents of the drawing object to the given window
or device context.  You must provide either a <b>hwnd</b> or a
<b>hdc</b> keyword argument.

</p><dl><dt><i>hwnd=</i></dt><dd>
A HWND handle, cast to an integer.</dd>
<dt><i>hdc=</i></dt><dd>
A HDC handle, cast to an integer.</dd>
</dl><br />
</dd>
</dl><h2><a id="aggdraw.Draw-class" name="aggdraw.Draw-class">The Draw Class</a></h2><dl><dt><b>Draw(image_or_mode, size, color=None)</b> (class) [<a href="#aggdraw.Draw-class">#</a>]</dt><dd>
<p>Creates a drawing interface object.  The constructor can
either take a PIL Image object, or mode and size specifiers.
</p><p>Examples:</p><pre>
d = aggdraw.Draw(im)

d = aggdraw.Draw("RGB", (800, 600), "white")
</pre><dl><dt><i>image_or_mode</i></dt><dd>
A PIL Image, or a mode string.  The following
    modes are supported: &#8220;L&#8221;, &#8220;RGB&#8221;, &#8220;RGBA&#8221;, &#8220;BGR&#8221;, &#8220;BGRA&#8221;.</dd>
<dt><i>size</i></dt><dd>
If a mode string was given, this argument gives the
    image size, as a 2-tuple.</dd>
<dt><i>color</i></dt><dd>
An optional background color specifier.  If a mode
    string was given, this is used to initialize the image memory.
    If omitted, it defaults to white with full alpha.</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.arc-method" name="aggdraw.Draw.arc-method"><b>arc(xy, start, end, pen=None)</b></a> [<a href="#aggdraw.Draw.arc-method">#</a>]</dt><dd>
<p>Draws an arc.</p><dl><dt><i>xy</i></dt><dd>
A 4-element Python sequence (x, y, x, y), with the
   upper left corner given first.</dd>
<dt><i>start</i></dt><dd>
Start angle.</dd>
<dt><i>end</i></dt><dd>
End angle.</dd>
<dt><i>pen</i></dt><dd>
Optional pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.chord-method" name="aggdraw.Draw.chord-method"><b>chord(xy, start, end, pen=None, brush=None)</b></a> [<a href="#aggdraw.Draw.chord-method">#</a>]</dt><dd>
<p>Draws a chord.
</p><p>
If a brush is given, it is used to fill the chord.  If a pen
is given, it is used to draw an outline around the chord.
Either one (or both) can be left out.

</p><dl><dt><i>xy</i></dt><dd>
A 4-element Python sequence (x, y, x, y), with the
   upper left corner given first.</dd>
<dt><i>start</i></dt><dd>
Start angle.</dd>
<dt><i>end</i></dt><dd>
End angle.</dd>
<dt><i>pen</i></dt><dd>
Optional pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory.
</dd>
<dt><i>brush</i></dt><dd>
Optional brush object created by the <a class="link" href="#aggdraw.Brush-function"><b>Brush</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.ellipse-method" name="aggdraw.Draw.ellipse-method"><b>ellipse(xy, pen, brush)</b></a> [<a href="#aggdraw.Draw.ellipse-method">#</a>]</dt><dd>
<p>Draws an ellipse.
</p><p>
If a brush is given, it is used to fill the ellipse.  If a pen
is given, it is used to draw an outline around the ellipse.
Either one (or both) can be left out.

</p><dl><dt><i>xy</i></dt><dd>
A bounding rectangle, given as a 4-element Python
   sequence (x, y, x, y), with the upper left corner given
   first.  To draw a circle, make sure the coordinates form
   a square.</dd>
<dt><i>pen</i></dt><dd>
Optional pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory.
</dd>
<dt><i>brush</i></dt><dd>
Optional brush created by the <a class="link" href="#aggdraw.Brush-function"><b>Brush</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.flush-method" name="aggdraw.Draw.flush-method"><b>flush()</b></a> [<a href="#aggdraw.Draw.flush-method">#</a>]</dt><dd>
<p>Updates the associated image.  If the drawing area is attached
to a PIL Image object, this method must be called to make sure
that the image updated.</p></dd>
<dt><a id="aggdraw.Draw.fromstring-method" name="aggdraw.Draw.fromstring-method"><b>fromstring(data)</b></a> [<a href="#aggdraw.Draw.fromstring-method">#</a>]</dt><dd>
<p>Copies data from a string buffer to the drawing area.</p><dl><dt><i>data</i></dt><dd>
A string containing packed image data, compatible
  with PIL&#8217;s <b>tostring</b> method.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.line-method" name="aggdraw.Draw.line-method"><b>line(xy, pen)</b></a> [<a href="#aggdraw.Draw.line-method">#</a>]</dt><dd>
<p>Draws a line.
</p><p>Examples:</p><pre>
# <i>a cross</i>
pen = aggdraw.Pen("red")
draw.line((x0, y0, x1, y1), pen)
draw.line((x0, y1, x1, y0), pen)

# <i>a character</i>
draw.line((0, 0, 20, 100, 30, 50, 40, 100, 60, 0), pen)
</pre><dl><dt><i>xy</i></dt><dd>
A Python sequence (x, y, x, y, &#8230;).  If more than two
   coordinate pairs are given, they are connected in order, to
   form a polyline.</dd>
<dt><i>pen</i></dt><dd>
A pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory
   method.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.path-method" name="aggdraw.Draw.path-method"><b>path(xy, path, pen=None, brush=None)</b></a> [<a href="#aggdraw.Draw.path-method">#</a>]</dt><dd>
<p>(experimental) Draws a path at the given positions.
If a brush is given, it is used to fill the path.  If a pen
is given, it is used to draw an outline around the path.
Either one (or both) can be left out.</p><dl><dt><i>xy</i></dt><dd>
A Python sequence (x, y, x, y, &#8230;).</dd>
<dt><i>path</i></dt><dd>
A symbol object created by the <a class="link" href="#aggdraw.Path-class"><b>Path</b></a> factory.
</dd>
<dt><i>pen</i></dt><dd>
Optional pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory.
</dd>
<dt><i>brush</i></dt><dd>
Optional brush object created by the <a class="link" href="#aggdraw.Brush-function"><b>Brush</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.pieslice-method" name="aggdraw.Draw.pieslice-method"><b>pieslice(xy, start, end, pen=None, brush=None)</b></a> [<a href="#aggdraw.Draw.pieslice-method">#</a>]</dt><dd>
<p>Draws a pieslice.
</p><p>
If a brush is given, it is used to fill the pieslice.  If a pen
is given, it is used to draw an outline around the pieslice.
Either one (or both) can be left out.

</p><dl><dt><i>xy</i></dt><dd>
A 4-element Python sequence (x, y, x, y), with the
   upper left corner given first.</dd>
<dt><i>start</i></dt><dd>
Start angle.</dd>
<dt><i>end</i></dt><dd>
End angle.</dd>
<dt><i>pen</i></dt><dd>
Optional pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory.
</dd>
<dt><i>brush</i></dt><dd>
Optional brush object created by the <a class="link" href="#aggdraw.Brush-function"><b>Brush</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.polygon-method" name="aggdraw.Draw.polygon-method"><b>polygon(xy, pen, brush)</b></a> [<a href="#aggdraw.Draw.polygon-method">#</a>]</dt><dd>
<p>Draws a polygon.
</p><p>
If a brush is given, it is used to fill the polygon. If a pen is
given, it is used to draw an outline around the polygon. Either
one (or both) can be left out.

</p><dl><dt><i>xy</i></dt><dd>
A Python sequence (x, y, x, y, &#8230;).</dd>
<dt><i>pen</i></dt><dd>
Optional pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory.
</dd>
<dt><i>brush</i></dt><dd>
Optional brush object created by the <a class="link" href="#aggdraw.Brush-function"><b>Brush</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.rectangle-method" name="aggdraw.Draw.rectangle-method"><b>rectangle(xy, pen, brush)</b></a> [<a href="#aggdraw.Draw.rectangle-method">#</a>]</dt><dd>
<p>Draws a rectangle.
</p><p>
If a brush is given, it is used to fill the rectangle.  If a pen
is given, it is used to draw an outline around the rectangle.
Either one (or both) can be left out.

</p><dl><dt><i>xy</i></dt><dd>
A 4-element Python sequence (x, y, x, y), with the
   upper left corner given first.</dd>
<dt><i>pen</i></dt><dd>
Optional pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory.
</dd>
<dt><i>brush</i></dt><dd>
Optional brush created by the <a class="link" href="#aggdraw.Brush-function"><b>Brush</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.setantialias-method" name="aggdraw.Draw.setantialias-method"><b>setantialias(flag)</b></a> [<a href="#aggdraw.Draw.setantialias-method">#</a>]</dt><dd>
<p>(Experimental) Controls anti-aliasing.</p><dl><dt><i>flag</i></dt><dd>
True to enable anti-aliasing, false to disable it.</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.settransform-method" name="aggdraw.Draw.settransform-method"><b>settransform(transform=None)</b></a> [<a href="#aggdraw.Draw.settransform-method">#</a>]</dt><dd>
<p>(Experimental) Replaces the current drawing transform.
</p><p>Example:</p><pre>
draw.settransform((dx, dy))
</pre><dl><dt><i>transform</i></dt><dd>
The new transform.  In the current version,
    this must be either a (dx, dy) translation tuple, or a
    PIL-style (a, b, c, d, e, f) affine transform tuple.  If
    the transform is omitted, it is reset.</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.symbol-method" name="aggdraw.Draw.symbol-method"><b>symbol(xy, symbol, pen=None, brush=None)</b></a> [<a href="#aggdraw.Draw.symbol-method">#</a>]</dt><dd>
<p>(experimental) Draws a symbol at the given positions.
If a brush is given, it is used to fill the symbol.  If a pen
is given, it is used to draw an outline around the symbol.
Either one (or both) can be left out.</p><dl><dt><i>xy</i></dt><dd>
A Python sequence (x, y, x, y, &#8230;).</dd>
<dt><i>symbol</i></dt><dd>
A symbol object created by the <a class="link" href="#aggdraw.Symbol-function"><b>Symbol</b></a> factory.
</dd>
<dt><i>pen</i></dt><dd>
Optional pen object created by the <a class="link" href="#aggdraw.Pen-function"><b>Pen</b></a> factory.
</dd>
<dt><i>brush</i></dt><dd>
Optional brush object created by the <a class="link" href="#aggdraw.Brush-function"><b>Brush</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.text-method" name="aggdraw.Draw.text-method"><b>text(xy, text, font)</b></a> [<a href="#aggdraw.Draw.text-method">#</a>]</dt><dd>
<p>Draws a text string at the given position, using the given
font.
</p><p>Example:</p><pre>
font = aggdraw.Font(black, times)
draw.text((100, 100), "hello, world", font)
</pre><dl><dt><i>xy</i></dt><dd>
A 2-element Python sequence (x, y).</dd>
<dt><i>text</i></dt><dd>
An 8-bit string containing ASCII text, or a Unicode
    string.</dd>
<dt><i>font</i></dt><dd>
A font object created by the <a class="link" href="#aggdraw.Font-function"><b>Font</b></a> factory.
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.textsize-method" name="aggdraw.Draw.textsize-method"><b>textsize(text, font)</b></a> [<a href="#aggdraw.Draw.textsize-method">#</a>]</dt><dd>
<p>Determines the size of a text string.</p><dl><dt><i>text</i></dt><dd>
An 8-bit string containing ASCII text, or a Unicode string.</dd>
<dt><i>font</i></dt><dd>
A font object created by the <a class="link" href="#aggdraw.Font-function"><b>Font</b></a> factory.
</dd>
<dt>Returns:</dt><dd>
A (width, height) tuple.</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Draw.tostring-method" name="aggdraw.Draw.tostring-method"><b>tostring(data)</b></a> [<a href="#aggdraw.Draw.tostring-method">#</a>]</dt><dd>
<p>Copies data from the drawing area to a string.</p><dl><dt>Returns:</dt><dd>
A string containing packed image data, compatible with
  PIL&#8217;s <b>fromstring</b> method.
</dd>
</dl><br />
</dd>
</dl><h2><a id="aggdraw.Path-class" name="aggdraw.Path-class">The Path Class</a></h2><dl><dt><b>Path()</b> (class) [<a href="#aggdraw.Path-class">#</a>]</dt><dd>
<p>(experimental) Path factory.  This creates a path object for use
with <a class="link" href="#aggdraw.Draw.path-method"><b>path</b></a>.

</p><dl><dt>Returns:</dt><dd>
A path object.</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Path.close-method" name="aggdraw.Path.close-method"><b>close()</b></a> [<a href="#aggdraw.Path.close-method">#</a>]</dt><dd>
<p>Closes the current path.</p></dd>
<dt><a id="aggdraw.Path.coords-method" name="aggdraw.Path.coords-method"><b>coords()</b></a> [<a href="#aggdraw.Path.coords-method">#</a>]</dt><dd>
<p>Returns the coordinates for this path.  Curves are flattened
before being returned.</p><dl><dt>Returns:</dt><dd>
A Python sequence (x, y, x, y, &#8230;).</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Path.curveto-method" name="aggdraw.Path.curveto-method"><b>curveto(x1, y1, x2, y2, x, y)</b></a> [<a href="#aggdraw.Path.curveto-method">#</a>]</dt><dd>
<p>Adds a bezier curve segment to the path.</p><dl><dt><i>x1</i></dt><dd>
</dd>
<dt><i>y1</i></dt><dd>
</dd>
<dt><i>x2</i></dt><dd>
</dd>
<dt><i>y2</i></dt><dd>
</dd>
<dt><i>x</i></dt><dd>
</dd>
<dt><i>y</i></dt><dd>
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Path.lineto-method" name="aggdraw.Path.lineto-method"><b>lineto(x, y)</b></a> [<a href="#aggdraw.Path.lineto-method">#</a>]</dt><dd>
<p>Adds a line segment to the path.</p><dl><dt><i>x</i></dt><dd>
</dd>
<dt><i>y</i></dt><dd>
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Path.moveto-method" name="aggdraw.Path.moveto-method"><b>moveto(x, y)</b></a> [<a href="#aggdraw.Path.moveto-method">#</a>]</dt><dd>
<p>Moves the path pointer to the given location.</p><dl><dt><i>x</i></dt><dd>
</dd>
<dt><i>y</i></dt><dd>
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Path.rcurveto-method" name="aggdraw.Path.rcurveto-method"><b>rcurveto(x1, y1, x2, y2, x, y)</b></a> [<a href="#aggdraw.Path.rcurveto-method">#</a>]</dt><dd>
<p>Adds a bezier curve segment to the path, using relative coordinates.
Same as <a class="link" href="#aggdraw.Path.curveto-method"><b>curveto</b></a>, but the coordinates are relative to
the current position.

</p><dl><dt><i>x1</i></dt><dd>
</dd>
<dt><i>y1</i></dt><dd>
</dd>
<dt><i>x2</i></dt><dd>
</dd>
<dt><i>y2</i></dt><dd>
</dd>
<dt><i>x</i></dt><dd>
</dd>
<dt><i>y</i></dt><dd>
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Path.rlineto-method" name="aggdraw.Path.rlineto-method"><b>rlineto(x, y)</b></a> [<a href="#aggdraw.Path.rlineto-method">#</a>]</dt><dd>
<p>Adds a line segment to the path, using relative coordinates.
Same as <a class="link" href="#aggdraw.Path.lineto-method"><b>lineto</b></a>, but the coordinates are relative to
the current position.

</p><dl><dt><i>x</i></dt><dd>
</dd>
<dt><i>y</i></dt><dd>
</dd>
</dl><br />
</dd>
<dt><a id="aggdraw.Path.rmoveto-method" name="aggdraw.Path.rmoveto-method"><b>rmoveto(x, y)</b></a> [<a href="#aggdraw.Path.rmoveto-method">#</a>]</dt><dd>
<p>Moves the path pointer to the given location, relative to
the current position.</p><dl><dt><i>x</i></dt><dd>
</dd>
<dt><i>y</i></dt><dd>
</dd>
</dl><br />
</dd>
</dl></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
