
@@module zlib

<h1>zlib&#8212;Compression compatible with gzip</h1>

<p>For applications that require data compression, the functions in this
module allow compression and decompression, using the zlib library. The
zlib library has its own home page at {@link http://www.gzip.org/zlib/}.
There are known incompatibilities between the Python module and versions
of the zlib library earlier than 1.1.3; 1.1.3 has a security
vulnerability, so we recommend using 1.1.4 or later.

<p>The available exception and functions in this module are:

@@exception error

<p>Exception raised on compression and decompression errors.

@@function adler32(string[, value])

<p>Computes a Adler-32 checksum of {@var string}. (An Adler-32 checksum
is almost as reliable as a CRC32 but can be computed much more quickly.)
If {@var value} is present, it is used as the starting value of the
checksum; otherwise, a fixed default value is used. This allows
computing a running checksum over the concatenation of several input
strings. The algorithm is not cryptographically strong, and should not
be used for authentication or digital signatures. Since the algorithm is
designed for use as a checksum algorithm, it is not suitable for use as
a general hash algorithm.

@@function compress(string[, level])

<p>Compresses the data in {@var string}, returning a string contained
compressed data. {@var level} is an integer from {@code 1} to {@code 9}
controlling the level of compression; {@code 1} is fastest and produces
the least compression, {@code 9} is slowest and produces the most. The
default value is {@code 6}. Raises the {@link error} exception if any
error occurs.

@@function compressobj([level])

<p>Returns a compression object, to be used for compressing data streams
that won't fit into memory at once. {@var level} is an integer from
{@code 1} to {@code 9} controlling the level of compression; {@code 1}
is fastest and produces the least compression, {@code 9} is slowest and
produces the most. The default value is {@code 6}.

@@function crc32(string[, value])

<p>Computes a CRC (Cyclic Redundancy Check) checksum of {@var string}.
If {@var value} is present, it is used as the starting value of the
checksum; otherwise, a fixed default value is used. This allows
computing a running checksum over the concatenation of several input
strings. The algorithm is not cryptographically strong, and should not
be used for authentication or digital signatures. Since the algorithm is
designed for use as a checksum algorithm, it is not suitable for use as
a general hash algorithm.

@@function decompress(string[, wbits[, bufsize]])

<p>Decompresses the data in {@var string}, returning a string containing
the uncompressed data. The {@var wbits} parameter controls the size of
the window buffer. If {@var bufsize} is given, it is used as the initial
size of the output buffer. Raises the {@link error} exception if any
error occurs.

<p>The absolute value of {@var wbits} is the base two logarithm of the
size of the history buffer (the &#8220;window size&#8221;) used when
compressing data. Its absolute value should be between 8 and 15 for the
most recent versions of the zlib library, larger values resulting in
better compression at the expense of greater memory usage. The default
value is 15. When {@var wbits} is negative, the standard gzip header is
suppressed; this is an undocumented feature of the zlib library, used
for compatibility with unzip's compression file format.

<p>{@var bufsize} is the initial size of the buffer used to hold
decompressed data. If more space is required, the buffer size will be
increased as needed, so you don't have to get this value exactly right;
tuning it will only save a few calls to {@link c:malloc}. The default
size is 16384.

@@function decompressobj([wbits])

<p>Returns a decompression object, to be used for decompressing data
streams that won't fit into memory at once. The {@var wbits} parameter
controls the size of the window buffer.

@@text 

<p>Compression objects support the following methods:

@@method compress(string)

<p>Compress {@var string}, returning a string containing compressed data
for at least part of the data in {@var string}. This data should be
concatenated to the output produced by any preceding calls to the {@link
compress} method. Some input may be kept in internal buffers for later
processing.

@@method flush([mode])

<p>All pending input is processed, and a string containing the remaining
compressed output is returned. {@var mode} can be selected from the
constants {@code Z_SYNC_FLUSH}, {@code Z_FULL_FLUSH}, or {@code
Z_FINISH}, defaulting to {@code Z_FINISH}. {@code Z_SYNC_FLUSH} and
{@code Z_FULL_FLUSH} allow compressing further strings of data and are
used to allow partial error recovery on decompression, while {@code
Z_FINISH} finishes the compressed stream and prevents compressing any
more data. After calling {@link flush} with {@var mode} set to {@code
Z_FINISH}, the {@link compress} method cannot be called again; the only
realistic action is to delete the object.

@@text 

<p>Decompression objects support the following methods, and two
attributes:

@@attribute unused_data

<p>A string which contains any bytes past the end of the compressed
data. That is, this remains {@code ""} until the last byte that contains
compression data is available. If the whole string turned out to contain
compressed data, this is {@code ""}, the empty string.

<p>The only way to determine where a string of compressed data ends is
by actually decompressing it. This means that when compressed data is
contained part of a larger file, you can only find the end of it by
reading data and feeding it followed by some non-empty string into a
decompression object's {@link decompress} method until the {@link
unused_data} attribute is no longer the empty string.

@@attribute unconsumed_tail

<p>A string that contains any data that was not consumed by the last
{@link decompress} call because it exceeded the limit for the
uncompressed data buffer. This data has not yet been seen by the zlib
machinery, so you must feed it (possibly with further data concatenated
to it) back to a subsequent {@link decompress} method call in order to
get correct output.

@@method decompress(string[, max_length])

<p>Decompress {@var string}, returning a string containing the
uncompressed data corresponding to at least part of the data in {@var
string}. This data should be concatenated to the output produced by any
preceding calls to the {@link decompress} method. Some of the input data
may be preserved in internal buffers for later processing.

<p>If the optional parameter {@var max_length} is supplied then the
return value will be no longer than {@var max_length}. This may mean
that not all of the compressed input can be processed; and unconsumed
data will be stored in the attribute {@link unconsumed_tail}. This
string must be passed to a subsequent call to {@link decompress} if
decompression is to continue. If {@var max_length} is not supplied then
the whole input is decompressed, and {@link unconsumed_tail} is an empty
string.

@@method flush()

<p>All pending input is processed, and a string containing the remaining
uncompressed output is returned. After calling {@link flush}, the {@link
decompress} method cannot be called again; the only realistic action is
to delete the object.

@@text 

@see 
{@link gzip Module gzip}

Reading and writing gzip-format files.
@see 
{@link http://www.gzip.org/zlib/ http://www.gzip.org/zlib/}

The zlib library home page.
