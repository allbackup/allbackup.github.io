
@@module marshal

<h1>marshal&#8212;Internal Python object serialization</h1>

<p>This module contains functions that can read and write Python values
in a binary format. The format is specific to Python, but independent of
machine architecture issues (e.g., you can write a Python value to a
file on a PC, transport the file to a Sun, and read it back there).
Details of the format are undocumented on purpose; it may change between
Python versions (although it rarely does).{@link footnote:9695}

<p>This is not a general &#8220;persistence&#8221; module. For general
persistence and transfer of Python objects through RPC calls, see the
modules {@link pickle} and {@link shelve}. The {@link marshal} module
exists mainly to support reading and writing the
&#8220;pseudo-compiled&#8221; code for Python modules of .pyc files.
Therefore, the Python maintainers reserve the right to modify the
marshal format in backward incompatible ways should the need arise. If
you're serializing and de-serializing Python objects, use the {@link
pickle} module instead.


<p class='warning'><b>Warning:</b> The {@link marshal} module is not
intended to be secure against erroneous or maliciously constructed data.
Never unmarshal data received from an untrusted or unauthenticated
source.

<p>Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
{@link None}, integers, long integers, floating point numbers, strings,
Unicode objects, tuples, lists, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).

<p>Caveat: On machines where C's {@code long int} type has more than 32
bits (such as the DEC Alpha), it is possible to create plain Python
integers that are longer than 32 bits. If such an integer is marshaled
and read back in on a machine where C's {@code long int} type has only
32 bits, a Python long integer object is returned instead. While of a
different type, the numeric value is the same. (This behavior is new in
Python 2.2. In earlier versions, all but the least-significant 32 bits
of the value were lost, and a warning message was printed.)

<p>There are functions that read/write files as well as functions
operating on strings.

<p>The module defines these functions:

@@function dump(value, file[, version])

<p>Write the value on the open file. The value must be a supported type.
The file must be an open file object such as {@code sys.stdout} or
returned by {@link open} or {@link posix.popen}. It must be opened in
binary mode ({@code 'wb'} or {@code 'w+b'}).

<p>If the value has (or contains an object that has) an unsupported
type, a {@link exceptions.ValueError} exception is raised -- but garbage
data will also be written to the file. The object will not be properly
read back by {@link load}.
<blockquote>
@since New in version 2.4: The version argument indicates the data format that dump should use (see below). <br />
</blockquote>

@@function load(file)

<p>Read one value from the open file and return it. If no valid value is
read, raise {@link exceptions.EOFError}, {@link exceptions.ValueError}
or {@link exceptions.TypeError}. The file must be an open file object
opened in binary mode ({@code 'rb'} or {@code 'r+b'}).

<p class='warning'><b>Warning:</b> If an object containing an
unsupported type was marshalled with {@link dump}, {@link load} will
substitute {@link None} for the unmarshallable type.

@@function dumps(value[, version])

<p>Return the string that would be written to a file by {@code
dump(}{@var value}, {@var file}). The value must be a supported type.
Raise a {@link exceptions.ValueError} exception if value has (or
contains an object that has) an unsupported type.
<blockquote>
@since New in version 2.4: The version argument indicates the data format that dumps should use (see below). <br />
</blockquote>

@@function loads(string)

<p>Convert the string to a value. If no valid value is found, raise
{@link exceptions.EOFError}, {@link exceptions.ValueError} or {@link
exceptions.TypeError}. Extra characters in the string are ignored.

@@text 

<p>In addition, the following constants are defined:

@@variable version

<p>Indicates the format that the module uses. Version 0 is the
historical format, version 1 (added in Python 2.4) shares interned
strings. The current version is 1.
<blockquote>
@since New in version 2.4. <br />
</blockquote>
@@footnote foot9695
<p>The name of this module stems from a bit of terminology used by the
designers of Modula-3 (amongst others), who use the term
&#8220;marshalling&#8221; for shipping of data around in a
self-contained form. Strictly speaking, &#8220;to marshal&#8221; means
to convert some data from internal to external form (in an RPC buffer
for instance) and &#8220;unmarshalling&#8221; for the reverse process.
