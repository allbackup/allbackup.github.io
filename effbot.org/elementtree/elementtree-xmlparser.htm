<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The XMLParser&nbsp;API</title></head><body data-page-id="1992"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The XMLParser&nbsp;API</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | August 2007</p><p>The <strong>XMLParser</strong> class provides a fast and simple XML parser.  The class implements the standard <a href="/zone/consumer.htm">consumer interface</a> for incoming data, and calls methods on a <em>target</em> object for start and end tags, and character data sections found in the XML stream.</p><p>The cElementTree implementation of this class is 25-30% faster
than Python&#8217;s standard Expat interface, and nearly twice as
fast as <strong>xml.sax</strong>.</p><p>Note that in ElementTree 1.2 and earlier, this class was called <strong>XMLTreeBuilder</strong>.  The old name is still available, but should be avoided in new code.  To write backwards compatible code, you can do:</p><pre class="python"><span class="pykeyword">try</span>:
    XMLParser = ET.XMLParser
<span class="pykeyword">except</span> AttributeError:
    XMLParser = ET.XMLTreeBuilder</pre><p>where ET is an ElementTree implementation, and then refer to <strong>XMLParser</strong> when creating new parsers.</p><h2 id="example">Example&#160;<a class="nav" href="#example" title="bookmark!">#</a></h2><p>The following example defines a simple &#8220;echo&#8221; target, which simply prints each target method call.  It then feeds it a single element, in two parts.</p><pre class="python"><span class="pykeyword">import</span> xml.etree.ElementTree <span class="pykeyword">as</span> ET <span class="pycomment"># example</span>

<span class="pykeyword">class</span> <span class="pyclass">EchoTarget</span>:
    <span class="pykeyword">def</span> <span class="pyfunction">start</span>(self, tag, attrib):
        <span class="pykeyword">print</span> <span class="pystring">"start"</span>, tag, attrib
    <span class="pykeyword">def</span> <span class="pyfunction">end</span>(self, tag):
        <span class="pykeyword">print</span> <span class="pystring">"end"</span>, tag
    <span class="pykeyword">def</span> <span class="pyfunction">data</span>(self, data):
        <span class="pykeyword">print</span> <span class="pystring">"data"</span>, repr(data)
    <span class="pykeyword">def</span> <span class="pyfunction">close</span>(self):
        <span class="pykeyword">print</span> <span class="pystring">"close"</span>

target = EchoTarget()
parser = ET.XMLParser(target=target)
parser.feed(<span class="pystring">"&lt;element&gt;some "</span>)
parser.feed(<span class="pystring">"text&lt;/element&gt;"</span>)
parser.close()</pre><p>This prints:</p><pre><code>start element None
data 'some '
data 'text'
end element
close
</code></pre><p class="note"><strong>Note</strong>: cElementTree 1.0.5 and earlier doesn&#8217;t call the target&#8217;s <strong>close</strong> method when using custom targets.  This has been fixed in 1.0.6.</p><h2 id="tag-ET.XMLParser">The XMLParser Class&#160;<a class="nav" href="#tag-ET.XMLParser" title="bookmark!">#</a></h2><p><strong>parser = XMLParser()</strong></p><p><strong>parser = XMLParser(options)</strong></p><p>Creates a parser instance.  The following options can be used, given as keyword arguments:</p><p><strong>target=</strong> Target object.  If omitted, the parser uses an instance of the standard <a href="elementtree-treebuilder.htm"><strong>TreeBuilder</strong></a> class.</p><p><strong>encoding=</strong> Optional encoding.  If given, this value overrides the encoding specified in the XML file itself.</p><p>Implementations may support additional options.  The result when using positional arguments instead of keyword arguments is undefined.</p><h2 id="attributes">Attributes&#160;<a class="nav" href="#attributes" title="bookmark!">#</a></h2><p>The parser attributes are not standardized.  This section describes some common attributes.  If present, they behave as documented in this section.</p><h3 id="tag-ET.XMLParser.entity">entity&#160;<a class="nav" href="#tag-ET.XMLParser.entity" title="bookmark!">#</a></h3><p><strong>parser.entity</strong> (read-only but mutable dictionary)</p><p>A dictionary that contains replacement text for pre-defined named entities.  The dictionary can be modified, but not replaced.</p><p>This attribute is supported by ElementTree and cElementTree.</p><p>To use this, create a parser and initialize this dictionary <em>before</em> you start parsing.  To update the dictionary, use the <strong>update</strong> method, or set individual entries:</p><pre class="python">parser = ET.XMLParser()
parser.entity[<span class="pystring">"nbsp"</span>] = unichr(160)</pre><h3 id="tag-ET.XMLParser.target">target&#160;<a class="nav" href="#tag-ET.XMLParser.target" title="bookmark!">#</a></h3><p><strong>parser.target</strong> (read-only object)</p><p>The current target.</p><p>This attribute is supported by cElementTree and by ElementTree 1.3 and later.</p><h3 id="tag-ET.XMLParser.version">version&#160;<a class="nav" href="#tag-ET.XMLParser.version" title="bookmark!">#</a></h3><p><strong>parser.version</strong> (read-only string)</p><p>Information about the underlying parser implementation.  When present, this attribute should have the form &#8220;<em>parser version</em>&#8220;, e.g. &#8220;Expat 2.0.0&#8221;.</p><p>This attribute is supported by cElementTree and by ElementTree 1.3 and later.</p><h2 id="methods">Methods&#160;<a class="nav" href="#methods" title="bookmark!">#</a></h2><p>The basic consumer interface (<strong>feed</strong>, <strong>close</strong>) is supported by all implementations.  Specific implementations may provide additional methods, for example to allow reuse of a configured parser.</p><h3 id="tag-ET.XMLParser.feed">feed&#160;<a class="nav" href="#tag-ET.XMLParser.feed" title="bookmark!">#</a></h3><p><strong>parser.feed(data)</strong></p><p>Feeds data to the parser.  The argument should be an 8-bit
string buffer containing encoded data.</p><p>The parser will parse as much of the XML stream as it can on each call, and call methods on the target object accordingly.</p><p>In 1.3 and later, this method raises a <strong>ParseError</strong> exception (a subclass of <strong>SyntaxError</strong>) if the source data is malformed.</p><p>In earlier versions, the exception used is implementation dependent; cElementTree uses a <strong>SyntaxError</strong> exception, other versions usually propagate the exception raised by the internal parser implementation (e.g. <strong>pyexpat.error</strong> for <strong>pyexpat</strong>-based parsers).</p><h3 id="tag-ET.XMLParser.close">close&#160;<a class="nav" href="#tag-ET.XMLParser.close" title="bookmark!">#</a></h3><p><strong>parser.close()</strong> &#8658; element</p><p>Finishes feeding of data to this parser.  This tells the parser to process any remaining data in the feed buffer, and then returns the value returned by the target&#8217;s <strong>close</strong> method (this is usually an element object).</p><p>In 1.3 and later, this method raises a <strong>ParseError</strong> exception if the source data is malformed.  See <strong>feed</strong> for more on how exceptions are handled in earlier versions.</p><p class="note"><strong>Note:</strong> In cElementTree 1.0.5 and earlier, this method doesn&#8217;t
call the target&#8217;s <strong>close</strong> method when used with a custom target.  To work around this, make sure that your target&#8217;s <strong>close</strong> method can be called twice, and use an explicit call to <strong>parser.target.close()</strong> to get data from the target.  This has been fixed in cElementTree 1.0.6.</p><h2 id="the-target-interface">The Target Interface&#160;<a class="nav" href="#the-target-interface" title="bookmark!">#</a></h2><p>This section describes the full target interface supported by the parser. Note that not all methods are supported by all implementations; for example, the current cElementTree parser supports more methods than the Python implementations.</p><p>The <strong>start</strong>, <strong>end</strong>, <strong>data</strong>, and <strong>close</strong> methods are supported by all implementation.</p><h3 id="tag-ET.XMLParserTarget.start">start&#160;<a class="nav" href="#tag-ET.XMLParserTarget.start" title="bookmark!">#</a></h3><p><strong>target.start(tag, attr_dict)</strong></p><p>Called for start tags.  The tag is given as a universal name, the attributes as a Python dictionary.</p><h3 id="tag-ET.XMLParserTarget.data">data&#160;<a class="nav" href="#tag-ET.XMLParserTarget.data" title="bookmark!">#</a></h3><p><strong>target.data(text)</strong></p><p>Called for character data and expanded character references and entities.  May be called more than once for each character data section.  The text string may be either an 8-bit string containing ASCII data, or a Unicode string.</p><h3 id="tag-ET.XMLParserTarget.end">end&#160;<a class="nav" href="#tag-ET.XMLParserTarget.end" title="bookmark!">#</a></h3><p><strong>target.end(tag)</strong></p><p>Called for end tags.</p><h3 id="tag-ET.XMLParserTarget.close">close&#160;<a class="nav" href="#tag-ET.XMLParserTarget.close" title="bookmark!">#</a></h3><p><strong>target.close()</strong> &#8658; object</p><p>Called when the parser is done.  The return value represents the built structure, and can be any kind object (including None).  It is passed on by the parser&#8217;s <strong>close</strong> method.</p><h3 id="tag-ET.XMLParserTarget.xml">xml&#160;<a class="nav" href="#tag-ET.XMLParserTarget.xml" title="bookmark!">#</a></h3><p><strong>target.xml(encoding, standalone)</strong></p><p>Called when the parser sees the XML declaration.  Not supported by current releases.</p><h3 id="tag-ET.XMLParserTarget.doctype">doctype&#160;<a class="nav" href="#tag-ET.XMLParserTarget.doctype" title="bookmark!">#</a></h3><p><strong>target.doctype(name, public_identifier, system_identifier)</strong></p><p>Called when the parser sees the doctype declaration.  Supported by ElementTree 1.3 and later.</p><h3 id="tag-ET.XMLParserTarget.pi">pi&#160;<a class="nav" href="#tag-ET.XMLParserTarget.pi" title="bookmark!">#</a></h3><p><strong>target.pi(target, data)</strong></p><p>Called for processing instructions.  Supported by cElementTree 1.0.3 and later.  Not supported by ElementTree.</p><h3 id="tag-ET.XMLParserTarget.comment">comment&#160;<a class="nav" href="#tag-ET.XMLParserTarget.comment" title="bookmark!">#</a></h3><p><strong>target.comment(text)</strong></p><p>Called for comment blocks.  Supported by cElementTree 1.0.3 and later.  Not supported by ElementTree.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to elementtree index page.">::: elementtree :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><a href="#example">Example</a></li><li><a href="#tag-ET.XMLParser">The XMLParser Class</a></li><li><a href="#attributes">Attributes</a></li><li><ul><li><a href="#tag-ET.XMLParser.entity">entity</a></li><li><a href="#tag-ET.XMLParser.target">target</a></li><li><a href="#tag-ET.XMLParser.version">version</a></li></ul></li><li><a href="#methods">Methods</a></li><li><ul><li><a href="#tag-ET.XMLParser.feed">feed</a></li><li><a href="#tag-ET.XMLParser.close">close</a></li></ul></li><li><a href="#the-target-interface">The Target Interface</a></li><li><ul><li><a href="#tag-ET.XMLParserTarget.start">start</a></li><li><a href="#tag-ET.XMLParserTarget.data">data</a></li><li><a href="#tag-ET.XMLParserTarget.end">end</a></li><li><a href="#tag-ET.XMLParserTarget.close">close</a></li><li><a href="#tag-ET.XMLParserTarget.xml">xml</a></li><li><a href="#tag-ET.XMLParserTarget.doctype">doctype</a></li><li><a href="#tag-ET.XMLParserTarget.pi">pi</a></li><li><a href="#tag-ET.XMLParserTarget.comment">comment</a></li></ul></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
