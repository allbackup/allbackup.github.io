<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Is there an equivalent of C's "?:" ternary&nbsp;operator?</title></head><body data-page-id="866"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Is there an equivalent of C's "?:" ternary&nbsp;operator?</h1></div><div class="yui-ge"><div class="yui-u first"><p>Yes.  In Python 2.5 and later, you can use:</p><pre><code>&lt;true-value&gt; if &lt;condition&gt; else &lt;false-value&gt;
</code></pre><p>Note that the condition is in the middle of the expression, not at the front.  This syntax is similar to the list comprehension syntax.</p><p>In earlier versions, you can often mimic &#8220;a ? b : c&#8221; with &#8220;a and b or c&#8221;, but there&#8217;s a flaw: if b is zero (or empty, or None &#8212; anything that tests false) then c will be selected instead. In many cases you can prove by looking at the code that this can&#8217;t happen (e.g. because b is a constant or has a type that can never be false), but in general this can be a problem.</p><p>Tim Peters (who wishes it was Steve Majewski) suggested the following solution:</p><pre><code>(a and [b] or [c])[0].
</code></pre><p>Because [b] is a singleton list it is never false, so the wrong path is never taken; then applying [0] to the whole thing gets the b or c that you really wanted. Ugly, but it gets you there in the rare cases where it is really inconvenient to rewrite your code using &#8216;if&#8217;.</p><p>The best course is usually to write a simple if&#8230;else statement.  Another solution is to implement the &#8220;?:&#8221; operator as a function:</p><pre class="python"><span class="pykeyword">def</span> <span class="pyfunction">q</span>(cond,on_true,on_false):
    <span class="pykeyword">if</span> cond:
        result = on_true
    <span class="pykeyword">else</span>:
        result = on_false
    <span class="pykeyword">if</span> callable(result):
        <span class="pykeyword">return</span> result()
    <span class="pykeyword">return</span> result</pre><p>In most cases you&#8217;ll pass b and c directly: q(a,b,c). To avoid evaluating b or c when they shouldn&#8217;t be, encapsulate them within a <a href="/pyref/lambda.htm"><strong>lambda</strong></a> function, e.g.: q(a,lambda: b, lambda: c).</p><h2 id="history">History&#160;<a class="nav" href="#history" title="bookmark!">#</a></h2><p>It has been asked <em>why</em> Python didn&#8217;t have an if-then-else expression. There are several answers: many languages do just fine without one; it can easily lead to less readable code; no sufficiently &#8220;Pythonic&#8221; syntax had been discovered; a search of the standard library found remarkably few places where using an if-then-else expression would make the code more understandable.</p><p>In 2002, <a href="http://www.python.org/dev/peps/pep-0308/"><strong>PEP 308</strong></a> was written proposing several possible syntaxes and the community was asked to vote on the issue. The vote was inconclusive. Most people liked one of the syntaxes, but also hated other syntaxes; many votes implied that people preferred no ternary operator rather than having a syntax they hated.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><a href="#history">History</a></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
