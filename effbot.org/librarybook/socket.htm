<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The socket&nbsp;module</title></head><body data-page-id="659"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The socket&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>This module implements an interface to the socket communication
layer. You can create both client and server sockets using this
module.</p><p>Let&#8217;s start with a client example. The following client connects
to a time protocol server, reads the 4-byte response, and converts
it to a time value.</p><div class="example">
<b style="example">Example: Using the socket
module to implement a time client</b>
<pre>
# File: <a href="socket/socket-example-1.py">socket-example-1.py</a>

import socket
import struct, time

# server
HOST = "www.python.org"
PORT = 37

# reference time (in seconds since 1900-01-01 00:00:00)
TIME1970 = 2208988800L # 1970-01-01 00:00:00

# connect to server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))

# read 4 bytes, and convert to time value
t = s.recv(4)
t = struct.unpack("!I", t)[0]
t = int(t - TIME1970)

s.close()

# print results
print "server time is", time.ctime(t)
print "local clock is", int(time.time()) - t, "seconds off"

</pre><pre class="computeroutput" moreinfo="NONE">
server time is Sat Oct 09 16:42:36 1999
local clock is 8 seconds off
</pre></div><p>The <b>socket</b> factory function creates a new socket of the
given type (in this case, an Internet stream socket, also known as
a TCP socket). The <b>connect</b> method attempts to connect this
socket to the given server. Once that has succeeded, the
<b>recv</b> method is used to read data.</p><p>Creating a server socket is done in a similar fashion. But
instead of connecting to a server, you <b>bind</b> the socket to
a port on the local machine, tell it to <b>listen</b> for
incoming connection requests, and process each request as fast as
possible.</p><p>The following example creates a time server, bound to port 8037
on the local machine (port numbers up to 1024 are reserved for
system services, and you have to have root privileges to use them
to implement services on a Unix system):</p><div class="example">
<b style="example">Example: Using the socket
module to implement a time server</b>
<pre>
# File: <a href="socket/socket-example-2.py">socket-example-2.py</a>

import socket
import struct, time

# user-accessible port
PORT = 8037

# reference time
TIME1970 = 2208988800L

# establish server
service = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
service.bind(("", PORT))
service.listen(1)

print "listening on port", PORT

while 1:
    # serve forever
    channel, info = service.accept()
    print "connection from", info
    t = int(time.time()) + TIME1970
    t = struct.pack("!I", t)
    channel.send(t) # send timestamp
    channel.close() # disconnect

</pre><pre class="computeroutput" moreinfo="NONE">
listening on port 8037
connection from ('127.0.0.1', 1469)
connection from ('127.0.0.1', 1470)
...
</pre></div><p>The <b>listen</b> call tells the socket that we&#8217;re willing to
accept incoming connections. The argument gives the size of the
connection queue (which holds connection requests that our program
hasn&#8217;t gotten around to processing yet). Finally, the
<b>accept</b> loop returns the current time to any client bold
enough to connect.</p><p>Note that the <b>accept</b> function returns a new socket
object, which is directly connected to the client. The original
socket is only used to establish the connection; all further
traffic goes via the new socket.</p><p>To test this server, we can use the following generalized
version of our first example:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: A time protocol
client</b>
<pre class="wide">
# File: <a href="socket/timeclient.py">timeclient.py</a>

import socket
import struct, sys, time

# default server
host = "localhost"
port = 8037

# reference time (in seconds since 1900-01-01 00:00:00)
TIME1970 = 2208988800L # 1970-01-01 00:00:00

def gettime(host, port):
    # fetch time buffer from stream server
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    t = s.recv(4)
    s.close()
    t = struct.unpack("!I", t)[0]
    return int(t - TIME1970)

if __name__ == "__main__":
    # command line utility
    if sys.argv[1:]:
        host = sys.argv[1]
        if sys.argv[2:]:
            port = int(sys.argv[2])
        else:
            port = 37 # default for public servers

    t = gettime(host, port)
    print "server time is", time.ctime(t)
    print "local clock is", int(time.time()) - t, "seconds off"

</pre><pre class="computeroutput wide" moreinfo="NONE">
server time is Sat Oct 09 16:58:50 1999
local clock is 0 seconds off
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>This sample script can also be used as a module; to get the
current time from a server, import the <b>timeclient</b> module,
and call the <b>gettime</b> function.</p><p>This far, we&#8217;ve used stream (or TCP) sockets. The time protocol
specification also mentions UDP sockets, or datagrams. Stream
sockets work pretty much like a phone line; you&#8217;ll know if someone
at the remote end picks up the receiver, and you&#8217;ll notice when she
hangs up. In contrast, sending datagrams is more like shouting into
a dark room. There might be someone there, but you won&#8217;t know
unless she replies.</p><p>You don&#8217;t need to connect to send data over a datagram socket.
Instead, you use the <b>sendto</b> method, which takes both the
data and the address of the receiver. To read incoming datagrams,
use the <b>recvfrom</b> method.</p><div class="example">
<b style="example">Example: Using the socket
module to implement a datagram time client</b>
<pre>
# File: <a href="socket/socket-example-4.py">socket-example-4.py</a>

import socket
import struct, time

# server
HOST = "localhost"
PORT = 8037

# reference time (in seconds since 1900-01-01 00:00:00)
TIME1970 = 2208988800L # 1970-01-01 00:00:00

# connect to server
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# send empty packet
s.sendto("", (HOST, PORT))

# read 4 bytes from server, and convert to time value
t, server = s.recvfrom(4)
t = struct.unpack("!I", t)[0]
t = int(t - TIME1970)

s.close()

print "server time is", time.ctime(t)
print "local clock is", int(time.time()) - t, "seconds off"

</pre><pre class="computeroutput" moreinfo="NONE">
server time is Sat Oct 09 16:42:36 1999
local clock is 8 seconds off
</pre></div><p>Note that <b>recvfrom</b> returns two values; the actual data,
and the address of the sender. Use the latter if you need to
reply.</p><p>And here&#8217;s the corresponding server:</p><div class="example">
<b style="example">Example: Using the socket
module to implement a datagram time server</b>
<pre>
# File: <a href="socket/socket-example-5.py">socket-example-5.py</a>

import socket
import struct, time

# user-accessible port
PORT = 8037

# reference time
TIME1970 = 2208988800L

# establish server
service = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
service.bind(("", PORT))

print "listening on port", PORT

while 1:
    # serve forever
    data, client = service.recvfrom(0)
    print "connection from", client
    t = int(time.time()) + TIME1970
    t = struct.pack("!I", t)
    service.sendto(t, client) # send timestamp

</pre><pre class="computeroutput" moreinfo="NONE">
listening on port 8037
connection from ('127.0.0.1', 1469)
connection from ('127.0.0.1', 1470)
...
</pre></div><p>The main difference is that the server uses <b>bind</b> to
assign a known port number to the socket, and sends data back to
the client address returned by <b>recvfrom</b>.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
