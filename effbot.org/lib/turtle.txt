
@@module turtle

<h1>turtle&#8212;Turtle graphics for Tk</h1>

<p>Availability: Tk.

<p>The {@link turtle} module provides turtle graphics primitives, in
both an object-oriented and procedure-oriented ways. Because it uses
{@link Tkinter} for the underlying graphics, it needs a version of
python installed with Tk support.

<p>The procedural interface uses a pen and a canvas which are
automagically created when any of the functions are called.

<p>The {@link turtle} module defines the following functions:

@@function degrees()

<p>Set angle measurement units to degrees.

@@function radians()

<p>Set angle measurement units to radians.

@@function reset()

<p>Clear the screen, re-center the pen, and set variables to the default
values.

@@function clear()

<p>Clear the screen.

@@function tracer(flag)

<p>Set tracing on/off (according to whether flag is true or not).
Tracing means line are drawn more slowly, with an animation of an arrow
along the line.

@@function forward(distance)

<p>Go forward {@var distance} steps.

@@function backward(distance)

<p>Go backward {@var distance} steps.

@@function left(angle)

<p>Turn left {@var angle} units. Units are by default degrees, but can
be set via the {@link degrees} and {@link radians} functions.

@@function right(angle)

<p>Turn right {@var angle} units. Units are by default degrees, but can
be set via the {@link degrees} and {@link radians} functions.

@@function up()

<p>Move the pen up -- stop drawing.

@@function down()

<p>Move the pen down -- draw when moving.

@@function width(width)

<p>Set the line width to {@var width}.

@@function color(s)
@@function color((r, g, b))
@@function color(r, g, b)

<p>Set the pen color. In the first form, the color is specified as a Tk
color specification as a string. The second form specifies the color as
a tuple of the RGB values, each in the range [0..1]. For the third form,
the color is specified giving the RGB values as three separate
parameters (each in the range [0..1]).

@@function write(text[, move])

<p>Write {@var text} at the current pen position. If {@var move} is
true, the pen is moved to the bottom-right corner of the text. By
default, {@var move} is false.

@@function fill(flag)

<p>The complete specifications are rather complex, but the recommended
usage is: call {@code fill(1)} before drawing a path you want to fill,
and call {@code fill(0)} when you finish to draw the path.

@@function circle(radius[, extent])

<p>Draw a circle with radius {@var radius} whose center-point is {@var
radius} units left of the turtle. {@var extent} determines which part of
a circle is drawn: if not given it defaults to a full circle.

<p>If {@var extent} is not a full circle, one endpoint of the arc is the
current pen position. The arc is drawn in a counter clockwise direction
if {@var radius} is positive, otherwise in a clockwise direction. In the
process, the direction of the turtle is changed by the amount of the
{@var extent}.

@@function goto(x, y)
@@function goto((x, y))

<p>Go to co-ordinates {@var x}, {@var y}. The co-ordinates may be
specified either as two separate arguments or as a 2-tuple.

@@text 

<p>This module also does {@code from math import *}, so see the
documentation for the {@link math} module for additional constants and
functions useful for turtle graphics.

@@function demo()

<p>Exercise the module a bit.

@@exception Error

<p>Exception raised on any error caught by this module.

@@text 

<p>For examples, see the code of the {@link demo} function.

<p>This module defines the following classes:

@@class Pen()

<p>Define a pen. All above functions can be called as a methods on the
given pen. The constructor automatically creates a canvas do be drawn
on.

@@class RawPen(canvas)

<p>Define a pen which draws on a canvas {@var canvas}. This is useful if
you want to use the module to create graphics in a &#8220;real&#8221;
program.

@@text 

<h2>Pen and RawPen Objects</h2>

<p>{@link Pen} and {@link RawPen} objects have all the global functions
described above, except for {@link demo} as methods, which manipulate
the given pen.

<p>The only method which is more powerful as a method is {@link
degrees}.

@@method RawPen.degrees([fullcircle])

<p>{@var fullcircle} is by default 360. This can cause the pen to have
any angular units whatever: give {@var fullcircle} 2* for radians, or
400 for gradians.

@@text 
