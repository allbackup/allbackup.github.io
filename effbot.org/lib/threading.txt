
@@module threading

<h1>threading&#8212;Higher-level threading interface</h1>

<p>This module constructs higher-level threading interfaces on top of
the lower level {@link thread} module.

<p>The {@link dummythreading dummy_threading} module is provided for
situations where {@link threading} cannot be used because {@link thread}
is missing.

<p>This module defines the following functions and objects:

@@function activeCount()

<p>Return the number of currently active {@link Thread} objects. The
returned count is equal to the length of the list returned by {@link
enumerate}. A function that returns the number of currently active
threads.

@@function Condition()

<p>A factory function that returns a new condition variable object. A
condition variable allows one or more threads to wait until they are
notified by another thread.

@@function currentThread()

<p>Return the current {@link Thread} object, corresponding to the
caller's thread of control. If the caller's thread of control was not
created through the {@link threading} module, a dummy thread object with
limited functionality is returned.

@@function enumerate()

<p>Return a list of all currently active {@link Thread} objects. The
list includes daemonic threads, dummy thread objects created by {@link
currentThread}, and the main thread. It excludes terminated threads and
threads that have not yet been started.

@@function Event()

<p>A factory function that returns a new event object. An event manages
a flag that can be set to true with the {@link set} method and reset to
false with the {@link clear} method. The {@link wait} method blocks
until the flag is true.

@@class local

<p>A class that represents thread-local data. Thread-local data are data
whose values are thread specific. To manage thread-local data, just
create an instance of {@link local} (or a subclass) and store attributes
on it:

<pre>
mydata = threading.local()
mydata.x = 1
</pre>


<p>The instance's values will be different for separate threads.

<p>For more details and extensive examples, see the documentation string
of the {@link _threading_local} module.
<blockquote>
@since New in version 2.4. <br />
</blockquote>

@@function Lock()

<p>A factory function that returns a new primitive lock object. Once a
thread has acquired it, subsequent attempts to acquire it block, until
it is released; any thread may release it.

@@function RLock()

<p>A factory function that returns a new reentrant lock object. A
reentrant lock must be released by the thread that acquired it. Once a
thread has acquired a reentrant lock, the same thread may acquire it
again without blocking; the thread must release it once for each time it
has acquired it.

@@function Semaphore([value])

<p>A factory function that returns a new semaphore object. A semaphore
manages a counter representing the number of {@link release} calls minus
the number of {@link acquire} calls, plus an initial value. The {@link
acquire} method blocks if necessary until it can return without making
the counter negative. If not given, {@var value} defaults to 1.

@@function BoundedSemaphore([value])

<p>A factory function that returns a new bounded semaphore object. A
bounded semaphore checks to make sure its current value doesn't exceed
its initial value. If it does, {@link exceptions.ValueError} is raised.
In most situations semaphores are used to guard resources with limited
capacity. If the semaphore is released too many times it's a sign of a
bug. If not given, {@var value} defaults to 1.

@@class Thread

<p>A class that represents a thread of control. This class can be safely
subclassed in a limited fashion.

@@class Timer

<p>A thread that executes a function after a specified interval has
passed.

@@function settrace(func)

<p>Set a trace function for all threads started from the {@link
threading} module. The {@var func} will be passed to {@link
sys.settrace} for each thread, before its {@link run} method is called.
<blockquote>
@since New in
version 2.3. <br />
</blockquote>

@@function setprofile(func)

<p>Set a profile function for all threads started from the {@link
threading} module. The {@var func} will be passed to {@link
sys.setprofile} for each thread, before its {@link run} method is
called.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@text 

<p>Detailed interfaces for the objects are documented below.

<p>The design of this module is loosely based on Java's threading model.
However, where Java makes locks and condition variables basic behavior
of every object, they are separate objects in Python. Python's {@link
Thread} class supports a subset of the behavior of Java's Thread class;
currently, there are no priorities, no thread groups, and threads cannot
be destroyed, stopped, suspended, resumed, or interrupted. The static
methods of Java's Thread class, when implemented, are mapped to
module-level functions.

<p>All of the methods described below are executed atomically.

<h2>Lock Objects</h2>

<p>A primitive lock is a synchronization primitive that is not owned by
a particular thread when locked. In Python, it is currently the lowest
level synchronization primitive available, implemented directly by the
{@link thread} extension module.

<p>A primitive lock is in one of two states, &#8220;locked&#8221; or
&#8220;unlocked&#8221;. It is created in the unlocked state. It has two
basic methods, {@link acquire} and {@link release}. When the state is
unlocked, {@link acquire} changes the state to locked and returns
immediately. When the state is locked, {@link acquire} blocks until a
call to {@link release} in another thread changes it to unlocked, then
the {@link acquire} call resets it to locked and returns. The {@link
release} method should only be called in the locked state; it changes
the state to unlocked and returns immediately. When more than one thread
is blocked in {@link acquire} waiting for the state to turn to unlocked,
only one thread proceeds when a {@link release} call resets the state to
unlocked; which one of the waiting threads proceeds is not defined, and
may vary across implementations.

<p>All methods are executed atomically.

@@method Lock.acquire([blocking = 1])

<p>Acquire a lock, blocking or non-blocking.

<p>When invoked without arguments, block until the lock is unlocked,
then set it to locked, and return true.

<p>When invoked with the {@var blocking} argument set to true, do the
same thing as when called without arguments, and return true.

<p>When invoked with the {@var blocking} argument set to false, do not
block. If a call without an argument would block, return false
immediately; otherwise, do the same thing as when called without
arguments, and return true.

@@method Lock.release()

<p>Release a lock.

<p>When the lock is locked, reset it to unlocked, and return. If any
other threads are blocked waiting for the lock to become unlocked, allow
exactly one of them to proceed.

<p>Do not call this method when the lock is unlocked.

<p>There is no return value.

@@text 

<h2>RLock Objects</h2>

<p>A reentrant lock is a synchronization primitive that may be acquired
multiple times by the same thread. Internally, it uses the concepts of
&#8220;owning thread&#8221; and &#8220;recursion level&#8221; in
addition to the locked/unlocked state used by primitive locks. In the
locked state, some thread owns the lock; in the unlocked state, no
thread owns it.

<p>To lock the lock, a thread calls its {@link acquire} method; this
returns once the thread owns the lock. To unlock the lock, a thread
calls its {@link release} method. {@link acquire}/{@link release} call
pairs may be nested; only the final {@link release} (the {@link release}
of the outermost pair) resets the lock to unlocked and allows another
thread blocked in {@link acquire} to proceed.

@@method RLock.acquire([blocking = 1])

<p>Acquire a lock, blocking or non-blocking.

<p>When invoked without arguments: if this thread already owns the lock,
increment the recursion level by one, and return immediately. Otherwise,
if another thread owns the lock, block until the lock is unlocked. Once
the lock is unlocked (not owned by any thread), then grab ownership, set
the recursion level to one, and return. If more than one thread is
blocked waiting until the lock is unlocked, only one at a time will be
able to grab ownership of the lock. There is no return value in this
case.

<p>When invoked with the {@var blocking} argument set to true, do the
same thing as when called without arguments, and return true.

<p>When invoked with the {@var blocking} argument set to false, do not
block. If a call without an argument would block, return false
immediately; otherwise, do the same thing as when called without
arguments, and return true.

@@method RLock.release()

<p>Release a lock, decrementing the recursion level. If after the
decrement it is zero, reset the lock to unlocked (not owned by any
thread), and if any other threads are blocked waiting for the lock to
become unlocked, allow exactly one of them to proceed. If after the
decrement the recursion level is still nonzero, the lock remains locked
and owned by the calling thread.

<p>Only call this method when the calling thread owns the lock. Do not
call this method when the lock is unlocked.

<p>There is no return value.

@@text 

<h2>Condition Objects</h2>

<p>A condition variable is always associated with some kind of lock;
this can be passed in or one will be created by default. (Passing one in
is useful when several condition variables must share the same lock.)

<p>A condition variable has {@link acquire} and {@link release} methods
that call the corresponding methods of the associated lock. It also has
a {@link wait} method, and {@link notify} and {@link notifyAll} methods.
These three must only be called when the calling thread has acquired the
lock.

<p>The {@link wait} method releases the lock, and then blocks until it
is awakened by a {@link notify} or {@link notifyAll} call for the same
condition variable in another thread. Once awakened, it re-acquires the
lock and returns. It is also possible to specify a timeout.

<p>The {@link notify} method wakes up one of the threads waiting for the
condition variable, if any are waiting. The {@link notifyAll} method
wakes up all threads waiting for the condition variable.

<p>Note: the {@link notify} and {@link notifyAll} methods don't release
the lock; this means that the thread or threads awakened will not return
from their {@link wait} call immediately, but only when the thread that
called {@link notify} or {@link notifyAll} finally relinquishes
ownership of the lock.

<p>Tip: the typical programming style using condition variables uses the
lock to synchronize access to some shared state; threads that are
interested in a particular change of state call {@link wait} repeatedly
until they see the desired state, while threads that modify the state
call {@link notify} or {@link notifyAll} when they change the state in
such a way that it could possibly be a desired state for one of the
waiters. For example, the following code is a generic producer-consumer
situation with unlimited buffer capacity:

<pre>
# Consume one item
cv.acquire()
while not an_item_is_available():
    cv.wait()
get_an_available_item()
cv.release()

# Produce one item
cv.acquire()
make_an_item_available()
cv.notify()
cv.release()
</pre>


<p>To choose between {@link notify} and {@link notifyAll}, consider
whether one state change can be interesting for only one or several
waiting threads. E.g. in a typical producer-consumer situation, adding
one item to the buffer only needs to wake up one consumer thread.

@@class Condition([lock])

<p>If the {@var lock} argument is given and not {@code None}, it must be
a {@link Lock} or {@link RLock} object, and it is used as the underlying
lock. Otherwise, a new {@link RLock} object is created and used as the
underlying lock.

@@method Condition.acquire(*args)

<p>Acquire the underlying lock. This method calls the corresponding
method on the underlying lock; the return value is whatever that method
returns.

@@method Condition.release()

<p>Release the underlying lock. This method calls the corresponding
method on the underlying lock; there is no return value.

@@method Condition.wait([timeout])

<p>Wait until notified or until a timeout occurs. This must only be
called when the calling thread has acquired the lock.

<p>This method releases the underlying lock, and then blocks until it is
awakened by a {@link notify} or {@link notifyAll} call for the same
condition variable in another thread, or until the optional timeout
occurs. Once awakened or timed out, it re-acquires the lock and returns.

<p>When the {@var timeout} argument is present and not {@code None}, it
should be a floating point number specifying a timeout for the operation
in seconds (or fractions thereof).

<p>When the underlying lock is an {@link RLock}, it is not released
using its {@link release} method, since this may not actually unlock the
lock when it was acquired multiple times recursively. Instead, an
internal interface of the {@link RLock} class is used, which really
unlocks it even when it has been recursively acquired several times.
Another internal interface is then used to restore the recursion level
when the lock is reacquired.

@@method Condition.notify()

<p>Wake up a thread waiting on this condition, if any. This must only be
called when the calling thread has acquired the lock.

<p>This method wakes up one of the threads waiting for the condition
variable, if any are waiting; it is a no-op if no threads are waiting.

<p>The current implementation wakes up exactly one thread, if any are
waiting. However, it's not safe to rely on this behavior. A future,
optimized implementation may occasionally wake up more than one thread.

<p>Note: the awakened thread does not actually return from its {@link
wait} call until it can reacquire the lock. Since {@link notify} does
not release the lock, its caller should.

@@method Condition.notifyAll()

<p>Wake up all threads waiting on this condition. This method acts like
{@link notify}, but wakes up all waiting threads instead of one.

@@text 

<h2>Semaphore Objects</h2>

<p>This is one of the oldest synchronization primitives in the history
of computer science, invented by the early Dutch computer scientist
Edsger W. Dijkstra (he used {@link P} and {@link V} instead of {@link
acquire} and {@link release}).

<p>A semaphore manages an internal counter which is decremented by each
{@link acquire} call and incremented by each {@link release} call. The
counter can never go below zero; when {@link acquire} finds that it is
zero, it blocks, waiting until some other thread calls {@link release}.

@@class Semaphore([value])

<p>The optional argument gives the initial value for the internal
counter; it defaults to {@code 1}.

@@method Semaphore.acquire([blocking])

<p>Acquire a semaphore.

<p>When invoked without arguments: if the internal counter is larger
than zero on entry, decrement it by one and return immediately. If it is
zero on entry, block, waiting until some other thread has called {@link
release} to make it larger than zero. This is done with proper
interlocking so that if multiple {@link acquire} calls are blocked,
{@link release} will wake exactly one of them up. The implementation may
pick one at random, so the order in which blocked threads are awakened
should not be relied on. There is no return value in this case.

<p>When invoked with {@var blocking} set to true, do the same thing as
when called without arguments, and return true.

<p>When invoked with {@var blocking} set to false, do not block. If a
call without an argument would block, return false immediately;
otherwise, do the same thing as when called without arguments, and
return true.

@@method Semaphore.release()

<p>Release a semaphore, incrementing the internal counter by one. When
it was zero on entry and another thread is waiting for it to become
larger than zero again, wake up that thread.

@@text 
@@error unexpected div online-navigation

<h3>Semaphore Example</h3>

<p>Semaphores are often used to guard resources with limited capacity,
for example, a database server. In any situation where the size of the
resource size is fixed, you should use a bounded semaphore. Before
spawning any worker threads, your main thread would initialize the
semaphore:

<pre>
maxconnections = 5
...
pool_sema = BoundedSemaphore(value=maxconnections)
</pre>


<p>Once spawned, worker threads call the semaphore's acquire and release
methods when they need to connect to the server:

<pre>
pool_sema.acquire()
conn = connectdb()
... use connection ...
conn.close()
pool_sema.release()
</pre>


<p>The use of a bounded semaphore reduces the chance that a programming
error which causes the semaphore to be released more than it's acquired
will go undetected.

<h2>Event Objects</h2>

<p>This is one of the simplest mechanisms for communication between
threads: one thread signals an event and other threads wait for it.

<p>An event object manages an internal flag that can be set to true with
the {@link set} method and reset to false with the {@link clear} method.
The {@link wait} method blocks until the flag is true.

@@class Event()

<p>The internal flag is initially false.

@@method Event.isSet()

<p>Return true if and only if the internal flag is true.

@@method Event.set()

<p>Set the internal flag to true. All threads waiting for it to become
true are awakened. Threads that call {@link wait} once the flag is true
will not block at all.

@@method Event.clear()

<p>Reset the internal flag to false. Subsequently, threads calling
{@link wait} will block until {@link set} is called to set the internal
flag to true again.

@@method Event.wait([timeout])

<p>Block until the internal flag is true. If the internal flag is true
on entry, return immediately. Otherwise, block until another thread
calls {@link set} to set the flag to true, or until the optional timeout
occurs.

<p>When the timeout argument is present and not {@link None}, it should
be a floating point number specifying a timeout for the operation in
seconds (or fractions thereof).

@@text 

<h2>Thread Objects</h2>

<p>This class represents an activity that is run in a separate thread of
control. There are two ways to specify the activity: by passing a
callable object to the constructor, or by overriding the {@link run}
method in a subclass. No other methods (except for the constructor)
should be overridden in a subclass. In other words, {@em only} override
the {@link __init__} and {@link run} methods of this class.

<p>Once a thread object is created, its activity must be started by
calling the thread's {@link start} method. This invokes the {@link run}
method in a separate thread of control.

<p>Once the thread's activity is started, the thread is considered
'alive' and 'active' (these concepts are almost, but not quite exactly,
the same; their definition is intentionally somewhat vague). It stops
being alive and active when its {@link run} method terminates - either
normally, or by raising an unhandled exception. The {@link isAlive}
method tests whether the thread is alive.

<p>Other threads can call a thread's {@link join} method. This blocks
the calling thread until the thread whose {@link join} method is called
is terminated.

<p>A thread has a name. The name can be passed to the constructor, set
with the {@link setName} method, and retrieved with the {@link getName}
method.

<p>A thread can be flagged as a &#8220;daemon thread&#8221;. The
significance of this flag is that the entire Python program exits when
only daemon threads are left. The initial value is inherited from the
creating thread. The flag can be set with the {@link setDaemon} method
and retrieved with the {@link isDaemon} method.

<p>There is a &#8220;main thread&#8221; object; this corresponds to the
initial thread of control in the Python program. It is not a daemon
thread.

<p>There is the possibility that &#8220;dummy thread objects&#8221; are
created. These are thread objects corresponding to &#8220;alien
threads&#8221;. These are threads of control started outside the
threading module, such as directly from C code. Dummy thread objects
have limited functionality; they are always considered alive, active,
and daemonic, and cannot be {@link join}ed. They are never deleted,
since it is impossible to detect the termination of alien threads.

@@class Thread(group=None, target=None, name=None, args=(), kwargs={})

<p>This constructor should always be called with keyword arguments.
Arguments are:

<p>{@var group} should be {@link None}; reserved for future extension
when a {@link ThreadGroup} class is implemented.

<p>{@var target} is the callable object to be invoked by the {@link run}
method. Defaults to {@code None}, meaning nothing is called.

<p>{@var name} is the thread name. By default, a unique name is
constructed of the form &#8220;Thread-{@var N}&#8221; where {@var N} is
a small decimal number.

<p>{@var args} is the argument tuple for the target invocation. Defaults
to {@code ()}.

<p>{@var kwargs} is a dictionary of keyword arguments for the target
invocation. Defaults to {@code {}}.

<p>If the subclass overrides the constructor, it must make sure to
invoke the base class constructor ({@code Thread.__init__()}) before
doing anything else to the thread.

@@method Thread.start()

<p>Start the thread's activity.

<p>This must be called at most once per thread object. It arranges for
the object's {@link run} method to be invoked in a separate thread of
control.

@@method Thread.run()

<p>Method representing the thread's activity.

<p>You may override this method in a subclass. The standard {@link run}
method invokes the callable object passed to the object's constructor as
the {@var target} argument, if any, with sequential and keyword
arguments taken from the {@var args} and {@var kwargs} arguments,
respectively.

@@method Thread.join([timeout])

<p>Wait until the thread terminates. This blocks the calling thread
until the thread whose {@link join} method is called terminates - either
normally or through an unhandled exception - or until the optional
timeout occurs.

<p>When the {@var timeout} argument is present and not {@code None}, it
should be a floating point number specifying a timeout for the operation
in seconds (or fractions thereof). As {@link join} always returns {@link
None}, you must call {@link isAlive} to decide whether a timeout
happened.

<p>When the {@var timeout} argument is not present or {@code None}, the
operation will block until the thread terminates.

<p>A thread can be {@link join}ed many times.

<p>A thread cannot join itself because this would cause a deadlock.

<p>It is an error to attempt to {@link join} a thread before it has been
started.

@@method Thread.getName()

<p>Return the thread's name.

@@method Thread.setName(name)

<p>Set the thread's name.

<p>The name is a string used for identification purposes only. It has no
semantics. Multiple threads may be given the same name. The initial name
is set by the constructor.

@@method Thread.isAlive()

<p>Return whether the thread is alive.

<p>Roughly, a thread is alive from the moment the {@link start} method
returns until its {@link run} method terminates.

@@method Thread.isDaemon()

<p>Return the thread's daemon flag.

@@method Thread.setDaemon(daemonic)

<p>Set the thread's daemon flag to the Boolean value {@var daemonic}.
This must be called before {@link start} is called.

<p>The initial value is inherited from the creating thread.

<p>The entire Python program exits when no active non-daemon threads are
left.

@@text 

<h2>Timer Objects</h2>

<p>This class represents an action that should be run only after a
certain amount of time has passed -- a timer. {@link Timer} is a
subclass of {@link Thread} and as such also functions as an example of
creating custom threads.

<p>Timers are started, as with threads, by calling their {@link start}
method. The timer can be stopped (before its action has begun) by
calling the {@link cancel} method. The interval the timer will wait
before executing its action may not be exactly the same as the interval
specified by the user.

<p>For example:

<pre>
def hello():
    print "hello, world"

t = Timer(30.0, hello)
t.start() # after 30 seconds, "hello, world" will be printed
</pre>


@@class Timer(interval, function, args=[], kwargs={})

<p>Create a timer that will run {@var function} with arguments {@var
args} and keyword arguments {@var kwargs}, after {@var interval} seconds
have passed.

@@method Timer.cancel()

<p>Stop the timer, and cancel the execution of the timer's action. This
will only work if the timer is still in its waiting stage.
