
@@module smtplib

<h1>smtplib&#8212;SMTP protocol client</h1>

<p>The {@link smtplib} module defines an SMTP client session object that
can be used to send mail to any Internet machine with an SMTP or ESMTP
listener daemon. For details of SMTP and ESMTP operation, consult {@link
http://www.faqs.org/rfcs/rfc821.html RFC 821} ({@em Simple Mail Transfer
Protocol}) and {@link http://www.faqs.org/rfcs/rfc1869.html RFC 1869}
({@em SMTP Service Extensions}).

@@class SMTP([host[, port[, local_hostname]]])

<p>A {@link SMTP} instance encapsulates an SMTP connection. It has
methods that support a full repertoire of SMTP and ESMTP operations. If
the optional host and port parameters are given, the SMTP {@link
connect} method is called with those parameters during initialization.
An {@link SMTPConnectError} is raised if the specified host doesn't
respond correctly.

<p>For normal use, you should only require the initialization/connect,
{@link sendmail}, and {@link quit} methods. An example is included
below.

@@text 

<p>A nice selection of exceptions is defined as well:

@@exception SMTPException

<p>Base exception class for all exceptions raised by this module.

@@exception SMTPServerDisconnected

<p>This exception is raised when the server unexpectedly disconnects, or
when an attempt is made to use the {@link SMTP} instance before
connecting it to a server.

@@exception SMTPResponseException

<p>Base class for all exceptions that include an SMTP error code. These
exceptions are generated in some instances when the SMTP server returns
an error code. The error code is stored in the {@link smtp_code}
attribute of the error, and the {@link smtp_error} attribute is set to
the error message.

@@exception SMTPSenderRefused

<p>Sender address refused. In addition to the attributes set by on all
{@link SMTPResponseException} exceptions, this sets `sender' to the
string that the SMTP server refused.

@@exception SMTPRecipientsRefused

<p>All recipient addresses refused. The errors for each recipient are
accessible through the attribute {@link recipients}, which is a
dictionary of exactly the same sort as {@link SMTP.sendmail} returns.

@@exception SMTPDataError

<p>The SMTP server refused to accept the message data.

@@exception SMTPConnectError

<p>Error occurred during establishment of a connection with the server.

@@exception SMTPHeloError

<p>The server refused our "{@code HELO}" message.

@@text 

@see 
{@link http://www.faqs.org/rfcs/rfc821.html RFC 821, Simple Mail Transfer Protocol}

Protocol definition for SMTP. This document covers the model, operating
procedure, and protocol details for SMTP.
@see 
{@link http://www.faqs.org/rfcs/rfc1869.html RFC 1869, SMTP Service Extensions}

Definition of the ESMTP extensions for SMTP. This describes a framework
for extending SMTP with new commands, supporting dynamic discovery of
the commands provided by the server, and defines a few additional
commands.

<h2>SMTP Objects</h2>

<p>An {@link SMTP} instance has the following methods:

@@method SMTP.set_debuglevel(level)

<p>Set the debug output level. A true value for {@var level} results in
debug messages for connection and for all messages sent to and received
from the server.

@@method SMTP.connect([host[, port]])

<p>Connect to a host on a given port. The defaults are to connect to the
local host at the standard SMTP port (25). If the hostname ends with a
colon ("{@code :}") followed by a number, that suffix will be stripped
off and the number interpreted as the port number to use. This method is
automatically invoked by the constructor if a host is specified during
instantiation.

@@method SMTP.docmd(cmd, [, argstring])

<p>Send a command {@var cmd} to the server. The optional argument {@var
argstring} is simply concatenated to the command, separated by a space.

<p>This returns a 2-tuple composed of a numeric response code and the
actual response line (multiline responses are joined into one long
line.)

<p>In normal operation it should not be necessary to call this method
explicitly. It is used to implement other methods and may be useful for
testing private extensions.

<p>If the connection to the server is lost while waiting for the reply,
{@link SMTPServerDisconnected} will be raised.

@@method SMTP.helo([hostname])

<p>Identify yourself to the SMTP server using "{@code HELO}". The
hostname argument defaults to the fully qualified domain name of the
local host.

<p>In normal operation it should not be necessary to call this method
explicitly. It will be implicitly called by the {@link sendmail} when
necessary.

@@method SMTP.ehlo([hostname])

<p>Identify yourself to an ESMTP server using "{@code EHLO}". The
hostname argument defaults to the fully qualified domain name of the
local host. Examine the response for ESMTP option and store them for use
by {@link has_extn}.

<p>Unless you wish to use {@link has_extn} before sending mail, it
should not be necessary to call this method explicitly. It will be
implicitly called by {@link sendmail} when necessary.

@@method SMTP.has_extn(name)

<p>Return {@code True} if {@var name} is in the set of SMTP service
extensions returned by the server, {@code False} otherwise. Case is
ignored.

@@method SMTP.verify(address)

<p>Check the validity of an address on this server using SMTP "{@code
VRFY}". Returns a tuple consisting of code 250 and a full {@link
http://www.faqs.org/rfcs/rfc822.html RFC 822} address (including human
name) if the user address is valid. Otherwise returns an SMTP error code
of 400 or greater and an error string.

<p class='note'><b>Note:</b> Many sites disable SMTP "{@code VRFY}" in
order to foil spammers.

@@method SMTP.login(user, password)

<p>Log in on an SMTP server that requires authentication. The arguments
are the username and the password to authenticate with. If there has
been no previous "{@code EHLO}" or "{@code HELO}" command this session,
this method tries ESMTP "{@code EHLO}" first. This method will return
normally if the authentication was successful, or may raise the
following exceptions:
@@attribute SMTPHeloError
@@attribute The server didn't reply properly to the "HELO" greeting.
@@attribute SMTPAuthenticationError
@@attribute The server didn't accept the username/password combination.
@@attribute SMTPError

<p>No suitable authentication method was found.

@@method SMTP.starttls([keyfile[, certfile]])

<p>Put the SMTP connection in TLS (Transport Layer Security) mode. All
SMTP commands that follow will be encrypted. You should then call {@link
ehlo} again.

<p>If {@var keyfile} and {@var certfile} are provided, these are passed
to the {@link socket} module's {@link ssl} function.

@@method SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options])

<p>Send mail. The required arguments are an {@link
http://www.faqs.org/rfcs/rfc822.html RFC 822} from-address string, a
list of {@link http://www.faqs.org/rfcs/rfc822.html RFC 822} to-address
strings (a bare string will be treated as a list with 1 address), and a
message string. The caller may pass a list of ESMTP options (such as
"{@code 8bitmime}") to be used in "{@code MAIL FROM}" commands as {@var
mail_options}. ESMTP options (such as "{@code DSN}" commands) that
should be used with all "{@code RCPT}"commands can be passed as {@var
rcpt_options}. (If you need to use different ESMTP options to different
recipients you have to use the low-level methods such as {@link mail},
{@link rcpt} and {@link data} to send the message.)

<p class='note'><b>Note:</b> The {@var from_addr} and {@var to_addrs}
parameters are used to construct the message envelope used by the
transport agents. The {@link SMTP} does not modify the message headers
in any way.

<p>If there has been no previous "{@code EHLO}" or "{@code HELO}"
command this session, this method tries ESMTP "{@code EHLO}" first. If
the server does ESMTP, message size and each of the specified options
will be passed to it (if the option is in the feature set the server
advertises). If "{@code EHLO}" fails, "{@code HELO}" will be tried and
ESMTP options suppressed.

<p>This method will return normally if the mail is accepted for at least
one recipient. Otherwise it will throw an exception. That is, if this
method does not throw an exception, then someone should get your mail.
If this method does not throw an exception, it returns a dictionary,
with one entry for each recipient that was refused. Each entry contains
a tuple of the SMTP error code and the accompanying error message sent
by the server.

<p>This method may raise the following exceptions:
@@attribute SMTPRecipientsRefused
@@attribute All recipients were refused. Nobody got the mail. The recipients attribute of the exception object is a dictionary with information about the refused recipients (like the one returned when at least one recipient was accepted).
@@attribute SMTPHeloError
@@attribute The server didn't reply properly to the "HELO" greeting.
@@attribute SMTPSenderRefused
@@attribute The server didn't accept the from_addr.
@@attribute SMTPDataError

<p>The server replied with an unexpected error code (other than a
refusal of a recipient).

<p>Unless otherwise noted, the connection will be open even after an
exception is raised.

@@method SMTP.quit()

<p>Terminate the SMTP session and close the connection.

@@text 

<p>Low-level methods corresponding to the standard SMTP/ESMTP commands
"{@code HELP}", "{@code RSET}", "{@code NOOP}", "{@code MAIL}", "{@code
RCPT}", and "{@code DATA}" are also supported. Normally these do not
need to be called directly, so they are not documented here. For
details, consult the module code.

<h2>SMTP Example</h2>

<p>This example prompts the user for addresses needed in the message
envelope (`To' and `From' addresses), and the message to be delivered.
Note that the headers to be included with the message must be included
in the message as entered; this example doesn't do any processing of the
{@link http://www.faqs.org/rfcs/rfc822.html RFC 822} headers. In
particular, the `To' and `From' addresses must be included in the
message headers explicitly.

<pre>
import smtplib

def prompt(prompt):
    return raw_input(prompt).strip()

fromaddr = prompt("From: ")
toaddrs  = prompt("To: ").split()
print "Enter message, end with ^D (Unix) or ^Z (Windows):"

# Add the From: and To: headers at the start!
msg = ("From: %s\r\nTo: %s\r\n\r\n"
       % (fromaddr, ", ".join(toaddrs)))
while 1:
    try:
        line = raw_input()
    except EOFError:
        break
    if not line:
        break
    msg = msg + line

print "Message length is " + repr(len(msg))

server = smtplib.SMTP('localhost')
server.set_debuglevel(1)
server.sendmail(fromaddr, toaddrs, msg)
server.quit()
</pre>

