
@@module popen2

<h1>popen2&#8212;Subprocesses with accessible I/O streams</h1>

<p>Availability: Unix, Windows.

<p>This module allows you to spawn processes and connect to their
input/output/error pipes and obtain their return codes under Unix and
Windows.

<p>Note that starting with Python 2.0, this functionality is available
using functions from the {@link os} module which have the same names as
the factory functions here, but the order of the return values is more
intuitive in the {@link os} module variants.

<p>The primary interface offered by this module is a trio of factory
functions. For each of these, if {@var bufsize} is specified, it
specifies the buffer size for the I/O pipes. {@var mode}, if provided,
should be the string {@code 'b'} or {@code 't'}; on Windows this is
needed to determine whether the file objects should be opened in binary
or text mode. The default value for {@var mode} is {@code 't'}.

<p>On Unix, {@var cmd} may be a sequence, in which case arguments will
be passed directly to the program without shell intervention (as with
{@link os.spawnv}). If {@var cmd} is a string it will be passed to the
shell (as with {@link os.system}).

<p>The only way to retrieve the return codes for the child processes is
by using the {@link poll} or {@link wait} methods on the {@link Popen3}
and {@link Popen4} classes; these are only available on Unix. This
information is not available when using the {@link popen2}, {@link
popen3}, and {@link popen4} functions, or the equivalent functions in
the {@link os} module. (Note that the tuples returned by the {@link os}
module's functions are in a different order from the ones returned by
the {@link popen2} module.)

@@function popen2(cmd[, bufsize[, mode]])

<p>Executes {@var cmd} as a sub-process. Returns the file objects {@code
(}{@var child_stdout}, {@var child_stdin}).

@@function popen3(cmd[, bufsize[, mode]])

<p>Executes {@var cmd} as a sub-process. Returns the file objects {@code
(}{@var child_stdout}, {@var child_stdin}, {@var child_stderr}).

@@function popen4(cmd[, bufsize[, mode]])

<p>Executes {@var cmd} as a sub-process. Returns the file objects {@code
(}{@var child_stdout_and_stderr}, {@var child_stdin}).
<blockquote>
@since New in version
2.0. <br />
</blockquote>

@@text 

<p>On Unix, a class defining the objects returned by the factory
functions is also available. These are not used for the Windows
implementation, and are not available on that platform.

@@class Popen3(cmd[, capturestderr[, bufsize]])

<p>This class represents a child process. Normally, {@link Popen3}
instances are created using the {@link popen2} and {@link popen3}
factory functions described above.

<p>If not using one of the helper functions to create {@link Popen3}
objects, the parameter {@var cmd} is the shell command to execute in a
sub-process. The {@var capturestderr} flag, if true, specifies that the
object should capture standard error output of the child process. The
default is false. If the {@var bufsize} parameter is specified, it
specifies the size of the I/O buffers to/from the child process.

@@class Popen4(cmd[, bufsize])

<p>Similar to {@link Popen3}, but always captures standard error into
the same file object as standard output. These are typically created
using {@link popen4}.
<blockquote>
@since New in version 2.0. <br />
</blockquote>

@@text 

<h2>Popen3 and Popen4 Objects</h2>

<p>Instances of the {@link Popen3} and {@link Popen4} classes have the
following methods:

@@method Popen4.poll()

<p>Returns {@code -1} if child process hasn't completed yet, or its
return code otherwise.

@@method Popen4.wait()

<p>Waits for and returns the status code of the child process. The
status code encodes both the return code of the process and information
about whether it exited using the {@link c:exit} system call or died due
to a signal. Functions to help interpret the status code are defined in
the {@link os} module; see section {@link os-process.html#os-process}
for the {@link W}{@var *}() family of functions.

@@text 

<p>The following attributes are also available:

@@attribute Popen4.fromchild

<p>A file object that provides output from the child process. For {@link
Popen4} instances, this will provide both the standard output and
standard error streams.

@@attribute Popen4.tochild

<p>A file object that provides input to the child process.

@@attribute Popen4.childerr

<p>A file object that provides error output from the child process, if
{@var capturestderr} was true for the constructor, otherwise {@link
None}. This will always be {@link None} for {@link Popen4} instances.

@@attribute Popen4.pid

<p>The process ID of the child process.

@@text 

<h2>Flow Control Issues</h2>

<p>Any time you are working with any form of inter-process
communication, control flow needs to be carefully thought out. This
remains the case with the file objects provided by this module (or the
{@link os} module equivalents).

<p>When reading output from a child process that writes a lot of data to
standard error while the parent is reading from the child's standard
output, a deadlock can occur. A similar situation can occur with other
combinations of reads and writes. The essential factors are that more
than {@code _PC_PIPE_BUF} bytes are being written by one process in a
blocking fashion, while the other process is reading from the other
process, also in a blocking fashion.

<p>There are several ways to deal with this situation.

<p>The simplest application change, in many cases, will be to follow
this model in the parent process:

<pre>
import popen2

r, w, e = popen2.popen3('python slave.py')
e.readlines()
r.readlines()
r.close()
e.close()
w.close()
</pre>


<p>with code like this in the child:

<pre>
import os
import sys

# note that each of these print statements
# writes a single long string

print &gt;&gt;sys.stderr, 400 * 'this is a test\n'
os.close(sys.stderr.fileno())
print &gt;&gt;sys.stdout, 400 * 'this is another test\n'
</pre>


<p>In particular, note that {@code sys.stderr} must be closed after
writing all data, or {@link readlines} won't return. Also note that
{@link os.close} must be used, as {@code sys.stderr.close()} won't close
{@code stderr} (otherwise assigning to {@code sys.stderr} will silently
close it, so no further errors can be printed).

<p>Applications which need to support a more general approach should
integrate I/O over pipes with their {@link select} loops, or use
separate threads to read each of the individual files provided by
whichever {@link popen*} function or {@link Popen*} class was used.
