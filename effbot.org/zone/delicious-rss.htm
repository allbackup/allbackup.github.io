<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Grabbing del.icio.us posts with Python and&nbsp;RSS</title></head><body data-page-id="38"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Grabbing del.icio.us posts with Python and&nbsp;RSS</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | July 2007</p><p>In <a href="delicious-json.htm"><cite>Grabbing del.icio.us posts with Python</cite></a>, I used JSON to fetch
recent posts from the <a href="http://del.icio.us/">del.icio.us link
management site</a>.

</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><p class="wide">Here&#8217;s another approach, which uses their RSS interface instead,
and a simple RSS 1.0 parser built on ElementTree:

<pre class="python wide">
<span class="pykeyword">import</span> urllib
<span class="pykeyword">import</span> xml.etree.ElementTree <span class="pykeyword">as</span> ET <span class="pycomment"># Python 2.5</span>
<span class="pycomment"># import elementtree.ElementTree as ET</span>

<span class="pykeyword">def</span> <span class="pyfunction">RSS</span>(tag): <span class="pykeyword">return</span> <span class="pystring">"{http://purl.org/rss/1.0/}"</span> + tag
<span class="pykeyword">def</span> <span class="pyfunction">DC</span>(tag): <span class="pykeyword">return</span> <span class="pystring">"{http://purl.org/dc/elements/1.1/}"</span> + tag

<span class="pykeyword">class</span> <span class="pyclass">Post</span>(object):
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, item):
        self.link = item.findtext(RSS(<span class="pystring">"link"</span>))
        self.title = item.findtext(RSS(<span class="pystring">"title"</span>))
        self.description = item.findtext(RSS(<span class="pystring">"description"</span>))
        self.pubdate = item.findtext(DC(<span class="pystring">"date"</span>))
        self.tags = item.findtext(DC(<span class="pystring">"subject"</span>), <span class="pystring">""</span>).split()

<span class="pykeyword">def</span> <span class="pyfunction">getposts</span>(user, tag=<span class="pystring">""</span>):
    <span class="pykeyword">if</span> isinstance(tag, tuple):
        tag = <span class="pystring">"+"</span>.join(tag)
    uri = <span class="pystring">"http://del.icio.us/rss/%s/%s"</span> % (user, tag)
    tree = ET.parse(urllib.urlopen(uri))
    <span class="pykeyword">return</span> map(Post, tree.getiterator(RSS(<span class="pystring">"item"</span>)))</pre></p></div><div class="yui-ge"><div class="yui-u first"><p>Note that the parser has a limited understanding of the RSS format;
it just locates all RSS 1.0 <b>item</b> elements in the document, and
pulls out the relevant subelements using <b>findtext</b>.

</p><p>To try it out, you can do something like:

<pre class="python">
<span class="pykeyword">for</span> post <span class="pykeyword">in</span> getposts(<span class="pystring">"effbot"</span>):
    <span class="pykeyword">print</span> post.link, post.tags</pre></p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><p class="wide">Which, when I write this, gives me something like:

<pre class="wide">
http://shovelglove.com/ ['humor', 'training']
http://www.kanyewest.com/?content=video_cant_tell_alt ['fun', 'music']
http://www.svd.se/images/berglin/berglin070722.gif ['berglin']
http://www.svd.se/images/berglin/berglin_20070708.gif ['berglin']
http://shockingcats.ytmnd.com/ ['animals']
...
</pre></p></div><div class="yui-ge"><div class="yui-u first"><p>See the <a href="delicious-json.htm">previous article</a> for more
tips and tricks.</p><h3>Lazy Parsing</h3><p>The version of <b>getposts</b> used above pulls in the entire RSS
document, and then uses <b>getiterator</b> to locate all item elements.
Another, somewhat more elegant approach is to use ET&#8217;s
<a href="element-iterparse.htm"><b>iterparse</b> interface</a>
to parse the document as it arrives, and yield populated <b>Post</b>
objects as they&#8217;re being created:

<pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">getposts</span>(user, tag=<span class="pystring">""</span>):
    <span class="pykeyword">if</span> isinstance(tag, tuple):
        tag = <span class="pystring">"+"</span>.join(tag)
    uri = <span class="pystring">"http://del.icio.us/rss/%s/%s"</span> % (user, tag)
    <span class="pykeyword">for</span> event, elem <span class="pykeyword">in</span> ET.iterparse(urllib.urlopen(uri)):
        <span class="pykeyword">if</span> elem.tag == RSS(<span class="pystring">"item"</span>):
            <span class="pykeyword">yield</span> Post(elem)
            elem.clear()</pre></p><p>This version has lower latency and uses less memory than the first version.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
