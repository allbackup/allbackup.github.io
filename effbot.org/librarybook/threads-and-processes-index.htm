<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Threads and&nbsp;Processes</title></head><body data-page-id="688"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Threads and&nbsp;Processes</h1></div><div class="yui-ge"><div class="yui-u first"><blockquote class="epigraph"><p><i><span>&#8220;Well, since you last asked us to stop, this thread has
moved from discussing languages suitable for professional
programmers via accidental users to computer-phobic users. A few
more iterations can make this thread really
interesting&#8230;&#8221;</span></i></p><i>eff-bot, June 1996</i></blockquote><h2>Overview</h2><p>This chapter describes the thread support modules provided with
the standard Python interpreter. Note that thread support is
optional, and may not be available in your Python interpreter.</p><p>This chapter also covers some modules that allow you to run
external processes on Unix and Windows systems.</p><h3 style="sect2">Threads</h3><p>When you run a Python program, execution starts at the top of
the main module, and proceeds downwards. Loops can be used to
repeat portions of the program, and function and method calls
transfer control to a different part of the program (but only
temporarily).</p><p>With threads, your program can do several things at one time.
Each thread has its own flow of control. While one thread might be
reading data from a file, another thread can keep the screen
updated.</p><p>To keep two threads from accessing the same internal data
structure at the same time, Python uses a <i>global interpreter
lock</i>. Only one thread can execute Python code at the same time;
Python automatically switches to the next thread after a short
period of time, or when a thread does something that may take a
while (like waiting for the next byte to arrive over a network
socket, or reading data from a file).</p><p>The global lock isn&#8217;t enough to avoid problems in your own
programs, though. If multiple threads attempt to access the same
data object, it may end up in an inconsistent state. Consider a
simple cache:</p><pre>
def getitem(key):
    item = cache.get(key)
    if item is None:
        # not in cache; create a new one
        item = create_new_item(key)
        cache[key] = item
    return item
</pre><p>If two threads call the <b>getitem</b> function just after
each other with the same missing key, they&#8217;re likely to end up
calling <b>create_new_item</b> twice with the same argument.
While this may be okay in many cases, it can cause serious problems
in others.</p><p>To avoid problems like this, you can use <i>lock objects</i> to
synchronize threads. A lock object can only be owned by one thread
at a time, and can thus be used to make sure that only one thread
is executing the code in the <b>getitem</b> body at any time.</p><h3 style="sect2">Processes</h3><p>On most modern operating systems, each program run in its own
<i>process</i>. You usually start a new program/process by entering
a command to the shell, or by selecting it in a menu. Python also
allows you to start new programs from inside a Python program.</p><p>Most process-related functions are defined by the <b>os</b>
module. See the <a href="os.htm#working-with-processes-chapter">Working with
Processes</a> section for the full story.</p><h3>Contents</h3><p><a href="threading.htm">The threading module</a></p><p><a href="queue.htm">The Queue module</a></p><p><a href="thread.htm">The thread module</a></p><p><a href="commands.htm">The commands module</a></p><p><a href="pipes.htm">The pipes module</a></p><p><a href="popen2.htm">The popen2 module</a></p><p><a href="signal.htm">The signal module</a></p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
