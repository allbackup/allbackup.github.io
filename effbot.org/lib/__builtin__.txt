
@@module __builtin__

<h1>Built-In Objects</h1>

<p>Names for built-in exceptions and functions and a number of constants
are found in a separate symbol table. This table is searched last when
the interpreter looks up the meaning of a name, so local and global
user-defined names can override built-in names. Built-in types are
described together here for easy reference.{@link footnote:93}

<p>The tables in this chapter document the priorities of operators by
listing them in order of ascending priority (within a table) and
grouping operators that have the same priority in the same box. Binary
operators of the same priority group from left to right. (Unary
operators group from right to left, but there you have no real choice.)
See chapter 5 of the {@link ../ref/ref.html Python Reference Manual} for
the complete picture on operator priorities.

<h4>Footnotes</h4>

@@variable ... reference.2.1

<p>Most descriptions sorely lack explanations of the exceptions that may
be raised -- this will be fixed in a future version of this manual.

@@text 

<h1>Built-in Functions</h1>

<p>The Python interpreter has a number of functions built into it that
are always available. They are listed here in alphabetical order.

@@function __import__(name[, globals[, locals[, fromlist]]])

<p>This function is invoked by the {@link import} statement. It mainly
exists so that you can replace it with another function that has a
compatible interface, in order to change the semantics of the {@link
import} statement. For examples of why and how you would do this, see
the standard library modules {@link ihooks} and {@link rexec}. See also
the built-in module {@link imp}, which defines some useful operations
out of which you can build your own {@link __import__} function.

<p>For example, the statement "{@code import spam}" results in the
following call: {@code __import__('spam',} {@code globals(),} {@code
locals(), [])}; the statement "{@code from spam.ham import eggs}"
results in "{@code __import__('spam.ham', globals(), locals(),
['eggs'])}". Note that even though {@code locals()} and {@code ['eggs']}
are passed in as arguments, the {@link __import__} function does not set
the local variable named {@code eggs}; this is done by subsequent code
that is generated for the import statement. (In fact, the standard
implementation does not use its {@var locals} argument at all, and uses
its {@var globals} only to determine the package context of the {@link
import} statement.)

<p>When the {@var name} variable is of the form {@code package.module},
normally, the top-level package (the name up till the first dot) is
returned, {@em not} the module named by {@var name}. However, when a
non-empty {@var fromlist} argument is given, the module named by {@var
name} is returned. This is done for compatibility with the bytecode
generated for the different kinds of import statement; when using
"{@code import spam.ham.eggs}", the top-level package {@link spam} must
be placed in the importing namespace, but when using "{@code from
spam.ham import eggs}", the {@code spam.ham} subpackage must be used to
find the {@code eggs} variable. As a workaround for this behavior, use
{@link getattr} to extract the desired components. For example, you
could define the following helper:

<pre>
def my_import(name):
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod
</pre>


@@function abs(x)

<p>Return the absolute value of a number. The argument may be a plain or
long integer or a floating point number. If the argument is a complex
number, its magnitude is returned.

@@function basestring()

<p>This abstract type is the superclass for {@link str} and {@link
unicode}. It cannot be called or instantiated, but it can be used to
test whether an object is an instance of {@link str} or {@link unicode}.
{@code isinstance(obj, basestring)} is equivalent to {@code
isinstance(obj, (str, unicode))}.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@function bool([x])

<p>Convert a value to a Boolean, using the standard truth testing
procedure. If {@var x} is false or omitted, this returns {@code False};
otherwise it returns {@code True}. {@link bool} is also a class, which
is a subclass of {@link int}. Class {@link bool} cannot be subclassed
further. Its only instances are {@code False} and {@code True}.

<p>Changed in version 2.3: If no argument is given, this function
returns {@code False}.
<blockquote>
@since New in version 2.2.1. <br />
</blockquote>

@@function callable(object)

<p>Return true if the {@var object} argument appears callable, false if
not. If this returns true, it is still possible that a call fails, but
if it is false, calling {@var object} will never succeed. Note that
classes are callable (calling a class returns a new instance); class
instances are callable if they have a {@link __call__} method.

@@function chr(i)

<p>Return a string of one character whose ASCII code is the integer
{@var i}. For example, {@code chr(97)} returns the string {@code 'a'}.
This is the inverse of {@link ord}. The argument must be in the range
[0..255], inclusive; {@link exceptions.ValueError} will be raised if
{@var i} is outside that range.

@@function classmethod(function)

<p>Return a class method for {@var function}.

<p>A class method receives the class as implicit first argument, just
like an instance method receives the instance. To declare a class
method, use this idiom:

<pre>
class C:
    @classmethod
    def f(cls, arg1, arg2, ...): ...
</pre>


<p>The {@code @classmethod} form is a function decorator - see the
description of function definitions in chapter 7 of the {@link
../ref/ref.html Python Reference Manual} for details.

<p>It can be called either on the class (such as {@code C.f()}) or on an
instance (such as {@code C().f()}). The instance is ignored except for
its class. If a class method is called for a derived class, the derived
class object is passed as the implied first argument.

<p>Class methods are different than C++ or Java static methods. If you
want those, see {@link staticmethod} in this section. Changed in version
2.4: Function decorator syntax added.
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function cmp(x, y)

<p>Compare the two objects {@var x} and {@var y} and return an integer
according to the outcome. The return value is negative if {@var x} &lt
{@var y}, zero if {@var x} == {@var y} and strictly positive if {@var x}
> {@var y}.

@@function compile(string, filename, kind[, flags[, dont_inherit]])

<p>Compile the {@var string} into a code object. Code objects can be
executed by an {@link exec} statement or evaluated by a call to {@link
eval}. The {@var filename} argument should give the file from which the
code was read; pass some recognizable value if it wasn't read from a
file ({@code '&ltstring>'} is commonly used). The {@var kind} argument
specifies what kind of code must be compiled; it can be {@code 'exec'}
if {@var string} consists of a sequence of statements, {@code 'eval'} if
it consists of a single expression, or {@code 'single'} if it consists
of a single interactive statement (in the latter case, expression
statements that evaluate to something else than {@link None} will be
printed).

<p>When compiling multi-line statements, two caveats apply: line endings
must be represented by a single newline character ({@code '\n'}), and
the input must be terminated by at least one newline character. If line
endings are represented by {@code '\r\n'}, use the string {@link
replace} method to change them into {@code '\n'}.

<p>The optional arguments {@var flags} and {@var dont_inherit} (which
are new in Python 2.2) control which future statements (see {@link
http://www.python.org/peps/pep-0236.html PEP 236}) affect the
compilation of {@var string}. If neither is present (or both are zero)
the code is compiled with those future statements that are in effect in
the code that is calling compile. If the {@var flags} argument is given
and {@var dont_inherit} is not (or is zero) then the future statements
specified by the {@var flags} argument are used in addition to those
that would be used anyway. If {@var dont_inherit} is a non-zero integer
then the {@var flags} argument is it - the future statements in effect
around the call to compile are ignored.

<p>Future statements are specified by bits which can be bitwise or-ed
together to specify multiple statements. The bitfield required to
specify a given feature can be found as the {@link compiler_flag}
attribute on the {@link _Feature} instance in the {@link __future__}
module.

@@function complex([real[, imag]])

<p>Create a complex number with the value {@var real} + {@var imag}*j or
convert a string or number to a complex number. If the first parameter
is a string, it will be interpreted as a complex number and the function
must be called without a second parameter. The second parameter can
never be a string. Each argument may be any numeric type (including
complex). If {@var imag} is omitted, it defaults to zero and the
function serves as a numeric conversion function like {@link int},
{@link long} and {@link float}. If both arguments are omitted, returns
{@code 0j}.

@@function delattr(object, name)

<p>This is a relative of {@link setattr}. The arguments are an object
and a string. The string must be the name of one of the object's
attributes. The function deletes the named attribute, provided the
object allows it. For example, {@code delattr(}{@var x}, '{@var
foobar}') is equivalent to {@code del }{@var x}.{@var foobar}.

@@function dict([mapping-or-sequence])

<p>Return a new dictionary initialized from an optional positional
argument or from a set of keyword arguments. If no arguments are given,
return a new empty dictionary. If the positional argument is a mapping
object, return a dictionary mapping the same keys to the same values as
does the mapping object. Otherwise the positional argument must be a
sequence, a container that supports iteration, or an iterator object.
The elements of the argument must each also be of one of those kinds,
and each must in turn contain exactly two objects. The first is used as
a key in the new dictionary, and the second as the key's value. If a
given key is seen more than once, the last value associated with it is
retained in the new dictionary.

<p>If keyword arguments are given, the keywords themselves with their
associated values are added as items to the dictionary. If a key is
specified both in the positional argument and as a keyword argument, the
value associated with the keyword is retained in the dictionary. For
example, these all return a dictionary equal to {@code {"one": 2, "two":
3}}:
<ul>
<li>
<p>{@code dict({'one': 2, 'two': 3})}
<li>
<p>{@code dict({'one': 2, 'two': 3}.items())}
<li>
<p>{@code dict({'one': 2, 'two': 3}.iteritems())}
<li>
<p>{@code dict(zip(('one', 'two'), (2, 3)))}
<li>
<p>{@code dict([['two', 3], ['one', 2]])}
<li>
<p>{@code dict(one=2, two=3)}
<li>
<p>{@code dict([(['one', 'two'][i-2], i) for i in (2, 3)])}
</ul>

<p>Changed in version 2.3: Support for building a dictionary from
keyword arguments added.
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function dir([object])

<p>Without arguments, return the list of names in the current local
symbol table. With an argument, attempts to return a list of valid
attributes for that object. This information is gleaned from the
object's {@link __dict__} attribute, if defined, and from the class or
type object. The list is not necessarily complete. If the object is a
module object, the list contains the names of the module's attributes.
If the object is a type or class object, the list contains the names of
its attributes, and recursively of the attributes of its bases.
Otherwise, the list contains the object's attributes' names, the names
of its class's attributes, and recursively of the attributes of its
class's base classes. The resulting list is sorted alphabetically. For
example:

<pre>
&gt;&gt;&gt; import struct
&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', 'struct']
&gt;&gt;&gt; dir(struct)
['__doc__', '__name__', 'calcsize', 'error', 'pack', 'unpack']
</pre>


<p class='note'><b>Note:</b> Because {@link dir} is supplied primarily
as a convenience for use at an interactive prompt, it tries to supply an
interesting set of names more than it tries to supply a rigorously or
consistently defined set of names, and its detailed behavior may change
across releases.

@@function divmod(a, b)

<p>Take two (non complex) numbers as arguments and return a pair of
numbers consisting of their quotient and remainder when using long
division. With mixed operand types, the rules for binary arithmetic
operators apply. For plain and long integers, the result is the same as
{@code (}{@var a} / {@var b}, {@var a} % {@var b}). For floating point
numbers the result is {@code (}{@var q}, {@var a} % {@var b}), where
{@var q} is usually {@code math.floor(}{@var a} / {@var b}) but may be 1
less than that. In any case {@code }{@var q} * {@var b} + {@var a} %
{@var b} is very close to {@var a}, if {@var a} % {@var b} is non-zero
it has the same sign as {@var b}, and {@code 0 &lt= abs(}{@var a} %
{@var b}) &lt abs({@var b}).
<blockquote>
@since Changed in version 2.3: Using divmod() with complex numbers is
deprecated. <br />
</blockquote>

@@function enumerate(iterable)

<p>Return an enumerate object. {@var iterable} must be a sequence, an
iterator, or some other object which supports iteration. The {@link
next} method of the iterator returned by {@link enumerate} returns a
tuple containing a count (from zero) and the corresponding value
obtained from iterating over {@var iterable}. {@link enumerate} is
useful for obtaining an indexed series: {@code (0, seq[0])}, {@code (1,
seq[1])}, {@code (2, seq[2])}, ....
<blockquote>
@since New in
version 2.3. <br />
</blockquote>

@@function eval(expression[, globals[, locals]])

<p>The arguments are a string and optional globals and locals. If
provided, {@var globals} must be a dictionary. If provided, {@var
locals} can be any mapping object.

<p>The {@var expression} argument is parsed and evaluated as a Python
expression (technically speaking, a condition list) using the {@var
globals} and {@var locals} dictionaries as global and local name space.
If the {@var globals} dictionary is present and lacks '__builtins__',
the current globals are copied into {@var globals} before {@var
expression} is parsed. This means that {@var expression} normally has
full access to the standard {@link builtin __builtin__} module and
restricted environments are propagated. If the {@var locals} dictionary
is omitted it defaults to the {@var globals} dictionary. If both
dictionaries are omitted, the expression is executed in the environment
where {@link eval} is called. The return value is the result of the
evaluated expression. Syntax errors are reported as exceptions. Example:

<pre>
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; print eval('x+1')
2
</pre>


<p>This function can also be used to execute arbitrary code objects
(such as those created by {@link compile}). In this case pass a code
object instead of a string. The code object must have been compiled
passing {@code 'eval'} as the {@var kind} argument.

<p>Hints: dynamic execution of statements is supported by the {@link
exec} statement. Execution of statements from a file is supported by the
{@link execfile} function. The {@link globals} and {@link locals}
functions returns the current global and local dictionary, respectively,
which may be useful to pass around for use by {@link eval} or {@link
execfile}.
<blockquote>
@since Changed in version 2.4: formerly locals was required to be a dictionary. <br />
</blockquote>

@@function execfile(filename[, globals[, locals]])

<p>This function is similar to the {@link exec} statement, but parses a
file instead of a string. It is different from the {@link import}
statement in that it does not use the module administration -- it reads
the file unconditionally and does not create a new module.{@link
footnote:394}

<p>The arguments are a file name and two optional dictionaries. The file
is parsed and evaluated as a sequence of Python statements (similarly to
a module) using the {@var globals} and {@var locals} dictionaries as
global and local namespace. If provided, {@var locals} can be any
mapping object. {@var locals} dictionary is omitted it defaults to the
{@var globals} dictionary. If both dictionaries are omitted, the
expression is executed in the environment where {@link execfile} is
called. The return value is {@link None}.

<p class='warning'><b>Warning:</b> The default {@var locals} act as
described for function {@link locals} below: modifications to the
default {@var locals} dictionary should not be attempted. Pass an
explicit {@var locals} dictionary if you need to see effects of the code
on {@var locals} after function {@link execfile} returns. {@link
execfile} cannot be used reliably to modify a function's locals.
<blockquote>
@since Changed in version 2.4: formerly locals was required to be a dictionary. <br />
</blockquote>

@@function file(filename[, mode[, bufsize]])

<p>Return a new file object (described in section {@link
bltin-file-objects.html#bltin-file-objects}, &#8220;{@link
bltin-file-objects.html File Objects}&#8221;). The first two arguments
are the same as for {@code stdio}'s {@link c:fopen}: {@var filename} is
the file name to be opened, {@var mode} indicates how the file is to be
opened: {@code 'r'} for reading, {@code 'w'} for writing (truncating an
existing file), and {@code 'a'} opens it for appending (which on {@em
some} Unix systems means that {@em all} writes append to the end of the
file, regardless of the current seek position).

<p>Modes {@code 'r+'}, {@code 'w+'} and {@code 'a+'} open the file for
updating (note that {@code 'w+'} truncates the file). Append {@code 'b'}
to the mode to open the file in binary mode, on systems that
differentiate between binary and text files (else it is ignored). If the
file cannot be opened, {@link exceptions.IOError} is raised.

<p>In addition to the standard {@link c:fopen} values {@var mode} may be
{@code 'U'} or {@code 'rU'}. If Python is built with universal newline
support (the default) the file is opened as a text file, but lines may
be terminated by any of {@code '\n'}, the Unix end-of-line convention,
{@code '\r'}, the Macintosh convention or {@code '\r\n'}, the Windows
convention. All of these external representations are seen as {@code
'\n'} by the Python program. If Python is built without universal
newline support {@var mode} {@code 'U'} is the same as normal text mode.
Note that file objects so opened also have an attribute called {@link
newlines} which has a value of {@link None} (if no newlines have yet
been seen), {@code '\n'}, {@code '\r'}, {@code '\r\n'}, or a tuple
containing all the newline types seen.

<p>If {@var mode} is omitted, it defaults to {@code 'r'}. When opening a
binary file, you should append {@code 'b'} to the {@var mode} value for
improved portability. (It's useful even on systems which don't treat
binary and text files differently, where it serves as documentation.)
The optional {@var bufsize} argument specifies the file's desired buffer
size: 0 means unbuffered, 1 means line buffered, any other positive
value means use a buffer of (approximately) that size. A negative {@var
bufsize} means to use the system default, which is usually line buffered
for tty devices and fully buffered for other files. If omitted, the
system default is used.{@link footnote:1090}

<p>The {@link file} constructor is new in Python 2.2 and is an alias for
{@link open}. Both spellings are equivalent. The intent is for {@link
open} to continue to be preferred for use as a factory function which
returns a new {@link file} object. The spelling, {@link file} is more
suited to type testing (for example, writing "{@code isinstance(f,
file)}").

@@function filter(function, list)

<p>Construct a list from those elements of {@var list} for which {@var
function} returns true. {@var list} may be either a sequence, a
container which supports iteration, or an iterator, If {@var list} is a
string or a tuple, the result also has that type; otherwise it is always
a list. If {@var function} is {@link None}, the identity function is
assumed, that is, all elements of {@var list} that are false (zero or
empty) are removed.

<p>Note that {@code filter(function, }{@var list}) is equivalent to
{@code [item for item in }{@var list} if function(item)] if function is
not {@link None} and {@code [item for item in }{@var list} if item] if
function is {@link None}.

@@function float([x])

<p>Convert a string or a number to floating point. If the argument is a
string, it must contain a possibly signed decimal or floating point
number, possibly embedded in whitespace. Otherwise, the argument may be
a plain or long integer or a floating point number, and a floating point
number with the same value (within Python's floating point precision) is
returned. If no argument is given, returns {@code 0.0}.

<p class='note'><b>Note:</b> When passing in a string, values for NaN
and Infinity may be returned, depending on the underlying C library. The
specific set of strings accepted which cause these values to be returned
depends entirely on the C library and is known to vary.

@@function frozenset([iterable])

<p>Return a frozenset object whose elements are taken from {@var
iterable}. Frozensets are sets that have no update methods but can be
hashed and used as members of other sets or as dictionary keys. The
elements of a frozenset must be immutable themselves. To represent sets
of sets, the inner sets should also be {@link frozenset} objects. If
{@var iterable} is not specified, returns a new empty set, {@code
frozenset([])}.
<blockquote>
@since New in version 2.4. <br />
</blockquote>

@@function getattr(object, name[, default])

<p>Return the value of the named attributed of {@var object}. {@var
name} must be a string. If the string is the name of one of the object's
attributes, the result is the value of that attribute. For example,
{@code getattr(x, 'foobar')} is equivalent to {@code x.foobar}. If the
named attribute does not exist, {@var default} is returned if provided,
otherwise {@link exceptions.AttributeError} is raised.

@@function globals()

<p>Return a dictionary representing the current global symbol table.
This is always the dictionary of the current module (inside a function
or method, this is the module where it is defined, not the module from
which it is called).

@@function hasattr(object, name)

<p>The arguments are an object and a string. The result is {@code True}
if the string is the name of one of the object's attributes, {@link
False} if not. (This is implemented by calling {@code getattr(}{@var
object}, {@var name}) and seeing whether it raises an exception or not.)

@@function hash(object)

<p>Return the hash value of the object (if it has one). Hash values are
integers. They are used to quickly compare dictionary keys during a
dictionary lookup. Numeric values that compare equal have the same hash
value (even if they are of different types, as is the case for 1 and
1.0).

@@function help([object])

<p>Invoke the built-in help system. (This function is intended for
interactive use.) If no argument is given, the interactive help system
starts on the interpreter console. If the argument is a string, then the
string is looked up as the name of a module, function, class, method,
keyword, or documentation topic, and a help page is printed on the
console. If the argument is any other kind of object, a help page on the
object is generated.
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function hex(x)

<p>Convert an integer number (of any size) to a hexadecimal string. The
result is a valid Python expression.
<blockquote>
@since Changed in version 2.4: Formerly only returned
an unsigned literal.. <br />
</blockquote>

@@function id(object)

<p>Return the &#8220;identity&#8221; of an object. This is an integer
(or long integer) which is guaranteed to be unique and constant for this
object during its lifetime. Two objects with non-overlapping lifetimes
may have the same {@link id} value. (Implementation note: this is the
address of the object.)

@@function input([prompt])

<p>Equivalent to {@code eval(raw_input(}{@var prompt})). Warning: This
function is not safe from user errors! It expects a valid Python
expression as input; if the input is not syntactically valid, a {@link
exceptions.SyntaxError} will be raised. Other exceptions may be raised
if there is an error during evaluation. (On the other hand, sometimes
this is exactly what you need when writing a quick script for expert
use.)

<p>If the {@link readline} module was loaded, then {@link input} will
use it to provide elaborate line editing and history features.

<p>Consider using the {@link raw_input} function for general input from
users.

@@function int([x[, radix]])

<p>Convert a string or number to a plain integer. If the argument is a
string, it must contain a possibly signed decimal number representable
as a Python integer, possibly embedded in whitespace. The {@var radix}
parameter gives the base for the conversion and may be any integer in
the range [2, 36], or zero. If {@var radix} is zero, the proper radix is
guessed based on the contents of string; the interpretation is the same
as for integer literals. If {@var radix} is specified and {@var x} is
not a string, {@link exceptions.TypeError} is raised. Otherwise, the
argument may be a plain or long integer or a floating point number.
Conversion of floating point numbers to integers truncates (towards
zero). If the argument is outside the integer range a long object will
be returned instead. If no arguments are given, returns {@code 0}.

@@function isinstance(object, classinfo)

<p>Return true if the {@var object} argument is an instance of the {@var
classinfo} argument, or of a (direct or indirect) subclass thereof. Also
return true if {@var classinfo} is a type object and {@var object} is an
object of that type. If {@var object} is not a class instance or an
object of the given type, the function always returns false. If {@var
classinfo} is neither a class object nor a type object, it may be a
tuple of class or type objects, or may recursively contain other such
tuples (other sequence types are not accepted). If {@var classinfo} is
not a class, type, or tuple of classes, types, and such tuples, a {@link
exceptions.TypeError} exception is raised.
<blockquote>
@since Changed in version 2.2: Support for a tuple of
type information was added. <br />
</blockquote>

@@function issubclass(class, classinfo)

<p>Return true if {@var class} is a subclass (direct or indirect) of
{@var classinfo}. A class is considered a subclass of itself. {@var
classinfo} may be a tuple of class objects, in which case every entry in
{@var classinfo} will be checked. In any other case, a {@link
exceptions.TypeError} exception is raised.
<blockquote>
@since Changed in version 2.3: Support
for a tuple of type information was added. <br />
</blockquote>

@@function iter(o[, sentinel])

<p>Return an iterator object. The first argument is interpreted very
differently depending on the presence of the second argument. Without a
second argument, {@var o} must be a collection object which supports the
iteration protocol (the {@link __iter__} method), or it must support the
sequence protocol (the {@link __getitem__} method with integer arguments
starting at {@code 0}). If it does not support either of those
protocols, {@link exceptions.TypeError} is raised. If the second
argument, {@var sentinel}, is given, then {@var o} must be a callable
object. The iterator created in this case will call {@var o} with no
arguments for each call to its {@link next} method; if the value
returned is equal to {@var sentinel}, {@link exceptions.StopIteration}
will be raised, otherwise the value will be returned.
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function len(s)

<p>Return the length (the number of items) of an object. The argument
may be a sequence (string, tuple or list) or a mapping (dictionary).

@@function list([sequence])

<p>Return a list whose items are the same and in the same order as {@var
sequence}'s items. {@var sequence} may be either a sequence, a container
that supports iteration, or an iterator object. If {@var sequence} is
already a list, a copy is made and returned, similar to {@var
sequence}[:]. For instance, {@code list('abc')} returns {@code ['a',
'b', 'c']} and {@code list( (1, 2, 3) )} returns {@code [1, 2, 3]}. If
no argument is given, returns a new empty list, {@code []}.

@@function locals()

<p>Update and return a dictionary representing the current local symbol
table. Warning: The contents of this dictionary should not be modified;
changes may not affect the values of local variables used by the
interpreter.

@@function long([x[, radix]])

<p>Convert a string or number to a long integer. If the argument is a
string, it must contain a possibly signed number of arbitrary size,
possibly embedded in whitespace. The {@var radix} argument is
interpreted in the same way as for {@link int}, and may only be given
when {@var x} is a string. Otherwise, the argument may be a plain or
long integer or a floating point number, and a long integer with the
same value is returned. Conversion of floating point numbers to integers
truncates (towards zero). If no arguments are given, returns {@code 0L}.

@@function map(function, list, ...)

<p>Apply {@var function} to every item of {@var list} and return a list
of the results. If additional {@var list} arguments are passed, {@var
function} must take that many arguments and is applied to the items of
all lists in parallel; if a list is shorter than another it is assumed
to be extended with {@link None} items. If {@var function} is {@code
None}, the identity function is assumed; if there are multiple list
arguments, {@link map} returns a list consisting of tuples containing
the corresponding items from all lists (a kind of transpose operation).
The {@var list} arguments may be any kind of sequence; the result is
always a list.

@@function max(s[, args...])

<p>With a single argument {@var s}, return the largest item of a
non-empty sequence (such as a string, tuple or list). With more than one
argument, return the largest of the arguments.

@@function min(s[, args...])

<p>With a single argument {@var s}, return the smallest item of a
non-empty sequence (such as a string, tuple or list). With more than one
argument, return the smallest of the arguments.

@@function object()

<p>Return a new featureless object. {@link object} is a base for all new
style classes. It has the methods that are common to all instances of
new style classes.

<p>Changed in version 2.3: This function does not accept any arguments.
Formerly, it accepted arguments but ignored them.
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function oct(x)

<p>Convert an integer number (of any size) to an octal string. The
result is a valid Python expression.
<blockquote>
@since Changed in version 2.4: Formerly only returned an unsigned
literal.. <br />
</blockquote>

@@function open(filename[, mode[, bufsize]])

<p>An alias for the {@link file} function above.

@@function ord(c)

<p>Given a string of length one, return an integer representing the
Unicode code point of the character when the argument is a unicode
object, or the value of the byte when the argument is an 8-bit string.
For example, {@code ord('a')} returns the integer {@code 97}, {@code
ord(u'\u2020')} returns {@code 8224}. This is the inverse of {@link chr}
for 8-bit strings and of {@link unichr} for unicode objects. If a
unicode argument is given and Python was built with UCS2 Unicode, then
the character's code point must be in the range [0..65535] inclusive;
otherwise the string length is two, and a {@link exceptions.TypeError}
will be raised.

@@function pow(x, y[, z])

<p>Return {@var x} to the power {@var y}; if {@var z} is present, return
{@var x} to the power {@var y}, modulo {@var z} (computed more
efficiently than {@code pow(}{@var x}, {@var y}) % {@var z}). The
arguments must have numeric types. With mixed operand types, the
coercion rules for binary arithmetic operators apply. For int and long
int operands, the result has the same type as the operands (after
coercion) unless the second argument is negative; in that case, all
arguments are converted to float and a float result is delivered. For
example, {@code 10**2} returns {@code 100}, but {@code 10**-2} returns
{@code 0.01}. (This last feature was added in Python 2.2. In Python 2.1
and before, if both arguments were of integer types and the second
argument was negative, an exception was raised.) If the second argument
is negative, the third argument must be omitted. If {@var z} is present,
{@var x} and {@var y} must be of integer types, and {@var y} must be
non-negative. (This restriction was added in Python 2.2. In Python 2.1
and before, floating 3-argument {@code pow()} returned
platform-dependent results depending on floating-point rounding
accidents.)

@@function property([fget[, fset[, fdel[, doc]]]])

<p>Return a property attribute for new-style classes (classes that
derive from {@link object}).

<p>{@var fget} is a function for getting an attribute value, likewise
{@var fset} is a function for setting, and {@var fdel} a function for
del'ing, an attribute. Typical use is to define a managed attribute x:

<pre>
class C(object):
    def __init__(self): self.__x = None
    def getx(self): return self.__x
    def setx(self, value): self.__x = value
    def delx(self): del self.__x
    x = property(getx, setx, delx, "I'm the 'x' property.")
</pre>

<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function range([start,] stop[, step])

<p>This is a versatile function to create lists containing arithmetic
progressions. It is most often used in {@link for} loops. The arguments
must be plain integers. If the {@var step} argument is omitted, it
defaults to {@code 1}. If the {@var start} argument is omitted, it
defaults to {@code 0}. The full form returns a list of plain integers
{@code [}{@var start}, {@var start} + {@var step}, {@var start} + 2 *
{@var step}, ...]. If {@var step} is positive, the last element is the
largest {@code }{@var start} + {@var i} * {@var step} less than {@var
stop}; if {@var step} is negative, the last element is the smallest
{@var start} + {@var i} * {@var step} greater than {@var stop}. {@var
step} must not be zero (or else {@link exceptions.ValueError} is
raised). Example:

<pre>
&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; range(1, 11)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; range(0, 30, 5)
[0, 5, 10, 15, 20, 25]
&gt;&gt;&gt; range(0, 10, 3)
[0, 3, 6, 9]
&gt;&gt;&gt; range(0, -10, -1)
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
&gt;&gt;&gt; range(0)
[]
&gt;&gt;&gt; range(1, 0)
[]
</pre>


@@function raw_input([prompt])

<p>If the {@var prompt} argument is present, it is written to standard
output without a trailing newline. The function then reads a line from
input, converts it to a string (stripping a trailing newline), and
returns that. When EOF is read, {@link exceptions.EOFError} is raised.
Example:

<pre>
&gt;&gt;&gt; s = raw_input('--&gt; ')
--&gt; Monty Python's Flying Circus
&gt;&gt;&gt; s
"Monty Python's Flying Circus"
</pre>


<p>If the {@link readline} module was loaded, then {@link raw_input}
will use it to provide elaborate line editing and history features.

@@function reduce(function, sequence[, initializer])

<p>Apply {@var function} of two arguments cumulatively to the items of
{@var sequence}, from left to right, so as to reduce the sequence to a
single value. For example, {@code reduce(lambda x, y: x+y, [1, 2, 3, 4,
5])} calculates {@code ((((1+2)+3)+4)+5)}. The left argument, {@var x},
is the accumulated value and the right argument, {@var y}, is the update
value from the {@var sequence}. If the optional {@var initializer} is
present, it is placed before the items of the sequence in the
calculation, and serves as a default when the sequence is empty. If
{@var initializer} is not given and {@var sequence} contains only one
item, the first item is returned.

@@function reload(module)

<p>Reload a previously imported {@var module}. The argument must be a
module object, so it must have been successfully imported before. This
is useful if you have edited the module source file using an external
editor and want to try out the new version without leaving the Python
interpreter. The return value is the module object (the same as the
{@var module} argument).

<p>When {@code reload(module)} is executed:
<ul>
<li>
<p>Python modules' code is recompiled and the module-level code
reexecuted, defining a new set of objects which are bound to names in
the module's dictionary. The {@code init} function of extension modules
is not called a second time.
<li>
<p>As with all other objects in Python the old objects are only
reclaimed after their reference counts drop to zero.
<li>
<p>The names in the module namespace are updated to point to any new or
changed objects.
<li>
<p>Other references to the old objects (such as names external to the
module) are not rebound to refer to the new objects and must be updated
in each namespace where they occur if that is desired.
</ul>

<p>There are a number of other caveats:

<p>If a module is syntactically correct but its initialization fails,
the first {@link import} statement for it does not bind its name
locally, but does store a (partially initialized) module object in
{@code sys.modules}. To reload the module you must first {@link import}
it again (this will bind the name to the partially initialized module
object) before you can {@link reload} it.

<p>When a module is reloaded, its dictionary (containing the module's
global variables) is retained. Redefinitions of names will override the
old definitions, so this is generally not a problem. If the new version
of a module does not define a name that was defined by the old version,
the old definition remains. This feature can be used to the module's
advantage if it maintains a global table or cache of objects -- with a
{@link try} statement it can test for the table's presence and skip its
initialization if desired:

<pre>
try:
    cache
except NameError:
    cache = {}
</pre>


<p>It is legal though generally not very useful to reload built-in or
dynamically loaded modules, except for {@link sys}, {@link main
__main__} and {@link builtin __builtin__}. In many cases, however,
extension modules are not designed to be initialized more than once, and
may fail in arbitrary ways when reloaded.

<p>If a module imports objects from another module using {@link from}
... {@link import} ..., calling {@link reload} for the other module does
not redefine the objects imported from it -- one way around this is to
re-execute the {@link from} statement, another is to use {@link import}
and qualified names ({@var module}.{@var name}) instead.

<p>If a module instantiates instances of a class, reloading the module
that defines the class does not affect the method definitions of the
instances -- they continue to use the old class definition. The same is
true for derived classes.

@@function repr(object)

<p>Return a string containing a printable representation of an object.
This is the same value yielded by conversions (reverse quotes). It is
sometimes useful to be able to access this operation as an ordinary
function. For many types, this function makes an attempt to return a
string that would yield an object with the same value when passed to
{@link eval}.

@@function reversed(seq)

<p>Return a reverse iterator. {@var seq} must be an object which
supports the sequence protocol (the __len__() method and the {@link
__getitem__} method with integer arguments starting at {@code 0}).
<blockquote>
@since New in
version 2.4. <br />
</blockquote>

@@function round(x[, n])

<p>Return the floating point value {@var x} rounded to {@var n} digits
after the decimal point. If {@var n} is omitted, it defaults to zero.
The result is a floating point number. Values are rounded to the closest
multiple of 10 to the power minus {@var n}; if two multiples are equally
close, rounding is done away from 0 (so. for example, {@code round(0.5)}
is {@code 1.0} and {@code round(-0.5)} is {@code -1.0}).

@@function set([iterable])

<p>Return a set whose elements are taken from {@var iterable}. The
elements must be immutable. To represent sets of sets, the inner sets
should be {@link frozenset} objects. If {@var iterable} is not
specified, returns a new empty set, {@code set([])}.
<blockquote>
@since New in version
2.4. <br />
</blockquote>

@@function setattr(object, name, value)

<p>This is the counterpart of {@link getattr}. The arguments are an
object, a string and an arbitrary value. The string may name an existing
attribute or a new attribute. The function assigns the value to the
attribute, provided the object allows it. For example, {@code
setattr(}{@var x}, '{@var foobar}', 123) is equivalent to {@var x}.{@var
foobar} = 123.

@@function slice([start,] stop[, step])

<p>Return a slice object representing the set of indices specified by
{@code range(}{@var start}, {@var stop}, {@var step}). The {@var start}
and {@var step} arguments default to {@link None}. Slice objects have
read-only data attributes {@link start}, {@link stop} and {@link step}
which merely return the argument values (or their default). They have no
other explicit functionality; however they are used by Numerical Python
and other third party extensions. Slice objects are also generated when
extended indexing syntax is used. For example: "{@code
a[start:stop:step]}" or "{@code a[start:stop, i]}".

@@function sorted(iterable[, cmp[, key[, reverse]]])

<p>Return a new sorted list from the items in {@var iterable}. The
optional arguments {@var cmp}, {@var key}, and {@var reverse} have the
same meaning as those for the {@link list.sort} method.
<blockquote>
@since New in version 2.4. <br />
</blockquote>

@@function staticmethod(function)

<p>Return a static method for {@var function}.

<p>A static method does not receive an implicit first argument. To
declare a static method, use this idiom:

<pre>
class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</pre>


<p>The {@code @staticmethod} form is a function decorator - see the
description of function definitions in chapter 7 of the {@link
../ref/ref.html Python Reference Manual} for details.

<p>It can be called either on the class (such as {@code C.f()}) or on an
instance (such as {@code C().f()}). The instance is ignored except for
its class.

<p>Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see {@link classmethod} in this section.
Changed in version 2.4: Function decorator syntax added.
<blockquote>
@since New
in version 2.2. <br />
</blockquote>

@@function str([object])

<p>Return a string containing a nicely printable representation of an
object. For strings, this returns the string itself. The difference with
{@code repr(}{@var object}) is that {@code str(}{@var object}) does not
always attempt to return a string that is acceptable to {@link eval};
its goal is to return a printable string. If no argument is given,
returns the empty string, {@code &#8221;}.

@@function sum(sequence[, start])

<p>Sums {@var start} and the items of a {@var sequence}, from left to
right, and returns the total. {@var start} defaults to {@code 0}. The
{@var sequence}'s items are normally numbers, and are not allowed to be
strings. The fast, correct way to concatenate sequence of strings is by
calling {@code &#8221;.join(}{@var sequence}). Note that {@code
sum(range(}{@var n}), {@var m}) is equivalent to {@code
reduce(operator.add, range(}{@var n}), {@var m})
<blockquote>
@since New in version
2.3. <br />
</blockquote>

@@function super(type[, object-or-type])

<p>Return the superclass of {@var type}. If the second argument is
omitted the super object returned is unbound. If the second argument is
an object, {@code isinstance(}{@var obj}, {@var type}) must be true. If
the second argument is a type, {@code issubclass(}{@var type2}, {@var
type}) must be true. {@link super} only works for new-style classes.

<p>A typical use for calling a cooperative superclass method is:

<pre>
class C(B):
    def meth(self, arg):
        super(C, self).meth(arg)
</pre>


<p>Note that {@link super} is implemented as part of the binding process
for explicit dotted attribute lookups such as "{@code super(C,
self).__getitem__(name)}". Accordingly, {@link super} is undefined for
implicit lookups using statements or operators such as "{@code super(C,
self)[name]}".
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function tuple([sequence])

<p>Return a tuple whose items are the same and in the same order as
{@var sequence}'s items. {@var sequence} may be a sequence, a container
that supports iteration, or an iterator object. If {@var sequence} is
already a tuple, it is returned unchanged. For instance, {@code
tuple('abc')} returns {@code ('a', 'b', 'c')} and {@code tuple([1, 2,
3])} returns {@code (1, 2, 3)}. If no argument is given, returns a new
empty tuple, {@code ()}.

@@function type(object)

<p>Return the type of an {@var object}. The return value is a type
object. The {@link isinstance} built-in function is recommended for
testing the type of an object.

<p>With three arguments, {@link type} functions as a constructor as
detailed below.

@@function type(name, bases, dict)

<p>Return a new type object. This is essentially a dynamic form of the
{@link class} statement. The {@var name} string is the class name and
becomes the {@link __name__} attribute; the {@var bases} tuple itemizes
the base classes and becomes the {@link __bases__} attribute; and the
{@var dict} dictionary is the namespace containing definitions for class
body and becomes the {@link __dict__} attribute. For example, the
following two statements create identical {@link type} objects:

<pre>
  &gt;&gt;&gt; class X(object):
  ...     a = 1
  ...     
  &gt;&gt;&gt; X = type('X', (object,), dict(a=1))
</pre>

<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@function unichr(i)

<p>Return the Unicode string of one character whose Unicode code is the
integer {@var i}. For example, {@code unichr(97)} returns the string
{@code u'a'}. This is the inverse of {@link ord} for Unicode strings.
The valid range for the argument depends how Python was configured - it
may be either UCS2 [0..0xFFFF] or UCS4 [0..0x10FFFF]. {@link
exceptions.ValueError} is raised otherwise.
<blockquote>
@since New in version 2.0. <br />
</blockquote>

@@function unicode([object[, encoding [, errors]]])

<p>Return the Unicode string version of {@var object} using one of the
following modes:

<p>If {@var encoding} and/or {@var errors} are given, {@code unicode()}
will decode the object which can either be an 8-bit string or a
character buffer using the codec for {@var encoding}. The {@var
encoding} parameter is a string giving the name of an encoding; if the
encoding is not known, {@link exceptions.LookupError} is raised. Error
handling is done according to {@var errors}; this specifies the
treatment of characters which are invalid in the input encoding. If
{@var errors} is {@code 'strict'} (the default), a {@link
exceptions.ValueError} is raised on errors, while a value of {@code
'ignore'} causes errors to be silently ignored, and a value of {@code
'replace'} causes the official Unicode replacement character, {@code
U+FFFD}, to be used to replace input characters which cannot be decoded.
See also the {@link codecs} module.

<p>If no optional parameters are given, {@code unicode()} will mimic the
behaviour of {@code str()} except that it returns Unicode strings
instead of 8-bit strings. More precisely, if {@var object} is a Unicode
string or subclass it will return that Unicode string without any
additional decoding applied.

<p>For objects which provide a {@link __unicode__} method, it will call
this method without arguments to create a Unicode string. For all other
objects, the 8-bit string version or representation is requested and
then converted to a Unicode string using the codec for the default
encoding in {@code 'strict'} mode.

<p>Changed in version 2.2: Support for {@link __unicode__} added.
<blockquote>
@since New in version 2.0. <br />
</blockquote>

@@function vars([object])

<p>Without arguments, return a dictionary corresponding to the current
local symbol table. With a module, class or class instance object as
argument (or anything else that has a {@link __dict__} attribute),
returns a dictionary corresponding to the object's symbol table. The
returned dictionary should not be modified: the effects on the
corresponding symbol table are undefined.{@link footnote:996}

@@function xrange([start,] stop[, step])

<p>This function is very similar to {@link range}, but returns an
&#8220;xrange object&#8221; instead of a list. This is an opaque
sequence type which yields the same values as the corresponding list,
without actually storing them all simultaneously. The advantage of
{@link xrange} over {@link range} is minimal (since {@link xrange} still
has to create the values when asked for them) except when a very large
range is used on a memory-starved machine or when all of the range's
elements are never used (such as when the loop is usually terminated
with {@link break}).

<p class='note'><b>Note:</b> {@link xrange} is intended to be simple and
fast. Implementations may impose restrictions to achieve this. The C
implementation of Python restricts all arguments to native C longs
("short" Python integers), and also requires that the number of elements
fit in a native C long.

@@function zip([iterable, ...])

<p>This function returns a list of tuples, where the {@var i}-th tuple
contains the {@var i}-th element from each of the argument sequences or
iterables. The returned list is truncated in length to the length of the
shortest argument sequence. When there are multiple arguments which are
all of the same length, {@link zip} is similar to {@link map} with an
initial argument of {@link None}. With a single sequence argument, it
returns a list of 1-tuples. With no arguments, it returns an empty list.

<p>Changed in version 2.4: Formerly, {@link zip} required at least one
argument and {@code zip()} raised a {@link exceptions.TypeError} instead
of returning an empty list..
<blockquote>
@since New
in version 2.0. <br />
</blockquote>

@@text 

<h4>Footnotes</h4>

@@variable ... module.2.2
@@unknown It is used relatively rarely so does not warrant being made into a statement.
@@variable ... used.2.3
@@unknown Specifying a buffer size currently has no effect on systems that don't have setvbuf(). The interface to specify the buffer size is not done using a method that calls setvbuf(), because that may dump core when called after any I/O has been performed, and there's no reliable way to determine whether this is the case.
@@variable ... undefined.2.4

<p>In the current implementation, local variable bindings cannot
normally be affected this way, but variables retrieved from other scopes
(such as modules) can be. This may change.

@@text 

<h1>Non-essential Built-in Functions</h1>

<p>There are several built-in functions that are no longer essential to
learn, know or use in modern Python programming. They have been kept
here to maintain backwards compatibility with programs written for older
versions of Python.

<p>Python programmers, trainers, students and bookwriters should feel
free to bypass these functions without concerns about missing something
important.

@@function apply(function, args[, keywords])

<p>The {@var function} argument must be a callable object (a
user-defined or built-in function or method, or a class object) and the
{@var args} argument must be a sequence. The {@var function} is called
with {@var args} as the argument list; the number of arguments is the
length of the tuple. If the optional {@var keywords} argument is
present, it must be a dictionary whose keys are strings. It specifies
keyword arguments to be added to the end of the argument list. Calling
{@link apply} is different from just calling {@var function}({@var
args}), since in that case there is always exactly one argument. The use
of {@link apply} is equivalent to {@var function}(*{@var args}, **{@var
keywords}). Use of {@link apply} is not necessary since the
&#8220;extended call syntax,&#8221; as used in the last example, is
completely equivalent.


<p>Deprecated since release 2.3. Use the extended call syntax instead,
as described above.

@@function buffer(object[, offset[, size]])

<p>The {@var object} argument must be an object that supports the buffer
call interface (such as strings, arrays, and buffers). A new buffer
object will be created which references the {@var object} argument. The
buffer object will be a slice from the beginning of {@var object} (or
from the specified {@var offset}). The slice will extend to the end of
{@var object} (or will have a length given by the {@var size} argument).

@@function coerce(x, y)

<p>Return a tuple consisting of the two numeric arguments converted to a
common type, using the same rules as used by arithmetic operations. If
coercion is not possible, raise {@link exceptions.TypeError}.

@@function intern(string)

<p>Enter {@var string} in the table of &#8220;interned&#8221; strings
and return the interned string - which is {@var string} itself or a
copy. Interning strings is useful to gain a little performance on
dictionary lookup - if the keys in a dictionary are interned, and the
lookup key is interned, the key comparisons (after hashing) can be done
by a pointer compare instead of a string compare. Normally, the names
used in Python programs are automatically interned, and the dictionaries
used to hold module, class or instance attributes have interned keys.
<blockquote>
@since Changed in version 2.3: Interned strings are not immortal (like
they used to be in Python 2.2 and before); you must keep a
reference to the return value of intern()
around to benefit from it. <br />
</blockquote>

@@text 

<h1>Built-in Types</h1>

<p>The following sections describe the standard types that are built
into the interpreter. Historically, Python's built-in types have
differed from user-defined types because it was not possible to use the
built-in types as the basis for object-oriented inheritance. With the
2.2 release this situation has started to change, although the intended
unification of user-defined and built-in types is as yet far from
complete.

<p>The principal built-in types are numerics, sequences, mappings, files
classes, instances and exceptions.

<p>Some operations are supported by several object types; in particular,
practically all objects can be compared, tested for truth value, and
converted to a string (with the {@code ` ...`} notation, the equivalent
{@link repr} function, or the slightly different {@link str} function).
The latter function is implicitly used when an object is written by the
{@link print} statement. (Information on {@link ../ref/print.html print
statement} and other language statements can be found in the {@link
../ref/ref.html Python Reference Manual} and the {@link ../tut/tut.html
Python Tutorial}.)
@@error unexpected div online-navigation

<h2>Truth Value Testing</h2>

<p>Any object can be tested for truth value, for use in an {@link if} or
{@link while} condition or as operand of the Boolean operations below.
The following values are considered false:
<ul>
<li>
<p>{@link None}
<li>
<p>{@link False}
<li>
<p>zero of any numeric type, for example, {@code 0}, {@code 0L}, {@code
0.0}, {@code 0j}.
<li>
<p>any empty sequence, for example, {@code &#8221;}, {@code ()}, {@code
[]}.
<li>
<p>any empty mapping, for example, {@code {}}.
<li>
<p>instances of user-defined classes, if the class defines a {@link
__nonzero__} or {@link __len__} method, when that method returns the
integer zero or {@link bool} value {@link False}.{@link footnote:3425}
</ul>

<p>All other values are considered true -- so objects of many types are
always true.

<p>Operations and built-in functions that have a Boolean result always
return {@code 0} or {@link False} for false and {@code 1} or {@link
True} for true, unless otherwise stated. (Important exception: the
Boolean operations "{@code or}" and "{@code and}" always return one of
their operands.)

<h4>Footnotes</h4>

@@variable ...False.2.5

<p>Additional information on these special methods may be found in the
{@link ../ref/ref.html Python Reference Manual}.

@@text 

<h2>Boolean Operations&#8212;and, or, not</h2>

<p>These are the Boolean operations, ordered by ascending priority:

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Result
<th>
<p>Notes
<tr> <td>
<p>{@var x} or {@var y}
<td>
<p>if {@var x} is false, then {@var y}, else {@var x}
<td>
<p>(1)
<tr> <td>
<p>{@var x} and {@var y}
<td>
<p>if {@var x} is false, then {@var x}, else {@var y}
<td>
<p>(1)
<tr> <td>
<p>{@code not }{@var x}
<td>
<p>if {@var x} is false, then {@link True}, else {@link False}
<td>
<p>(2)
</table></p>

<p>Notes:

@@variable (1)
@@unknown These only evaluate their second argument if needed for their outcome.
@@variable (2)

<p>"{@code not}" has a lower priority than non-Boolean operators, so
{@code not }{@var a} == {@var b} is interpreted as {@code not (}{@var a}
== {@var b}), and {@var a} == not {@var b} is a syntax error.

@@text 

<h2>Comparisons</h2>

<p>Comparison operations are supported by all objects. They all have the
same priority (which is higher than that of the Boolean operations).
Comparisons can be chained arbitrarily; for example, {@var x} &lt {@var
y} &lt= {@var z} is equivalent to {@var x} &lt {@var y} and {@var y}
&lt= {@var z}, except that {@var y} is evaluated only once (but in both
cases {@var z} is not evaluated at all when {@var x} &lt {@var y} is
found to be false).

<p>This table summarizes the comparison operations:

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Meaning
<th>
<p>Notes
<tr> <td>
<p>{@code &lt}
<td>
<p>strictly less than
<td> <tr> <td>
<p>{@code &lt=}
<td>
<p>less than or equal
<td> <tr> <td>
<p>{@code >}
<td>
<p>strictly greater than
<td> <tr> <td>
<p>{@code >=}
<td>
<p>greater than or equal
<td> <tr> <td>
<p>{@code ==}
<td>
<p>equal
<td> <tr> <td>
<p>{@code !=}
<td>
<p>not equal
<td>
<p>(1)
<tr> <td>
<p>{@code &lt>}
<td>
<p>not equal
<td>
<p>(1)
<tr> <td>
<p>{@code is}
<td>
<p>object identity
<td> <tr> <td>
<p>{@code is not}
<td>
<p>negated object identity
<td> </table></p>

<p>Notes:

@@variable (1)

<p>{@code &lt>} and {@code !=} are alternate spellings for the same
operator. {@code !=} is the preferred spelling; {@code &lt>} is
obsolescent.

@@text 

<p>Objects of different types, except different numeric types and
different string types, never compare equal; such objects are ordered
consistently but arbitrarily (so that sorting a heterogeneous array
yields a consistent result). Furthermore, some types (for example, file
objects) support only a degenerate notion of comparison where any two
objects of that type are unequal. Again, such objects are ordered
arbitrarily but consistently. The {@code &lt}, {@code &lt=}, {@code >}
and {@code >=} operators will raise a {@link exceptions.TypeError}
exception when any operand is a complex number.

<p>Instances of a class normally compare as non-equal unless the class
defines the {@link __cmp__} method. Refer to the {@link
../ref/customization.html Python Reference Manual} for information on
the use of this method to effect object comparisons.

<p>Implementation note: Objects of different types except numbers are
ordered by their type names; objects of the same types that don't
support proper comparison are ordered by their address.

<p>Two more operations with the same syntactic priority, "{@code in}"
and "{@code not in}", are supported only by sequence types (below).

<h2>Numeric Types&#8212;int, float, long, complex</h2>

<p>There are four distinct numeric types: plain integers, long integers,
floating point numbers, and complex numbers. In addition, Booleans are a
subtype of plain integers. Plain integers (also just called integers)
are implemented using {@link c:long} in C, which gives them at least 32
bits of precision. Long integers have unlimited precision. Floating
point numbers are implemented using {@link c:double} in C. All bets on
their precision are off unless you happen to know the machine you are
working with.

<p>Complex numbers have a real and imaginary part, which are each
implemented using {@link c:double} in C. To extract these parts from a
complex number {@var z}, use {@var z}.real and {@var z}.imag.

<p>Numbers are created by numeric literals or as the result of built-in
functions and operators. Unadorned integer literals (including hex and
octal numbers) yield plain integers unless the value they denote is too
large to be represented as a plain integer, in which case they yield a
long integer. Integer literals with an "{@code L}" or "{@code l}" suffix
yield long integers ("{@code L}" is preferred because "{@code 1l}" looks
too much like eleven!). Numeric literals containing a decimal point or
an exponent sign yield floating point numbers. Appending "{@code j}" or
"{@code J}" to a numeric literal yields a complex number with a zero
real part. A complex numeric literal is the sum of a real and an
imaginary part.

<p>Python fully supports mixed arithmetic: when a binary arithmetic
operator has operands of different numeric types, the operand with the
&#8220;narrower&#8221; type is widened to that of the other, where plain
integer is narrower than long integer is narrower than floating point is
narrower than complex. Comparisons between numbers of mixed type use the
same rule.{@link footnote:3444} The constructors {@link int}, {@link
long}, {@link float}, and {@link complex} can be used to produce numbers
of a specific type.

<p>All numeric types (except complex) support the following operations,
sorted by ascending priority (operations in the same box have the same
priority; all numeric operations have a higher priority than comparison
operations):

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Result
<th>
<p>Notes
<tr> <td>
<p>{@var x} + {@var y}
<td>
<p>sum of {@var x} and {@var y}
<td> <tr> <td>
<p>{@var x} - {@var y}
<td>
<p>difference of {@var x} and {@var y}
<td> <tr> <td>
<p>{@var x} * {@var y}
<td>
<p>product of {@var x} and {@var y}
<td> <tr> <td>
<p>{@var x} / {@var y}
<td>
<p>quotient of {@var x} and {@var y}
<td>
<p>(1)
<tr> <td>
<p>{@var x} % {@var y}
<td>
<p>remainder of {@var x} / {@var y}
<td>
<p>(4)
<tr> <td>
<p>{@code -}{@var x}
<td>
<p>{@var x} negated
<td> <tr> <td>
<p>{@code +}{@var x}
<td>
<p>{@var x} unchanged
<td> <tr> <td>
<p>{@code abs(}{@var x})
<td>
<p>absolute value or magnitude of {@var x}
<td> <tr> <td>
<p>{@code int(}{@var x})
<td>
<p>{@var x} converted to integer
<td>
<p>(2)
<tr> <td>
<p>{@code long(}{@var x})
<td>
<p>{@var x} converted to long integer
<td>
<p>(2)
<tr> <td>
<p>{@code float(}{@var x})
<td>
<p>{@var x} converted to floating point
<td> <tr> <td>
<p>{@code complex(}{@var re},{@var im})
<td>
<p>a complex number with real part {@var re}, imaginary part {@var im}.
{@var im} defaults to zero.
<td> <tr> <td>
<p>{@var c}.conjugate()
<td>
<p>conjugate of the complex number {@var c}
<td> <tr> <td>
<p>{@code divmod(}{@var x}, {@var y})
<td>
<p>the pair {@code (}{@var x} // {@var y}, {@var x} % {@var y})
<td>
<p>(3)(4)
<tr> <td>
<p>{@code pow(}{@var x}, {@var y})
<td>
<p>{@var x} to the power {@var y}
<td> <tr> <td>
<p>{@var x} ** {@var y}
<td>
<p>{@var x} to the power {@var y}
<td> </table></p>

<p>Notes:

@@variable (1)
@@unknown For (plain or long) integer division, the result is an integer. The result is always rounded towards minus infinity: 1/2 is 0, (-1)/2 is -1, 1/(-2) is -1, and (-1)/(-2) is 0. Note that the result is a long integer if either operand is a long integer, regardless of the numeric value.
@@variable (2)
@@function Conversion from floating point to (long or plain) integer may round or truncate as in C; see functions floor() and ceil() in the math module for well-defined conversions.
@@variable (3)
@@unknown See section 2.1, ``Built-in Functions,'' for a full description.
@@variable (4)

<p>Complex floor division operator, modulo operator, and {@link divmod}.


<p>Deprecated since release 2.3. Instead convert to float using {@link
abs} if appropriate.

@@text 

<h4>Footnotes</h4>

@@variable ... rule.2.6

<p>As a consequence, the list {@code [1, 2]} is considered equal to
{@code [1.0, 2.0]}, and similarly for tuples.

@@text 
@@error unexpected div online-navigation

<h3>Bit-string Operations on Integer Types</h3>

<p>Plain and long integer types support additional operations that make
sense only for bit-strings. Negative numbers are treated as their 2's
complement value (for long integers, this assumes a sufficiently large
number of bits that no overflow occurs during the operation).

<p>The priorities of the binary bit-wise operations are all lower than
the numeric operations and higher than the comparisons; the unary
operation "{@code ~}" has the same priority as the other unary numeric
operations ("{@code +}" and "{@code -}").

<p>This table lists the bit-string operations sorted in ascending
priority (operations in the same box have the same priority):

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Result
<th>
<p>Notes
<tr> <td>
<p>{@var x} | {@var y}
<td>
<p>bitwise or of {@var x} and {@var y}
<td> <tr> <td>
<p>{@var x} ^ {@var y}
<td>
<p>bitwise exclusive or of {@var x} and {@var y}
<td> <tr> <td>
<p>{@var x} &amp; {@var y}
<td>
<p>bitwise and of {@var x} and {@var y}
<td> <tr> <td>
<p>{@var x} &lt&lt {@var n}
<td>
<p>{@var x} shifted left by {@var n} bits
<td>
<p>(1), (2)
<tr> <td>
<p>{@var x} >> {@var n}
<td>
<p>{@var x} shifted right by {@var n} bits
<td>
<p>(1), (3)
<tr> <td>
<p>{@code ~}{@var x}
<td>
<p>the bits of {@var x} inverted
<td> </table></p>

<p>Notes:

@@variable (1)
@@exception Negative shift counts are illegal and cause a ValueError to be raised.
@@variable (2)
@@unknown A left shift by n bits is equivalent to multiplication by pow(2, n) without overflow check.
@@variable (3)

<p>A right shift by {@var n} bits is equivalent to division by {@code
pow(2, }{@var n}) without overflow check.

@@text 

<h2>Iterator Types</h2>

<p>New in version 2.2.

<p>Python supports a concept of iteration over containers. This is
implemented using two distinct methods; these are used to allow
user-defined classes to support iteration. Sequences, described below in
more detail, always support the iteration methods.

<p>One method needs to be defined for container objects to provide
iteration support:

@@method __iter__()

<p>Return an iterator object. The object is required to support the
iterator protocol described below. If a container supports different
types of iteration, additional methods can be provided to specifically
request iterators for those iteration types. (An example of an object
supporting multiple forms of iteration would be a tree structure which
supports both breadth-first and depth-first traversal.) This method
corresponds to the {@link tp_iter} slot of the type structure for Python
objects in the Python/C API.

@@text 

<p>The iterator objects themselves are required to support the following
two methods, which together form the iterator protocol:

@@method __iter__()

<p>Return the iterator object itself. This is required to allow both
containers and iterators to be used with the {@link for} and {@link in}
statements. This method corresponds to the {@link tp_iter} slot of the
type structure for Python objects in the Python/C API.

@@method next()

<p>Return the next item from the container. If there are no further
items, raise the {@link exceptions.StopIteration} exception. This method
corresponds to the {@link tp_iternext} slot of the type structure for
Python objects in the Python/C API.

@@text 

<p>Python defines several iterator objects to support iteration over
general and specific sequence types, dictionaries, and other more
specialized forms. The specific types are not important beyond their
implementation of the iterator protocol.

<p>The intention of the protocol is that once an iterator's {@link next}
method raises {@link exceptions.StopIteration}, it will continue to do
so on subsequent calls. Implementations that do not obey this property
are deemed broken. (This constraint was added in Python 2.3; in Python
2.2, various iterators are broken according to this rule.)

<p>Python's generators provide a convenient way to implement the
iterator protocol. If a container object's {@link __iter__} method is
implemented as a generator, it will automatically return an iterator
object (technically, a generator object) supplying the {@link __iter__}
and {@link next} methods.

<h2>Sequence Types&#8212;str, unicode, list, tuple, buffer, xrange</h2>

<p>There are six sequence types: strings, Unicode strings, lists,
tuples, buffers, and xrange objects.

<p>String literals are written in single or double quotes: {@code
'xyzzy'}, {@code "frobozz"}. See chapter 2 of the {@link
../ref/strings.html Python Reference Manual} for more about string
literals. Unicode strings are much like strings, but are specified in
the syntax using a preceding "{@code u}" character: {@code u'abc'},
{@code u"def"}. Lists are constructed with square brackets, separating
items with commas: {@code [a, b, c]}. Tuples are constructed by the
comma operator (not within square brackets), with or without enclosing
parentheses, but an empty tuple must have the enclosing parentheses,
such as {@code a, b, c} or {@code ()}. A single item tuple must have a
trailing comma, such as {@code (d,)}.

<p>Buffer objects are not directly supported by Python syntax, but can
be created by calling the builtin function {@link buffer}. They don't
support concatenation or repetition.

<p>Xrange objects are similar to buffers in that there is no specific
syntax to create them, but they are created using the {@link xrange}
function. They don't support slicing, concatenation or repetition, and
using {@code in}, {@code not in}, {@link min} or {@link max} on them is
inefficient.

<p>Most sequence types support the following operations. The "{@code
in}" and "{@code not in}" operations have the same priorities as the
comparison operations. The "{@code +}" and "{@code *}" operations have
the same priority as the corresponding numeric operations.{@link
footnote:1961}

<p>This table lists the sequence operations sorted in ascending priority
(operations in the same box have the same priority). In the table, {@var
s} and {@var t} are sequences of the same type; {@var n}, {@var i} and
{@var j} are integers:

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Result
<th>
<p>Notes
<tr> <td>
<p>{@var x} in {@var s}
<td>
<p>{@link True} if an item of {@var s} is equal to {@var x}, else {@link
False}
<td>
<p>(1)
<tr> <td>
<p>{@var x} not in {@var s}
<td>
<p>{@link False} if an item of {@var s} is equal to {@var x}, else
{@link True}
<td>
<p>(1)
<tr> <td>
<p>{@var s} + {@var t}
<td>
<p>the concatenation of {@var s} and {@var t}
<td>
<p>(6)
<tr> <td>
<p>{@var s} * {@var n} , {@var n} * {@var s}
<td>
<p>{@var n} shallow copies of {@var s} concatenated
<td>
<p>(2)
<tr> <td>
<p>{@var s}[{@var i}]
<td>
<p>{@var i}'th item of {@var s}, origin 0
<td>
<p>(3)
<tr> <td>
<p>{@var s}[{@var i}:{@var j}]
<td>
<p>slice of {@var s} from {@var i} to {@var j}
<td>
<p>(3), (4)
<tr> <td>
<p>{@var s}[{@var i}:{@var j}:{@var k}]
<td>
<p>slice of {@var s} from {@var i} to {@var j} with step {@var k}
<td>
<p>(3), (5)
<tr> <td>
<p>{@code len(}{@var s})
<td>
<p>length of {@var s}
<td> <tr> <td>
<p>{@code min(}{@var s})
<td>
<p>smallest item of {@var s}
<td> <tr> <td>
<p>{@code max(}{@var s})
<td>
<p>largest item of {@var s}
<td> </table></p>

<p>Notes:

@@variable (1)
@@unknown When s is a string or Unicode string object the in and not in operations act like a substring test. In Python versions before 2.3, x had to be a string of length 1. In Python 2.3 and beyond, x may be a string of any length.
@@variable (2)
@@unknown Values of n less than 0 are treated as 0 (which yields an empty sequence of the same type as s). Note also that the copies are shallow; nested structures are not copied. This often haunts new Python programmers; consider: >>> lists = [[]] * 3 >>> lists [[], [], []] >>> lists[0].append(3) >>> lists [[3], [3], [3]] What has happened is that [[]] is a one-element list containing an empty list, so all three elements of [[]] * 3 are (pointers to) this single empty list. Modifying any of the elements of lists modifies this single list. You can create a list of different lists this way: >>> lists = [[] for i in range(3)] >>> lists[0].append(3) >>> lists[1].append(5) >>> lists[2].append(7) >>> lists [[3], [5], [7]]
@@variable (3)
@@unknown If i or j is negative, the index is relative to the end of the string: len(s) + i or len(s) + j is substituted. But note that -0 is still 0.
@@variable (4)
@@unknown The slice of s from i to j is defined as the sequence of items with index k such that i <= k < j. If i or j is greater than len(s), use len(s). If i is omitted, use 0. If j is omitted, use len(s). If i is greater than or equal to j, the slice is empty.
@@variable (5)
@@unknown The slice of s from i to j with step k is defined as the sequence of items with index x = i + n*k such that . In other words, the indices are i, i+k, i+2*k, i+3*k and so on, stopping when j is reached (but never including j). If i or j is greater than len(s), use len(s). If i or j are omitted then they become ``end'' values (which end depends on the sign of k). Note, k cannot be zero.
@@variable (6)

<p>If {@var s} and {@var t} are both strings, some Python
implementations such as CPython can usually perform an in-place
optimization for assignments of the form {@var s}={@var s}+{@var t} or
{@var s}+={@var t}. When applicable, this optimization makes quadratic
run-time much less likely. This optimization is both version and
implementation dependent. For performance sensitive code, it is
preferable to use the {@link str.join} method which assures consistent
linear concatenation performance across versions and implementations.
<blockquote>
@since Changed in version 2.4: Formerly, string
concatenation never occurred in-place. <br />
</blockquote>

@@text 

<h4>Footnotes</h4>

@@variable ... operations.2.7

<p>They must have since the parser can't tell the type of the operands.

@@text 
@@error unexpected div online-navigation

<h3>String Methods</h3>

<p>These are the string methods which both 8-bit strings and Unicode
objects support:

@@method capitalize()

<p>Return a copy of the string with only its first character
capitalized.

<p>For 8-bit strings, this method is locale-dependent.

@@method center(width[, fillchar])

<p>Return centered in a string of length {@var width}. Padding is done
using the specified {@var fillchar} (default is a space).
<blockquote>
@since Changed in version 2.4: Support
for the fillchar argument. <br />
</blockquote>

@@method count(sub[, start[, end]])

<p>Return the number of occurrences of substring {@var sub} in string
S{@code [}{@var start}:{@var end}]. Optional arguments {@var start} and
{@var end} are interpreted as in slice notation.

@@method decode([encoding[, errors]])

<p>Decodes the string using the codec registered for {@var encoding}.
{@var encoding} defaults to the default string encoding. {@var errors}
may be given to set a different error handling scheme. The default is
{@code 'strict'}, meaning that encoding errors raise {@link
exceptions.UnicodeError}. Other possible values are {@code 'ignore'},
{@code 'replace'} and any other name registered via {@link
codecs.register_error}. Changed in version 2.3: Support for other error
handling schemes added.
<blockquote>
@since New in version 2.2. <br />
</blockquote>

@@method encode([encoding[,errors]])

<p>Return an encoded version of the string. Default encoding is the
current default string encoding. {@var errors} may be given to set a
different error handling scheme. The default for {@var errors} is {@code
'strict'}, meaning that encoding errors raise a {@link
exceptions.UnicodeError}. Other possible values are {@code 'ignore'},
{@code 'replace'}, {@code 'xmlcharrefreplace'}, {@code
'backslashreplace'} and any other name registered via {@link
codecs.register_error}. For a list of possible encodings, see section
{@link standard-encodings.html#standard-encodings}. Changed in version
2.3: Support for {@code 'xmlcharrefreplace'} and {@code
'backslashreplace'} and other error handling schemes added.
<blockquote>
@since New in version 2.0. <br />
</blockquote>

@@method endswith(suffix[, start[, end]])

<p>Return {@link True} if the string ends with the specified {@var
suffix}, otherwise return {@link False}. With optional {@var start},
test beginning at that position. With optional {@var end}, stop
comparing at that position.

@@method expandtabs([tabsize])

<p>Return a copy of the string where all tab characters are expanded
using spaces. If {@var tabsize} is not given, a tab size of {@code 8}
characters is assumed.

@@method find(sub[, start[, end]])

<p>Return the lowest index in the string where substring {@var sub} is
found, such that {@var sub} is contained in the range [{@var start},
{@var end}). Optional arguments {@var start} and {@var end} are
interpreted as in slice notation. Return {@code -1} if {@var sub} is not
found.

@@method index(sub[, start[, end]])

<p>Like {@link find}, but raise {@link exceptions.ValueError} when the
substring is not found.

@@method isalnum()

<p>Return true if all characters in the string are alphanumeric and
there is at least one character, false otherwise.

<p>For 8-bit strings, this method is locale-dependent.

@@method isalpha()

<p>Return true if all characters in the string are alphabetic and there
is at least one character, false otherwise.

<p>For 8-bit strings, this method is locale-dependent.

@@method isdigit()

<p>Return true if all characters in the string are digits and there is
at least one character, false otherwise.

<p>For 8-bit strings, this method is locale-dependent.

@@method islower()

<p>Return true if all cased characters in the string are lowercase and
there is at least one cased character, false otherwise.

<p>For 8-bit strings, this method is locale-dependent.

@@method isspace()

<p>Return true if there are only whitespace characters in the string and
there is at least one character, false otherwise.

<p>For 8-bit strings, this method is locale-dependent.

@@method istitle()

<p>Return true if the string is a titlecased string and there is at
least one character, for example uppercase characters may only follow
uncased characters and lowercase characters only cased ones. Return
false otherwise.

<p>For 8-bit strings, this method is locale-dependent.

@@method isupper()

<p>Return true if all cased characters in the string are uppercase and
there is at least one cased character, false otherwise.

<p>For 8-bit strings, this method is locale-dependent.

@@method join(seq)

<p>Return a string which is the concatenation of the strings in the
sequence {@var seq}. The separator between elements is the string
providing this method.

@@method ljust(width[, fillchar])

<p>Return the string left justified in a string of length {@var width}.
Padding is done using the specified {@var fillchar} (default is a
space). The original string is returned if {@var width} is less than
{@code len(}{@var s}).
<blockquote>
@since Changed in
version 2.4: Support for the fillchar
argument. <br />
</blockquote>

@@method lower()

<p>Return a copy of the string converted to lowercase.

<p>For 8-bit strings, this method is locale-dependent.

@@method lstrip([chars])

<p>Return a copy of the string with leading characters removed. The
{@var chars} argument is a string specifying the set of characters to be
removed. If omitted or {@link None}, the {@var chars} argument defaults
to removing whitespace. The {@var chars} argument is not a prefix;
rather, all combinations of its values are stripped:

<pre>
    &gt;&gt;&gt; '   spacious   '.lstrip()
    'spacious   '
    &gt;&gt;&gt; 'www.example.com'.lstrip('cmowz.')
    'example.com'
</pre>

<blockquote>
@since Changed in version 2.2.2: Support for the
chars argument. <br />
</blockquote>

@@method replace(old, new[, count])

<p>Return a copy of the string with all occurrences of substring {@var
old} replaced by {@var new}. If the optional argument {@var count} is
given, only the first {@var count} occurrences are replaced.

@@method rfind(sub [,start [,end]])

<p>Return the highest index in the string where substring {@var sub} is
found, such that {@var sub} is contained within s[start,end]. Optional
arguments {@var start} and {@var end} are interpreted as in slice
notation. Return {@code -1} on failure.

@@method rindex(sub[, start[, end]])

<p>Like {@link rfind} but raises {@link exceptions.ValueError} when the
substring {@var sub} is not found.

@@method rjust(width[, fillchar])

<p>Return the string right justified in a string of length {@var width}.
Padding is done using the specified {@var fillchar} (default is a
space). The original string is returned if {@var width} is less than
{@code len(}{@var s}).
<blockquote>
@since Changed in
version 2.4: Support for the fillchar
argument. <br />
</blockquote>

@@method rsplit([sep [,maxsplit]])

<p>Return a list of the words in the string, using {@var sep} as the
delimiter string. If {@var maxsplit} is given, at most {@var maxsplit}
splits are done, the {@em rightmost} ones. If {@var sep} is not
specified or {@link None}, any whitespace string is a separator. Except
for splitting from the right, {@link rsplit} behaves like {@link split}
which is described in detail below.
<blockquote>
@since New in version 2.4. <br />
</blockquote>

@@method rstrip([chars])

<p>Return a copy of the string with trailing characters removed. The
{@var chars} argument is a string specifying the set of characters to be
removed. If omitted or {@link None}, the {@var chars} argument defaults
to removing whitespace. The {@var chars} argument is not a suffix;
rather, all combinations of its values are stripped:

<pre>
    &gt;&gt;&gt; '   spacious   '.rstrip()
    '   spacious'
    &gt;&gt;&gt; 'mississippi'.rstrip('ipz')
    'mississ'
</pre>

<blockquote>
@since Changed in version 2.2.2: Support for the
chars argument. <br />
</blockquote>

@@method split([sep [,maxsplit]])

<p>Return a list of the words in the string, using {@var sep} as the
delimiter string. If {@var maxsplit} is given, at most {@var maxsplit}
splits are done. (thus, the list will have at most {@var maxsplit}+1
elements). If {@var maxsplit} is not specified, then there is no limit
on the number of splits (all possible splits are made). Consecutive
delimiters are not grouped together and are deemed to delimit empty
strings (for example, "{@code '1,,2'.split(',')}"returns "{@code ['1',
&#8221;, '2']}"). The {@var sep} argument may consist of multiple
characters (for example, "{@code '1, 2, 3'.split(', ')}" returns "{@code
['1', '2', '3']}"). Splitting an empty string with a specified separator
returns "{@code [&#8221;]}".

<p>If {@var sep} is not specified or is {@link None}, a different
splitting algorithm is applied. First, whitespace characters (spaces,
tabs, newlines, returns, and formfeeds) are stripped from both ends.
Then, words are separated by arbitrary length strings of whitespace
characters. Consecutive whitespace delimiters are treated as a single
delimiter ("{@code '1 2 3'.split()}" returns "{@code ['1', '2', '3']}").
Splitting an empty string or a string consisting of just whitespace
returns an empty list.

@@method splitlines([keepends])

<p>Return a list of the lines in the string, breaking at line
boundaries. Line breaks are not included in the resulting list unless
{@var keepends} is given and true.

@@method startswith(prefix[, start[, end]])

<p>Return {@link True} if string starts with the {@var prefix},
otherwise return {@link False}. With optional {@var start}, test string
beginning at that position. With optional {@var end}, stop comparing
string at that position.

@@method strip([chars])

<p>Return a copy of the string with the leading and trailing characters
removed. The {@var chars} argument is a string specifying the set of
characters to be removed. If omitted or {@link None}, the {@var chars}
argument defaults to removing whitespace. The {@var chars} argument is
not a prefix or suffix; rather, all combinations of its values are
stripped:

<pre>
    &gt;&gt;&gt; '   spacious   '.strip()
    'spacious'
    &gt;&gt;&gt; 'www.example.com'.strip('cmowz.')
    'example'
</pre>

<blockquote>
@since Changed in version 2.2.2: Support for the
chars argument. <br />
</blockquote>

@@method swapcase()

<p>Return a copy of the string with uppercase characters converted to
lowercase and vice versa.

<p>For 8-bit strings, this method is locale-dependent.

@@method title()

<p>Return a titlecased version of the string: words start with uppercase
characters, all remaining cased characters are lowercase.

<p>For 8-bit strings, this method is locale-dependent.

@@method translate(table[, deletechars])

<p>Return a copy of the string where all characters occurring in the
optional argument {@var deletechars} are removed, and the remaining
characters have been mapped through the given translation table, which
must be a string of length 256.

<p>For Unicode objects, the {@link translate} method does not accept the
optional {@var deletechars} argument. Instead, it returns a copy of the
{@var s} where all characters have been mapped through the given
translation table which must be a mapping of Unicode ordinals to Unicode
ordinals, Unicode strings or {@link None}. Unmapped characters are left
untouched. Characters mapped to {@link None} are deleted. Note, a more
flexible approach is to create a custom character mapping codec using
the {@link codecs} module (see {@link encodings.cp1251} for an example).

@@method upper()

<p>Return a copy of the string converted to uppercase.

<p>For 8-bit strings, this method is locale-dependent.

@@method zfill(width)

<p>Return the numeric string left filled with zeros in a string of
length {@var width}. The original string is returned if {@var width} is
less than {@code len(}{@var s}).
<blockquote>
@since New in version 2.2.2. <br />
</blockquote>

@@text 

<h3>String Formatting Operations</h3>

<p>String and Unicode objects have one unique built-in operation: the
{@code %} operator (modulo). This is also known as the string {@em
formatting} or {@em interpolation} operator. Given {@var format} % {@var
values} (where {@var format} is a string or Unicode object), {@code %}
conversion specifications in {@var format} are replaced with zero or
more elements of {@var values}. The effect is similar to the using
{@link c:sprintf} in the C language. If {@var format} is a Unicode
object, or if any of the objects being converted using the {@code %s}
conversion are Unicode objects, the result will also be a Unicode
object.

<p>If {@var format} requires a single argument, {@var values} may be a
single non-tuple object.{@link footnote:2430} Otherwise, {@var values}
must be a tuple with exactly the number of items specified by the format
string, or a single mapping object (for example, a dictionary).

<p>A conversion specifier contains two or more characters and has the
following components, which must occur in this order:
<ol>
<li>
<p>The "{@code %}" character, which marks the start of the specifier.
<li>
<p>Mapping key (optional), consisting of a parenthesised sequence of
characters (for example, {@code (somename)}).
<li>
<p>Conversion flags (optional), which affect the result of some
conversion types.
<li>
<p>Minimum field width (optional). If specified as an "{@code *}"
(asterisk), the actual width is read from the next element of the tuple
in {@var values}, and the object to convert comes after the minimum
field width and optional precision.
<li>
<p>Precision (optional), given as a "{@code .}" (dot) followed by the
precision. If specified as "{@code *}" (an asterisk), the actual width
is read from the next element of the tuple in {@var values}, and the
value to convert comes after the precision.
<li>
<p>Length modifier (optional).
<li>
<p>Conversion type.
</ol>

<p>When the right argument is a dictionary (or other mapping type), then
the formats in the string {@em must} include a parenthesised mapping key
into that dictionary inserted immediately after the "{@code %}"
character. The mapping key selects the value to be formatted from the
mapping. For example:

<pre>
&gt;&gt;&gt; print '%(language)s has %(#)03d quote types.' % \
          {'language': "Python", "#": 2}
Python has 002 quote types.
</pre>


<p>In this case no {@code *} specifiers may occur in a format (since
they require a sequential parameter list).

<p>The conversion flag characters are:

<p><table border=1>
<tr> <th>
<p>Flag
<th>
<p>Meaning
<tr> <td>
<p>{@code #}
<td>
<p>The value conversion will use the &#8220;alternate form&#8221; (where
defined below).
<tr> <td>
<p>{@code 0}
<td>
<p>The conversion will be zero padded for numeric values.
<tr> <td>
<p>{@code -}
<td>
<p>The converted value is left adjusted (overrides the "{@code 0}"
conversion if both are given).
<tr> <td>
<p>{@code }
<td>
<p>(a space) A blank should be left before a positive number (or empty
string) produced by a signed conversion.
<tr> <td>
<p>{@code +}
<td>
<p>A sign character ("{@code +}" or "{@code -}") will precede the
conversion (overrides a "space" flag).
</table></p>

<p>The length modifier may be {@code h}, {@code l}, and {@code L} may be
present, but are ignored as they are not necessary for Python.

<p>The conversion types are:

<p><table border=1>
<tr> <th>
<p>Conversion
<th>
<p>Meaning
<th>
<p>Notes
<tr> <td>
<p>{@code d}
<td>
<p>Signed integer decimal.
<td> <tr> <td>
<p>{@code i}
<td>
<p>Signed integer decimal.
<td> <tr> <td>
<p>{@code o}
<td>
<p>Unsigned octal.
<td>
<p>(1)
<tr> <td>
<p>{@code u}
<td>
<p>Unsigned decimal.
<td> <tr> <td>
<p>{@code x}
<td>
<p>Unsigned hexadecimal (lowercase).
<td>
<p>(2)
<tr> <td>
<p>{@code X}
<td>
<p>Unsigned hexadecimal (uppercase).
<td>
<p>(2)
<tr> <td>
<p>{@code e}
<td>
<p>Floating point exponential format (lowercase).
<td> <tr> <td>
<p>{@code E}
<td>
<p>Floating point exponential format (uppercase).
<td> <tr> <td>
<p>{@code f}
<td>
<p>Floating point decimal format.
<td> <tr> <td>
<p>{@code F}
<td>
<p>Floating point decimal format.
<td> <tr> <td>
<p>{@code g}
<td>
<p>Same as "{@code e}" if exponent is greater than -4 or less than
precision, "{@code f}" otherwise.
<td> <tr> <td>
<p>{@code G}
<td>
<p>Same as "{@code E}" if exponent is greater than -4 or less than
precision, "{@code F}" otherwise.
<td> <tr> <td>
<p>{@code c}
<td>
<p>Single character (accepts integer or single character string).
<td> <tr> <td>
<p>{@code r}
<td>
<p>String (converts any python object using {@link repr}).
<td>
<p>(3)
<tr> <td>
<p>{@code s}
<td>
<p>String (converts any python object using {@link str}).
<td>
<p>(4)
<tr> <td>
<p>{@code %}
<td>
<p>No argument is converted, results in a "{@code %}" character in the
result.
<td> </table></p>

<p>Notes:

@@variable (1)
@@unknown The alternate form causes a leading zero ("0") to be inserted between left-hand padding and the formatting of the number if the leading character of the result is not already a zero.
@@variable (2)
@@unknown The alternate form causes a leading '0x' or '0X' (depending on whether the "x" or "X" format was used) to be inserted between left-hand padding and the formatting of the number if the leading character of the result is not already a zero.
@@variable (3)
@@unknown The %r conversion was added in Python 2.0.
@@variable (4)

<p>If the object or format provided is a {@link unicode} string, the
resulting string will also be {@link unicode}.

@@text 

<p>Since Python strings have an explicit length, {@code %s} conversions
do not assume that {@code '\0'} is the end of the string.

<p>For safety reasons, floating point precisions are clipped to 50;
{@code %f} conversions for numbers whose absolute value is over 1e25 are
replaced by {@code %g} conversions.{@link footnote:2537} All other
errors raise exceptions.

<p>Additional string operations are defined in standard modules {@link
string} and {@link re}.

<h4>Footnotes</h4>

@@variable ... object.2.8
@@unknown To format only a tuple you should therefore provide a singleton tuple whose only element is the tuple to be formatted.
@@variable ... conversions.2.9

<p>These numbers are fairly arbitrary. They are intended to avoid
printing endless strings of meaningless digits without hampering correct
use and without having to know the exact precision of floating point
values on a particular machine.

@@text 

<h3>XRange Type</h3>

<p>The {@link xrange} type is an immutable sequence which is commonly
used for looping. The advantage of the {@link xrange} type is that an
{@link xrange} object will always take the same amount of memory, no
matter the size of the range it represents. There are no consistent
performance advantages.

<p>XRange objects have very little behavior: they only support indexing,
iteration, and the {@link len} function.

<h3>Mutable Sequence Types</h3>

<p>List objects support additional operations that allow in-place
modification of the object. Other mutable sequence types (when added to
the language) should also support these operations. Strings and tuples
are immutable sequence types: such objects cannot be modified once
created. The following operations are defined on mutable sequence types
(where {@var x} is an arbitrary object):

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Result
<th>
<p>Notes
<tr> <td>
<p>{@var s}[{@var i}] = {@var x}
<td>
<p>item {@var i} of {@var s} is replaced by {@var x}
<td> <tr> <td>
<p>{@var s}[{@var i}:{@var j}] = {@var t}
<td>
<p>slice of {@var s} from {@var i} to {@var j} is replaced by {@var t}
<td> <tr> <td>
<p>{@code del }{@var s}[{@var i}:{@var j}]
<td>
<p>same as {@var s}[{@var i}:{@var j}] = []
<td> <tr> <td>
<p>{@var s}[{@var i}:{@var j}:{@var k}] = {@var t}
<td>
<p>the elements of {@var s}[{@var i}:{@var j}:{@var k}] are replaced by
those of {@var t}
<td>
<p>(1)
<tr> <td>
<p>{@code del }{@var s}[{@var i}:{@var j}:{@var k}]
<td>
<p>removes the elements of {@var s}[{@var i}:{@var j}:{@var k}] from the
list
<td> <tr> <td>
<p>{@var s}.append({@var x})
<td>
<p>same as {@var s}[len({@var s}):len({@var s})] = [{@var x}]
<td>
<p>(2)
<tr> <td>
<p>{@var s}.extend({@var x})
<td>
<p>same as {@var s}[len({@var s}):len({@var s})] = {@var x}
<td>
<p>(3)
<tr> <td>
<p>{@var s}.count({@var x})
<td>
<p>return number of {@var i}'s for which {@code }{@var s}[{@var i}] ==
{@var x}
<td> <tr> <td>
<p>{@var s}.index({@var x}[, {@var i}[, {@var j}]])
<td>
<p>return smallest {@var k} such that {@var s}[{@var k}] == {@var x} and
{@var i} &lt= {@var k} &lt {@var j}
<td>
<p>(4)
<tr> <td>
<p>{@var s}.insert({@var i}, {@var x})
<td>
<p>same as {@var s}[{@var i}:{@var i}] = [{@var x}]
<td>
<p>(5)
<tr> <td>
<p>{@var s}.pop([{@var i}])
<td>
<p>same as {@var x} = {@var s}[{@var i}]; del {@var s}[{@var i}]; return
{@var x}
<td>
<p>(6)
<tr> <td>
<p>{@var s}.remove({@var x})
<td>
<p>same as {@code del }{@var s}[{@var s}.index({@var x})]
<td>
<p>(4)
<tr> <td>
<p>{@var s}.reverse()
<td>
<p>reverses the items of {@var s} in place
<td>
<p>(7)
<tr> <td>
<p>{@var s}.sort([{@var cmp}[, {@var key}[, {@var reverse}]]])
<td>
<p>sort the items of {@var s} in place
<td>
<p>(7), (8), (9), (10)
</table></p>

@@variable (1)
@@unknown t must have the same length as the slice it is replacing.
@@variable (2)
@@unknown The C implementation of Python has historically accepted multiple parameters and implicitly joined them into a tuple; this no longer works in Python 2.0. Use of this misfeature has been deprecated since Python 1.4.
@@variable (3)
@@unknown x can be any iterable object.
@@variable (4)
@@method Raises ValueError when x is not found in s. When a negative index is passed as the second or third parameter to the index() method, the list length is added, as for slice indices. If it is still negative, it is truncated to zero, as for slice indices. Changed in version 2.3: Previously, index() didn't have arguments for specifying start and stop positions.
@@variable (5)
@@method When a negative index is passed as the first parameter to the insert() method, the list length is added, as for slice indices. If it is still negative, it is truncated to zero, as for slice indices. Changed in version 2.3: Previously, all negative indices were truncated to zero.
@@variable (6)
@@method The pop() method is only supported by the list and array types. The optional argument i defaults to -1, so that by default the last item is removed and returned.
@@variable (7)
@@method The sort() and reverse() methods modify the list in place for economy of space when sorting or reversing a large list. To remind you that they operate by side effect, they don't return the sorted or reversed list.
@@variable (8)
@@function The sort() method takes optional arguments for controlling the comparisons. cmp specifies a custom comparison function of two arguments (list items) which should return a negative, zero or positive number depending on whether the first argument is considered smaller than, equal to, or larger than the second argument: "cmp=lambda x,y: cmp(x.lower(), y.lower())" key specifies a function of one argument that is used to extract a comparison key from each list element: "key=str.lower" reverse is a boolean value. If set to True, then the list elements are sorted as if each comparison were reversed. In general, the key and reverse conversion processes are much faster than specifying an equivalent cmp function. This is because cmp is called multiple times for each list element while key and reverse touch each element only once. Changed in version 2.3: Support for None as an equivalent to omitting cmp was added. Changed in version 2.4: Support for key and reverse was added.
@@variable (9)
@@method Starting with Python 2.3, the sort() method is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal -- this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).
@@variable (10)

<p>While a list is being sorted, the effect of attempting to mutate, or
even inspect, the list is undefined. The C implementation of Python 2.3
and newer makes the list appear empty for the duration, and raises
{@link exceptions.ValueError} if it can detect that the list has been
mutated during a sort.

@@text 

<h2>Set Types&#8212;set, frozenset</h2>

<p>A set object is an unordered collection of immutable values. Common
uses include membership testing, removing duplicates from a sequence,
and computing mathematical operations such as intersection, union,
difference, and symmetric difference. New in version 2.4.

<p>Like other collections, sets support {@var x} in {@var set}, {@code
len(}{@var set}), and {@code for }{@var x} in {@var set}. Being an
unordered collection, sets do not record element position or order of
insertion. Accordingly, sets do not support indexing, slicing, or other
sequence-like behavior.

<p>There are currently two builtin set types, {@link set} and {@link
frozenset}. The {@link set} type is mutable -- the contents can be
changed using methods like {@link add} and {@link remove}. Since it is
mutable, it has no hash value and cannot be used as either a dictionary
key or as an element of another set. The {@link frozenset} type is
immutable and hashable -- its contents cannot be altered after is
created; however, it can be used as a dictionary key or as an element of
another set.

<p>Instances of {@link set} and {@link frozenset} provide the following
operations:

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Equivalent
<th>
<p>Result
<tr> <td>
<p>{@code len(}{@var s})
<td> <td>
<p>cardinality of set {@var s}
<tr> <td>
<p>{@var x} in {@var s}
<td> <td>
<p>test {@var x} for membership in {@var s}
<tr> <td>
<p>{@var x} not in {@var s}
<td> <td>
<p>test {@var x} for non-membership in {@var s}
<tr> <td>
<p>{@var s}.issubset({@var t})
<td>
<p>{@var s} &lt= {@var t}
<td>
<p>test whether every element in {@var s} is in {@var t}
<tr> <td>
<p>{@var s}.issuperset({@var t})
<td>
<p>{@var s} >= {@var t}
<td>
<p>test whether every element in {@var t} is in {@var s}
<tr> <td>
<p>{@var s}.union({@var t})
<td>
<p>{@var s} | {@var t}
<td>
<p>new set with elements from both {@var s} and {@var t}
<tr> <td>
<p>{@var s}.intersection({@var t})
<td>
<p>{@var s} &amp; {@var t}
<td>
<p>new set with elements common to {@var s} and {@var t}
<tr> <td>
<p>{@var s}.difference({@var t})
<td>
<p>{@var s} - {@var t}
<td>
<p>new set with elements in {@var s} but not in {@var t}
<tr> <td>
<p>{@var s}.symmetric_difference({@var t})
<td>
<p>{@var s} ^ {@var t}
<td>
<p>new set with elements in either {@var s} or {@var t} but not both
<tr> <td>
<p>{@var s}.copy()
<td> <td>
<p>new set with a shallow copy of {@var s}
</table></p>

<p>Note, the non-operator versions of {@link union}, {@link
intersection}, {@link difference}, and {@link symmetric_difference},
{@link issubset}, and {@link issuperset} methods will accept any
iterable as an argument. In contrast, their operator based counterparts
require their arguments to be sets. This precludes error-prone
constructions like {@code set('abc') &amp; 'cbs'} in favor of the more
readable {@code set('abc').intersection('cbs')}.

<p>Both {@link set} and {@link frozenset} support set to set
comparisons. Two sets are equal if and only if every element of each set
is contained in the other (each is a subset of the other). A set is less
than another set if and only if the first set is a proper subset of the
second set (is a subset, but is not equal). A set is greater than
another set if and only if the first set is a proper superset of the
second set (is a superset, but is not equal).

<p>Instances of {@link set} are compared to instances of {@link
frozenset} based on their members. For example, "{@code set('abc') ==
frozenset('abc')}" returns {@link True}.

<p>The subset and equality comparisons do not generalize to a complete
ordering function. For example, any two disjoint sets are not equal and
are not subsets of each other, so {@em all} of the following return
{@link False}: {@var a}&lt{@var b}, {@var a}=={@var b}, or {@var
a}>{@var b}. Accordingly, sets do not implement the {@link __cmp__}
method.

<p>Since sets only define partial ordering (subset relationships), the
output of the {@link list.sort} method is undefined for lists of sets.

<p>Set elements are like dictionary keys; they need to define both
{@link __hash__} and {@link __eq__} methods.

<p>Binary operations that mix {@link set} instances with {@link
frozenset} return the type of the first operand. For example: "{@code
frozenset('ab') | set('bc')}" returns an instance of {@link frozenset}.

<p>The following table lists operations available for {@link set} that
do not apply to immutable instances of {@link frozenset}:

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Equivalent
<th>
<p>Result
<tr> <td>
<p>{@var s}.update({@var t})
<td>
<p>{@var s} |= {@var t}
<td>
<p>return set {@var s} with elements added from {@var t}
<tr> <td>
<p>{@var s}.intersection_update({@var t})
<td>
<p>{@var s} &amp;= {@var t}
<td>
<p>return set {@var s} keeping only elements also found in {@var t}
<tr> <td>
<p>{@var s}.difference_update({@var t})
<td>
<p>{@var s} -= {@var t}
<td>
<p>return set {@var s} after removing elements found in {@var t}
<tr> <td>
<p>{@var s}.symmetric_difference_update({@var t})
<td>
<p>{@var s} ^= {@var t}
<td>
<p>return set {@var s} with elements from {@var s} or {@var t} but not
both
<tr> <td>
<p>{@var s}.add({@var x})
<td> <td>
<p>add element {@var x} to set {@var s}
<tr> <td>
<p>{@var s}.remove({@var x})
<td> <td>
<p>remove {@var x} from set {@var s}; raises KeyError if not present
<tr> <td>
<p>{@var s}.discard({@var x})
<td> <td>
<p>removes {@var x} from set {@var s} if present
<tr> <td>
<p>{@var s}.pop()
<td> <td>
<p>remove and return an arbitrary element from {@var s}; raises {@link
exceptions.KeyError} if empty
<tr> <td>
<p>{@var s}.clear()
<td> <td>
<p>remove all elements from set {@var s}
</table></p>

<p>Note, the non-operator versions of the {@link update}, {@link
intersection_update}, {@link difference_update}, and {@link
symmetric_difference_update} methods will accept any iterable as an
argument.

<p>The design of the set types was based on lessons learned from the
{@link sets} module.

@see 
{@link comparison-to-builtin-set Module sets}

Differences between the sets module and the built-in set types.

<h2>Mapping Types&#8212;classdict</h2>

<p>A mapping object maps immutable values to arbitrary objects. Mappings
are mutable objects. There is currently only one standard mapping type,
the dictionary. A dictionary's keys are almost arbitrary values. Only
values containing lists, dictionaries or other mutable types (that are
compared by value rather than by object identity) may not be used as
keys. Numeric types used for keys obey the normal rules for numeric
comparison: if two numbers compare equal (such as {@code 1} and {@code
1.0}) then they can be used interchangeably to index the same dictionary
entry.

<p>Dictionaries are created by placing a comma-separated list of {@var
key}: {@var value} pairs within braces, for example: {@code {'jack':
4098, 'sjoerd': 4127}} or {@code {4098: 'jack', 4127: 'sjoerd'}}.

<p>The following operations are defined on mappings (where {@var a} and
{@var b} are mappings, {@var k} is a key, and {@var v} and {@var x} are
arbitrary objects):

<p><table border=1>
<tr> <th>
<p>Operation
<th>
<p>Result
<th>
<p>Notes
<tr> <td>
<p>{@code len(}{@var a})
<td>
<p>the number of items in {@var a}
<td> <tr> <td>
<p>{@var a}[{@var k}]
<td>
<p>the item of {@var a} with key {@var k}
<td>
<p>(1)
<tr> <td>
<p>{@var a}[{@var k}] = {@var v}
<td>
<p>set {@var a}[{@var k}] to {@var v}
<td> <tr> <td>
<p>{@code del }{@var a}[{@var k}]
<td>
<p>remove {@var a}[{@var k}] from {@var a}
<td>
<p>(1)
<tr> <td>
<p>{@var a}.clear()
<td>
<p>remove all items from {@code a}
<td> <tr> <td>
<p>{@var a}.copy()
<td>
<p>a (shallow) copy of {@code a}
<td> <tr> <td>
<p>{@var a}.has_key({@var k})
<td>
<p>{@link True} if {@var a} has a key {@var k}, else {@link False}
<td> <tr> <td>
<p>{@var k} in {@var a}
<td>
<p>Equivalent to {@var a}.has_key({@var k})
<td>
<p>(2)
<tr> <td>
<p>{@var k} not in {@var a}
<td>
<p>Equivalent to {@code not} {@var a}.has_key({@var k})
<td>
<p>(2)
<tr> <td>
<p>{@var a}.items()
<td>
<p>a copy of {@var a}'s list of ({@var key}, {@var value}) pairs
<td>
<p>(3)
<tr> <td>
<p>{@var a}.keys()
<td>
<p>a copy of {@var a}'s list of keys
<td>
<p>(3)
<tr> <td>
<p>{@var a}.update([{@var b}])
<td>
<p>updates (and overwrites) key/value pairs from {@var b}
<td>
<p>(9)
<tr> <td>
<p>{@var a}.fromkeys({@var seq}[, {@var value}])
<td>
<p>Creates a new dictionary with keys from {@var seq} and values set to
{@var value}
<td>
<p>(7)
<tr> <td>
<p>{@var a}.values()
<td>
<p>a copy of {@var a}'s list of values
<td>
<p>(3)
<tr> <td>
<p>{@var a}.get({@var k}[, {@var x}])
<td>
<p>{@var a}[{@var k}] if {@code }{@var k} in {@var a}, else {@var x}
<td>
<p>(4)
<tr> <td>
<p>{@var a}.setdefault({@var k}[, {@var x}])
<td>
<p>{@var a}[{@var k}] if {@code }{@var k} in {@var a}, else {@var x}
(also setting it)
<td>
<p>(5)
<tr> <td>
<p>{@var a}.pop({@var k}[, {@var x}])
<td>
<p>{@var a}[{@var k}] if {@code }{@var k} in {@var a}, else {@var x}
(and remove k)
<td>
<p>(8)
<tr> <td>
<p>{@var a}.popitem()
<td>
<p>remove and return an arbitrary ({@var key}, {@var value}) pair
<td>
<p>(6)
<tr> <td>
<p>{@var a}.iteritems()
<td>
<p>return an iterator over ({@var key}, {@var value}) pairs
<td>
<p>(2), (3)
<tr> <td>
<p>{@var a}.iterkeys()
<td>
<p>return an iterator over the mapping's keys
<td>
<p>(2), (3)
<tr> <td>
<p>{@var a}.itervalues()
<td>
<p>return an iterator over the mapping's values
<td>
<p>(2), (3)
</table></p>

<p>Notes:

@@variable (1)
@@exception Raises a KeyError exception if k is not in the map.
@@variable (2)
@@unknown New in version 2.2.
@@variable (3)
@@function Keys and values are listed in an arbitrary order which is non-random, varies across Python implementations, and depends on the dictionary's history of insertions and deletions. If items(), keys(), values(), iteritems(), iterkeys(), and itervalues() are called with no intervening modifications to the dictionary, the lists will directly correspond. This allows the creation of (value, key) pairs using zip(): "pairs = zip(a.values(), a.keys())". The same relationship holds for the iterkeys() and itervalues() methods: "pairs = zip(a.itervalues(), a.iterkeys())" provides the same value for pairs. Another way to create the same list is "pairs = [(v, k) for (k, v) in a.iteritems()]".
@@variable (4)
@@unknown Never raises an exception if k is not in the map, instead it returns x. x is optional; when x is not provided and k is not in the map, None is returned.
@@variable (5)
@@function setdefault() is like get(), except that if k is missing, x is both returned and inserted into the dictionary as the value of k. x defaults to None.
@@variable (6)
@@function popitem() is useful to destructively iterate over a dictionary, as often used in set algorithms. If the dictionary is empty, calling popitem() raises a KeyError.
@@variable (7)
@@function fromkeys() is a class method that returns a new dictionary. value defaults to None. New in version 2.3.
@@variable (8)
@@function pop() raises a KeyError when no default value is given and the key is not found. New in version 2.3.
@@variable (9)

<p>{@link update} accepts either another mapping object or an iterable
of key/value pairs (as a tuple or other iterable of length two). If
keyword arguments are specified, the mapping is then is updated with
those key/value pairs: "{@code d.update(red=1, blue=2)}".
<blockquote>
@since Changed in version 2.4: Allowed the argument to
be an iterable of key/value pairs and allowed keyword
arguments. <br />
</blockquote>

@@text 

<h2>File Objects</h2>

<p>File objects are implemented using C's {@code stdio} package and can
be created with the built-in constructor {@link file} described in
section {@link built-in-funcs.html#built-in-funcs}, &#8220;Built-in
Functions.&#8221;{@link footnote:3710} File objects are also returned by
some other built-in functions and methods, such as {@link os.popen} and
{@link os.fdopen} and the {@link makefile} method of socket objects.

<p>When a file operation fails for an I/O-related reason, the exception
{@link exceptions.IOError} is raised. This includes situations where the
operation is not defined for some reason, like {@link seek} on a tty
device or writing a file opened for reading.

<p>Files have the following methods:

@@method File.close()

<p>Close the file. A closed file cannot be read or written any more. Any
operation which requires that the file be open will raise a {@link
exceptions.ValueError} after the file has been closed. Calling {@link
close} more than once is allowed.

@@method File.flush()

<p>Flush the internal buffer, like {@code stdio}'s {@link c:fflush}.
This may be a no-op on some file-like objects.

@@method File.fileno()

<p>Return the integer &#8220;file descriptor&#8221; that is used by the
underlying implementation to request I/O operations from the operating
system. This can be useful for other, lower level interfaces that use
file descriptors, such as the {@link fcntl} module or {@link os.read}
and friends. Note: File-like objects which do not have a real file
descriptor should {@em not} provide this method!

@@method File.isatty()

<p>Return {@link True} if the file is connected to a tty(-like) device,
else {@link False}. Note: If a file-like object is not associated with a
real file, this method should {@em not} be implemented.

@@method File.next()

<p>A file object is its own iterator, for example {@code iter(}{@var f})
returns {@var f} (unless {@var f} is closed). When a file is used as an
iterator, typically in a {@link for} loop (for example, {@code for line
in f: print line}), the {@link next} method is called repeatedly. This
method returns the next input line, or raises {@link
exceptions.StopIteration} when EOF is hit. In order to make a {@link
for} loop the most efficient way of looping over the lines of a file (a
very common operation), the {@link next} method uses a hidden read-ahead
buffer. As a consequence of using a read-ahead buffer, combining {@link
next} with other file methods (like {@link readline}) does not work
right. However, using {@link seek} to reposition the file to an absolute
position will flush the read-ahead buffer.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@method File.read([size])

<p>Read at most {@var size} bytes from the file (less if the read hits
EOF before obtaining {@var size} bytes). If the {@var size} argument is
negative or omitted, read all data until EOF is reached. The bytes are
returned as a string object. An empty string is returned when EOF is
encountered immediately. (For certain files, like ttys, it makes sense
to continue reading after an EOF is hit.) Note that this method may call
the underlying C function {@link c:fread} more than once in an effort to
acquire as close to {@var size} bytes as possible. Also note that when
in non-blocking mode, less data than what was requested may be returned,
even if no {@var size} parameter was given.

@@method File.readline([size])

<p>Read one entire line from the file. A trailing newline character is
kept in the string (but may be absent when a file ends with an
incomplete line).{@link footnote:3716} If the {@var size} argument is
present and non-negative, it is a maximum byte count (including the
trailing newline) and an incomplete line may be returned. An empty
string is returned {@em only} when EOF is encountered immediately. Note:
Unlike {@code stdio}'s {@link c:fgets}, the returned string contains
null characters ({@code '\0'}) if they occurred in the input.

@@method File.readlines([sizehint])

<p>Read until EOF using {@link readline} and return a list containing
the lines thus read. If the optional {@var sizehint} argument is
present, instead of reading up to EOF, whole lines totalling
approximately {@var sizehint} bytes (possibly after rounding up to an
internal buffer size) are read. Objects implementing a file-like
interface may choose to ignore {@var sizehint} if it cannot be
implemented, or cannot be implemented efficiently.

@@method File.xreadlines()

<p>This method returns the same thing as {@code iter(f)}.


<p>Deprecated since release 2.3. Use "{@code for }{@var line} in {@var
file}" instead.
<blockquote>
@since New in version 2.1. <br />
</blockquote>

@@method File.seek(offset[, whence])

<p>Set the file's current position, like {@code stdio}'s {@link
c:fseek}. The {@var whence} argument is optional and defaults to {@code
0} (absolute file positioning); other values are {@code 1} (seek
relative to the current position) and {@code 2} (seek relative to the
file's end). There is no return value. Note that if the file is opened
for appending (mode {@code 'a'} or {@code 'a+'}), any {@link seek}
operations will be undone at the next write. If the file is only opened
for writing in append mode (mode {@code 'a'}), this method is
essentially a no-op, but it remains useful for files opened in append
mode with reading enabled (mode {@code 'a+'}). If the file is opened in
text mode (mode {@code 't'}), only offsets returned by {@link tell} are
legal. Use of other offsets causes undefined behavior.

<p>Note that not all file objects are seekable.

@@method File.tell()

<p>Return the file's current position, like {@code stdio}'s {@link
c:ftell}.

@@method File.truncate([size])

<p>Truncate the file's size. If the optional {@var size} argument is
present, the file is truncated to (at most) that size. The size defaults
to the current position. The current file position is not changed. Note
that if a specified size exceeds the file's current size, the result is
platform-dependent: possibilities include that file may remain
unchanged, increase to the specified size as if zero-filled, or increase
to the specified size with undefined new content. Availability: Windows,
many Unix variants.

@@method File.write(str)

<p>Write a string to the file. There is no return value. Due to
buffering, the string may not actually show up in the file until the
{@link flush} or {@link close} method is called.

@@method File.writelines(sequence)

<p>Write a sequence of strings to the file. The sequence can be any
iterable object producing strings, typically a list of strings. There is
no return value. (The name is intended to match {@link readlines};
{@link writelines} does not add line separators.)

@@text 

<p>Files support the iterator protocol. Each iteration returns the same
result as {@var file}.readline(), and iteration ends when the {@link
readline} method returns an empty string.

<p>File objects also offer a number of other interesting attributes.
These are not required for file-like objects, but should be implemented
if they make sense for the particular object.

@@attribute File.closed

<p>bool indicating the current state of the file object. This is a
read-only attribute; the {@link close} method changes the value. It may
not be available on all file-like objects.

@@attribute File.encoding

<p>The encoding that this file uses. When Unicode strings are written to
a file, they will be converted to byte strings using this encoding. In
addition, when the file is connected to a terminal, the attribute gives
the encoding that the terminal is likely to use (that information might
be incorrect if the user has misconfigured the terminal). The attribute
is read-only and may not be present on all file-like objects. It may
also be {@code None}, in which case the file uses the system default
encoding for converting Unicode strings.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@attribute File.mode

<p>The I/O mode for the file. If the file was created using the {@link
open} built-in function, this will be the value of the {@var mode}
parameter. This is a read-only attribute and may not be present on all
file-like objects.

@@attribute File.name

<p>If the file object was created using {@link open}, the name of the
file. Otherwise, some string that indicates the source of the file
object, of the form "{@code &lt...>}". This is a read-only attribute and
may not be present on all file-like objects.

@@attribute File.newlines

<p>If Python was built with the --with-universal-newlines option to
configure (the default) this read-only attribute exists, and for files
opened in universal newline read mode it keeps track of the types of
newlines encountered while reading the file. The values it can take are
{@code '\r'}, {@code '\n'}, {@code '\r\n'}, {@link None} (unknown, no
newlines read yet) or a tuple containing all the newline types seen, to
indicate that multiple newline conventions were encountered. For files
not opened in universal newline read mode the value of this attribute
will be {@link None}.

@@attribute File.softspace

<p>Boolean that indicates whether a space character needs to be printed
before another value when using the {@link print} statement. Classes
that are trying to simulate a file object should also have a writable
{@link softspace} attribute, which should be initialized to zero. This
will be automatic for most classes implemented in Python (care may be
needed for objects that override attribute access); types implemented in
C will have to provide a writable {@link softspace} attribute. Note:
This attribute is not used to control the {@link print} statement, but
to allow the implementation of {@link print} to keep track of its
internal state.

@@text 

<h4>Footnotes</h4>

@@variable ... Functions.''2.10
@@function file() is new in Python 2.2. The older built-in open() is an alias for file().
@@variable ... line).2.11

<p>The advantage of leaving the newline on is that returning an empty
string is then an unambiguous EOF indication. It is also possible (in
cases where it might matter, for example, if you want to make an exact
copy of a file while scanning its lines) to tell whether the last line
of a file ended in a newline or not (yes this happens!).

@@text 

<h2>Other Built-in Types</h2>

<p>The interpreter supports several other kinds of objects. Most of
these support only one or two operations.
@@error unexpected div online-navigation

<h3>Modules</h3>

<p>The only special operation on a module is attribute access: {@var
m}.{@var name}, where {@var m} is a module and {@var name} accesses a
name defined in {@var m}'s symbol table. Module attributes can be
assigned to. (Note that the {@link import} statement is not, strictly
speaking, an operation on a module object; {@code import }{@var foo}
does not require a module object named {@var foo} to exist, rather it
requires an (external) {@em definition} for a module named {@var foo}
somewhere.)

<p>A special member of every module is {@link __dict__}. This is the
dictionary containing the module's symbol table. Modifying this
dictionary will actually change the module's symbol table, but direct
assignment to the {@link __dict__} attribute is not possible (you can
write {@var m}.__dict__['a'] = 1, which defines {@var m}.a to be {@code
1}, but you can't write {@var m}.__dict__ = {}). Modifying {@link
__dict__} directly is not recommended.

<p>Modules built into the interpreter are written like this: {@code
&ltmodule 'sys' (built-in)>}. If loaded from a file, they are written as
{@code &ltmodule 'os' from '/usr/local/lib/python2.4/os.pyc'>}.

<h3>Classes and Class Instances</h3>

<p>See chapters 3 and 7 of the {@link ../ref/ref.html Python Reference
Manual} for these.

<h3>Functions</h3>

<p>Function objects are created by function definitions. The only
operation on a function object is to call it: {@var func}({@var
argument-list}).

<p>There are really two flavors of function objects: built-in functions
and user-defined functions. Both support the same operation (to call the
function), but the implementation is different, hence the different
object types.

<p>See the {@link ../ref/ref.html Python Reference Manual} for more
information.

<h3>Methods</h3>

<p>Methods are functions that are called using the attribute notation.
There are two flavors: built-in methods (such as {@link append} on
lists) and class instance methods. Built-in methods are described with
the types that support them.

<p>The implementation adds two special read-only attributes to class
instance methods: {@var m}.im_self is the object on which the method
operates, and {@var m}.im_func is the function implementing the method.
Calling {@var m}({@var arg-1}, {@var arg-2}, ..., {@var arg-n}) is
completely equivalent to calling {@code }{@var m}.im_func({@var
m}.im_self, {@var arg-1}, {@var arg-2}, ..., {@var arg-n}).

<p>Class instance methods are either {@em bound} or {@em unbound},
referring to whether the method was accessed through an instance or a
class, respectively. When a method is unbound, its {@code im_self}
attribute will be {@link None} and if called, an explicit {@code self}
object must be passed as the first argument. In this case, {@code self}
must be an instance of the unbound method's class (or a subclass of that
class), otherwise a {@code TypeError} is raised.

<p>Like function objects, methods objects support getting arbitrary
attributes. However, since method attributes are actually stored on the
underlying function object ({@code meth.im_func}), setting method
attributes on either bound or unbound methods is disallowed. Attempting
to set a method attribute results in a {@code TypeError} being raised.
In order to set a method attribute, you need to explicitly set it on the
underlying function object:

<pre>
class C:
    def method(self):
        pass

c = C()
c.method.im_func.whoami = 'my name is c'
</pre>


<p>See the {@link ../ref/ref.html Python Reference Manual} for more
information.

<h3>Code Objects</h3>

<p>Code objects are used by the implementation to represent
&#8220;pseudo-compiled&#8221; executable Python code such as a function
body. They differ from function objects because they don't contain a
reference to their global execution environment. Code objects are
returned by the built-in {@link compile} function and can be extracted
from function objects through their {@link func_code} attribute.

<p>A code object can be executed or evaluated by passing it (instead of
a source string) to the {@link exec} statement or the built-in {@link
eval} function.

<p>See the {@link ../ref/ref.html Python Reference Manual} for more
information.

<h3>Type Objects</h3>

<p>Type objects represent the various object types. An object's type is
accessed by the built-in function {@link type}. There are no special
operations on types. The standard module {@link types} defines names for
all standard built-in types.

<p>Types are written like this: {@code &lttype 'int'>}.

<h3>The Null Object</h3>

<p>This object is returned by functions that don't explicitly return a
value. It supports no special operations. There is exactly one null
object, named {@link None} (a built-in name).

<p>It is written as {@link None}.

<h3>The Ellipsis Object</h3>

<p>This object is used by extended slice notation (see the {@link
../ref/ref.html Python Reference Manual}). It supports no special
operations. There is exactly one ellipsis object, named {@code Ellipsis}
(a built-in name).

<p>It is written as {@code Ellipsis}.

<h3>Boolean Values</h3>

<p>Boolean values are the two constant objects {@link False} and {@link
True}. They are used to represent truth values (although other values
can also be considered false or true). In numeric contexts (for example
when used as the argument to an arithmetic operator), they behave like
the integers 0 and 1, respectively. The built-in function {@link bool}
can be used to cast any value to a Boolean, if the value can be
interpreted as a truth value (see section Truth Value Testing above).

<p>They are written as {@link False} and {@link True}, respectively.

<h3>Internal Objects</h3>

<p>See the {@link ../ref/ref.html Python Reference Manual} for this
information. It describes stack frame objects, traceback objects, and
slice objects.

<h2>Special Attributes</h2>

<p>The implementation adds a few special read-only attributes to several
object types, where they are relevant. Some of these are not reported by
the {@link dir} built-in function.

@@attribute Internal.__dict__

<p>A dictionary or other mapping object used to store an object's
(writable) attributes.

@@attribute Internal.__methods__


<p>Deprecated since release 2.2. Use the built-in function {@link dir}
to get a list of an object's attributes. This attribute is no longer
available.

@@attribute Internal.__members__


<p>Deprecated since release 2.2. Use the built-in function {@link dir}
to get a list of an object's attributes. This attribute is no longer
available.

@@attribute Internal.__class__

<p>The class to which a class instance belongs.

@@attribute Internal.__bases__

<p>The tuple of base classes of a class object. If there are no base
classes, this will be an empty tuple.

@@attribute Internal.__name__

<p>The name of the class or type.

@@text 

<h1>Built-in Exceptions</h1>

<p>Exceptions should be class objects. The exceptions are defined in the
module {@link exceptions}. This module never needs to be imported
explicitly: the exceptions are provided in the built-in namespace as
well as the {@link exceptions} module.


<p class='note'><b>Note:</b> In past versions of Python string
exceptions were supported. In Python 1.5 and newer versions, all
standard exceptions have been converted to class objects and users are
encouraged to do the same. String exceptions will raise a {@code
PendingDeprecationWarning}. In future versions, support for string
exceptions will be removed. Two distinct string objects with the same
value are considered different exceptions. This is done to force
programmers to use exception names rather than their string value when
specifying exception handlers. The string value of all built-in
exceptions is their name, but this is not a requirement for user-defined
exceptions or exceptions defined by library modules.

<p>For class exceptions, in a {@link try} statement with an {@link
except} clause that mentions a particular class, that clause also
handles any exception classes derived from that class (but not exception
classes from which {@em it} is derived). Two exception classes that are
not related via subclassing are never equivalent, even if they have the
same name.

<p>The built-in exceptions listed below can be generated by the
interpreter or built-in functions. Except where mentioned, they have an
&#8220;associated value&#8221; indicating the detailed cause of the
error. This may be a string or a tuple containing several items of
information (e.g., an error code and a string explaining the code). The
associated value is the second argument to the {@link raise} statement.
For string exceptions, the associated value itself will be stored in the
variable named as the second argument of the {@link except} clause (if
any). For class exceptions, that variable receives the exception
instance. If the exception class is derived from the standard root class
{@link exceptions.Exception}, the associated value is present as the
exception instance's {@link args} attribute, and possibly on other
attributes as well.

<p>User code can raise built-in exceptions. This can be used to test an
exception handler or to report an error condition &#8220;just
like&#8221; the situation in which the interpreter raises the same
exception; but beware that there is nothing to prevent user code from
raising an inappropriate error.

<p>The built-in exception classes can be sub-classed to define new
exceptions; programmers are encouraged to at least derive new exceptions
from the {@link exceptions.Exception} base class. More information on
defining exceptions is available in the {@link ../tut/tut.html Python
Tutorial} under the heading &#8220;User-defined Exceptions.&#8221;

<p>The following exceptions are only used as base classes for other
exceptions.

@@exception Exception

<p>The root class for exceptions. All built-in exceptions are derived
from this class. All user-defined exceptions should also be derived from
this class, but this is not (yet) enforced. The {@link str} function,
when applied to an instance of this class (or most derived classes)
returns the string value of the argument or arguments, or an empty
string if no arguments were given to the constructor. When used as a
sequence, this accesses the arguments given to the constructor (handy
for backward compatibility with old code). The arguments are also
available on the instance's {@link args} attribute, as a tuple.

@@exception StandardError

<p>The base class for all built-in exceptions except {@link
exceptions.StopIteration} and {@link exceptions.SystemExit}. {@link
exceptions.StandardError} itself is derived from the root class {@link
exceptions.Exception}.

@@exception ArithmeticError

<p>The base class for those built-in exceptions that are raised for
various arithmetic errors: {@link exceptions.OverflowError}, {@link
exceptions.ZeroDivisionError}, {@link exceptions.FloatingPointError}.

@@exception LookupError

<p>The base class for the exceptions that are raised when a key or index
used on a mapping or sequence is invalid: {@link exceptions.IndexError},
{@link exceptions.KeyError}. This can be raised directly by {@link
sys.setdefaultencoding}.

@@exception EnvironmentError

<p>The base class for exceptions that can occur outside the Python
system: {@link exceptions.IOError}, {@link exceptions.OSError}. When
exceptions of this type are created with a 2-tuple, the first item is
available on the instance's {@link errno} attribute (it is assumed to be
an error number), and the second item is available on the {@link
strerror} attribute (it is usually the associated error message). The
tuple itself is also available on the {@link args} attribute.

<p>When an {@link exceptions.EnvironmentError} exception is instantiated
with a 3-tuple, the first two items are available as above, while the
third item is available on the {@link filename} attribute. However, for
backwards compatibility, the {@link args} attribute contains only a
2-tuple of the first two constructor arguments.

<p>The {@link filename} attribute is {@code None} when this exception is
created with other than 3 arguments. The {@link errno} and {@link
strerror} attributes are also {@link None} when the instance was created
with other than 2 or 3 arguments. In this last case, {@link args}
contains the verbatim constructor arguments as a tuple.
<blockquote>
@since New in version 1.5.2. <br />
</blockquote>

@@text 

<p>The following exceptions are the exceptions that are actually raised.

@@exception AssertionError

<p>Raised when an {@link assert} statement fails.

@@exception AttributeError

<p>Raised when an attribute reference or assignment fails. (When an
object does not support attribute references or attribute assignments at
all, {@link exceptions.TypeError} is raised.)

@@exception EOFError

<p>Raised when one of the built-in functions ({@link input} or {@link
raw_input}) hits an end-of-file condition (EOF) without reading any
data. (N.B.: the {@link read} and {@link readline} methods of file
objects return an empty string when they hit EOF.)

@@exception FloatingPointError

<p>Raised when a floating point operation fails. This exception is
always defined, but can only be raised when Python is configured with
the --with-fpectl option, or the {@code WANT_SIGFPE_HANDLER} symbol is
defined in the pyconfig.h file.

@@exception IOError

<p>Raised when an I/O operation (such as a {@link print} statement, the
built-in {@link open} function or a method of a file object) fails for
an I/O-related reason, e.g., &#8220;file not found&#8221; or &#8220;disk
full&#8221;.

<p>This class is derived from {@link exceptions.EnvironmentError}. See
the discussion above for more information on exception instance
attributes.

@@exception ImportError

<p>Raised when an {@link import} statement fails to find the module
definition or when a {@code from ... import} fails to find a name that
is to be imported.

@@exception IndexError

<p>Raised when a sequence subscript is out of range. (Slice indices are
silently truncated to fall in the allowed range; if an index is not a
plain integer, {@link exceptions.TypeError} is raised.)

@@exception KeyError

<p>Raised when a mapping (dictionary) key is not found in the set of
existing keys.

@@exception KeyboardInterrupt

<p>Raised when the user hits the interrupt key (normally Control-C or
Delete). During execution, a check for interrupts is made regularly.
Interrupts typed when a built-in function {@link input} or {@link
raw_input} is waiting for input also raise this exception.

@@exception MemoryError

<p>Raised when an operation runs out of memory but the situation may
still be rescued (by deleting some objects). The associated value is a
string indicating what kind of (internal) operation ran out of memory.
Note that because of the underlying memory management architecture (C's
{@link c:malloc} function), the interpreter may not always be able to
completely recover from this situation; it nevertheless raises an
exception so that a stack traceback can be printed, in case a run-away
program was the cause.

@@exception NameError

<p>Raised when a local or global name is not found. This applies only to
unqualified names. The associated value is an error message that
includes the name that could not be found.

@@exception NotImplementedError

<p>This exception is derived from {@link exceptions.RuntimeError}. In
user defined base classes, abstract methods should raise this exception
when they require derived classes to override the method.
<blockquote>
@since New in version
1.5.2. <br />
</blockquote>

@@exception OSError

<p>This class is derived from {@link exceptions.EnvironmentError} and is
used primarily as the {@link os} module's {@code os.error} exception.
See {@link exceptions.EnvironmentError} above for a description of the
possible associated values.
<blockquote>
@since New in version
1.5.2. <br />
</blockquote>

@@exception OverflowError

<p>Raised when the result of an arithmetic operation is too large to be
represented. This cannot occur for long integers (which would rather
raise {@link exceptions.MemoryError} than give up). Because of the lack
of standardization of floating point exception handling in C, most
floating point operations also aren't checked. For plain integers, all
operations that can overflow are checked except left shift, where
typical applications prefer to drop bits than raise an exception.

@@exception ReferenceError

<p>This exception is raised when a weak reference proxy, created by the
{@link weakref}.proxy() function, is used to access an attribute of the
referent after it has been garbage collected. For more information on
weak references, see the {@link weakref} module.
<blockquote>
@since New in version 2.2: Previously
known as the weakref.ReferenceError
exception. <br />
</blockquote>

@@exception RuntimeError

<p>Raised when an error is detected that doesn't fall in any of the
other categories. The associated value is a string indicating what
precisely went wrong. (This exception is mostly a relic from a previous
version of the interpreter; it is not used very much any more.)

@@exception StopIteration

<p>Raised by an iterator's {@link next} method to signal that there are
no further values. This is derived from {@link exceptions.Exception}
rather than {@link exceptions.StandardError}, since this is not
considered an error in its normal application.
<blockquote>
@since New
in version 2.2. <br />
</blockquote>

@@exception SyntaxError

<p>Raised when the parser encounters a syntax error. This may occur in
an {@link import} statement, in an {@link exec} statement, in a call to
the built-in function {@link eval} or {@link input}, or when reading the
initial script or standard input (also interactively).

<p>Instances of this class have attributes {@link filename}, {@link
lineno}, {@link offset} and {@link text} for easier access to the
details. {@link str} of the exception instance returns only the message.

@@exception SystemError

<p>Raised when the interpreter finds an internal error, but the
situation does not look so serious to cause it to abandon all hope. The
associated value is a string indicating what went wrong (in low-level
terms).

<p>You should report this to the author or maintainer of your Python
interpreter. Be sure to report the version of the Python interpreter
({@code sys.version}; it is also printed at the start of an interactive
Python session), the exact error message (the exception's associated
value) and if possible the source of the program that triggered the
error.

@@exception SystemExit

<p>This exception is raised by the {@link sys.exit} function. When it is
not handled, the Python interpreter exits; no stack traceback is
printed. If the associated value is a plain integer, it specifies the
system exit status (passed to C's {@link c:exit} function); if it is
{@link None}, the exit status is zero; if it has another type (such as a
string), the object's value is printed and the exit status is one.

<p>Instances have an attribute {@link code} which is set to the proposed
exit status or error message (defaulting to {@link None}). Also, this
exception derives directly from {@link exceptions.Exception} and not
{@link exceptions.StandardError}, since it is not technically an error.

<p>A call to {@link sys.exit} is translated into an exception so that
clean-up handlers ({@link finally} clauses of {@link try} statements)
can be executed, and so that a debugger can execute a script without
running the risk of losing control. The {@link os._exit} function can be
used if it is absolutely positively necessary to exit immediately (for
example, in the child process after a call to {@link fork}).

@@exception TypeError

<p>Raised when an operation or function is applied to an object of
inappropriate type. The associated value is a string giving details
about the type mismatch.

@@exception UnboundLocalError

<p>Raised when a reference is made to a local variable in a function or
method, but no value has been bound to that variable. This is a subclass
of {@link exceptions.NameError}.
<blockquote>
@since New in version 2.0. <br />
</blockquote>

@@exception UnicodeError

<p>Raised when a Unicode-related encoding or decoding error occurs. It
is a subclass of {@link exceptions.ValueError}.
<blockquote>
@since New in version 2.0. <br />
</blockquote>

@@exception UnicodeEncodeError

<p>Raised when a Unicode-related error occurs during encoding. It is a
subclass of {@link exceptions.UnicodeError}.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@exception UnicodeDecodeError

<p>Raised when a Unicode-related error occurs during decoding. It is a
subclass of {@link exceptions.UnicodeError}.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@exception UnicodeTranslateError

<p>Raised when a Unicode-related error occurs during translating. It is
a subclass of {@link exceptions.UnicodeError}.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@exception ValueError

<p>Raised when a built-in operation or function receives an argument
that has the right type but an inappropriate value, and the situation is
not described by a more precise exception such as {@link
exceptions.IndexError}.

@@exception WindowsError

<p>Raised when a Windows-specific error occurs or when the error number
does not correspond to an errno value. The {@link errno} and {@link
strerror} values are created from the return values of the {@link
c:GetLastError} and {@link c:FormatMessage} functions from the Windows
Platform API. This is a subclass of {@link exceptions.OSError}.
<blockquote>
@since New in version 2.0. <br />
</blockquote>

@@exception ZeroDivisionError

<p>Raised when the second argument of a division or modulo operation is
zero. The associated value is a string indicating the type of the
operands and the operation.

@@text 

<p>The following exceptions are used as warning categories; see the
{@link warnings} module for more information.

@@exception Warning

<p>Base class for warning categories.

@@exception UserWarning

<p>Base class for warnings generated by user code.

@@exception DeprecationWarning

<p>Base class for warnings about deprecated features.

@@exception PendingDeprecationWarning

<p>Base class for warnings about features which will be deprecated in
the future.

@@exception SyntaxWarning

<p>Base class for warnings about dubious syntax

@@exception RuntimeWarning

<p>Base class for warnings about dubious runtime behavior.

@@exception FutureWarning

<p>Base class for warnings about constructs that will change
semantically in the future.

@@text 

<p>The class hierarchy for built-in exceptions is:

<pre>
    Exception
     +-- SystemExit
     +-- StopIteration
     +-- StandardError
     |    +-- KeyboardInterrupt
     |    +-- ImportError
     |    +-- EnvironmentError
     |    |    +-- IOError
     |    |    +-- OSError
     |    |         +-- WindowsError
     |    +-- EOFError
     |    +-- RuntimeError
     |    |    +-- NotImplementedError
     |    +-- NameError
     |    |    +-- UnboundLocalError
     |    +-- AttributeError
     |    +-- SyntaxError
     |    |    +-- IndentationError
     |    |         +-- TabError
     |    +-- TypeError
     |    +-- AssertionError
     |    +-- LookupError
     |    |    +-- IndexError
     |    |    +-- KeyError
     |    +-- ArithmeticError
     |    |    +-- OverflowError
     |    |    +-- ZeroDivisionError
     |    |    +-- FloatingPointError
     |    +-- ValueError
     |    |    +-- UnicodeError
     |    |        +-- UnicodeEncodeError
     |    |        +-- UnicodeDecodeError
     |    |        +-- UnicodeTranslateError
     |    +-- ReferenceError
     |    +-- SystemError
     |    +-- MemoryError
     +---Warning
      +-- UserWarning
      +-- DeprecationWarning
      +-- PendingDeprecationWarning
      +-- SyntaxWarning
      +-- OverflowWarning (not generated in 2.4; won't exist in 2.5)
      +-- RuntimeWarning
      +-- FutureWarning
</pre>


<h1>Built-in Constants</h1>

<p>A small number of constants live in the built-in namespace. They are:

@@variable False

<p>The false value of the {@link bool} type.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable True

<p>The true value of the {@link bool} type.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@variable None

<p>The sole value of {@link types}.NoneType. {@code None} is frequently
used to represent the absence of a value, as when default arguments are
not passed to a function.

@@variable NotImplemented

<p>Special value which can be returned by the &#8220;rich
comparison&#8221; special methods ({@link __eq__}, {@link __lt__}, and
friends), to indicate that the comparison is not implemented with
respect to the other type.

@@variable Ellipsis

<p>Special value used in conjunction with extended slicing syntax.

@@text 
