<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The SimpleHTTPServer&nbsp;module</title></head><body data-page-id="654"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The SimpleHTTPServer&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>This is a simple HTTP server that provides standard GET and HEAD
request handlers. The path name given by the client is interpreted
as a relative file name (relative to the current directory when the
server was started, that is).</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the SimpleHTTPServer module</b>
<pre class="wide">
# File: <a href="simplehttpserver/simplehttpserver-example-1.py">simplehttpserver-example-1.py</a>

import SimpleHTTPServer
import SocketServer

# <i>minimal web server.  serves files relative to the</i>
# <i>current directory.</i>

PORT = 8000

Handler = SimpleHTTPServer.SimpleHTTPRequestHandler

httpd = SocketServer.TCPServer(("", PORT), Handler)

print "serving at port", PORT
httpd.serve_forever()

</pre><pre class="computeroutput wide" moreinfo="NONE">
$ python simplehttpserver-example-1.py
serving at port 8000
localhost - - [11/Oct/1999 15:07:44] code 403, message Directory listing
not supported
localhost - - [11/Oct/1999 15:07:44] "GET / HTTP/1.1" 403 -
localhost - - [11/Oct/1999 15:07:56] "GET /samples/sample.htm HTTP/1.1" 200 -
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>The server ignores drive letters and relative path names (such
as &#8216;..&#8217;). However, it does not implement any other access control
mechanisms, so be careful how you use it.</p><p>The second example implements a truly minimal web proxy. When
sent to a proxy, the HTTP requests should include the full URI for
the target server. This server uses <b><a href="urllib.htm">urllib</a></b>
to fetch data from the target.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the SimpleHTTPServer module as a proxy</b>
<pre class="wide">
# File: <a href="simplehttpserver/simplehttpserver-example-2.py">simplehttpserver-example-2.py</a>

# <i>a truly minimal HTTP proxy</i>

import SocketServer
import SimpleHTTPServer
import urllib

PORT = 1234

class Proxy(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.copyfile(urllib.urlopen(self.path), self.wfile)

httpd = SocketServer.ForkingTCPServer(('', PORT), Proxy)
print "serving at port", PORT
httpd.serve_forever()
</pre></div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
