<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Errors and&nbsp;Exceptions</title> <script type="text/javascript">effbot_page_id=1898;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles

now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Errors and&nbsp;Exceptions</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p>COMMENT: <a href="http://docs.python.org/tut/node10.html">Original Source</a></p><p>Until now error messages haven&#8217;t been more than mentioned, but if you
have tried out the examples you have probably seen some. There are (at
least) two distinguishable kinds of errors: <em>syntax errors</em> and
<em>exceptions</em>.</p><h2 id="syntax-errors">Syntax Errors&#160;<a class="nav" href="#syntax-errors" title="bookmark!">#</a></h2><p>Syntax errors, also known as parsing errors, are perhaps the most
common kind of complaint you get while you are still learning Python:</p><pre><code>&gt;&gt;&gt; while True print 'Hello world'
  File "&lt;stdin&gt;", line 1, in ?
    while True print 'Hello world'
                   ^
SyntaxError: invalid syntax
</code></pre><p>The parser repeats the offending line and displays a little
<q>arrow</q> pointing at the earliest point in the line where the
error was detected.  The error is caused by (or at least detected at)
the token <em>preceding</em> the arrow: in the example, the error is detected
at the keyword print, since a colon (&#8220;:&#8221;) is missing before it. File
name and line number are printed so you know where to look in case the
input came from a script.</p><h2 id="exceptions">Exceptions&#160;<a class="nav" href="#exceptions" title="bookmark!">#</a></h2><p>Even if a statement or expression is syntactically correct, it may
cause an error when an attempt is made to execute it. Errors detected
during execution are called <em>exceptions</em> and are not unconditionally
fatal: you will soon learn how to handle them in Python programs. Most
exceptions are not handled by programs, however, and result in error
messages as shown here:</p><pre class="python">&gt;&gt;&gt; 10 * (1/0)
Traceback (most recent call last):
  File <span class="pystring">"&lt;stdin&gt;"</span>, line 1, <span class="pykeyword">in</span> ?
ZeroDivisionError: integer division <span class="pykeyword">or</span> modulo by zero
&gt;&gt;&gt; 4 + spam*3
Traceback (most recent call last):
  File <span class="pystring">"&lt;stdin&gt;"</span>, line 1, <span class="pykeyword">in</span> ?
NameError: name <span class="pystring">'spam'</span> <span class="pykeyword">is</span> <span class="pykeyword">not</span> defined
&gt;&gt;&gt; <span class="pystring">'2'</span> + 2
Traceback (most recent call last):
  File <span class="pystring">"&lt;stdin&gt;"</span>, line 1, <span class="pykeyword">in</span> ?
TypeError: cannot concatenate <span class="pystring">'str'</span> <span class="pykeyword">and</span> <span class="pystring">'int'</span> objects</pre><p>The last line of the error message indicates what happened. Exceptions
come in different types, and the type is printed as part of the
message: the types in the example are <a href="/pyref/ZeroDivisionError.htm"><strong>ZeroDivisionError</strong></a>,
<a href="/pyref/NameError.htm"><strong>NameError</strong></a> and <a href="/pyref/TypeError.htm"><strong>TypeError</strong></a>.  The string printed as
the exception type is the name of the built-in exception that
occurred.  This is true for all built-in exceptions, but need not be
true for user-defined exceptions (although it is a useful convention).
Standard exception names are built-in identifiers (not reserved
keywords).</p><p>The rest of the line provides detail based on the type of exception
and what caused it.</p><p>The preceding part of the error message shows the context where the
exception happened, in the form of a stack traceback.  In general it
contains a stack traceback listing source lines; however, it will not
display lines read from standard input.</p><p>The <em><a href="http://docs.python.org/lib/module-exceptions.html">Python Library
Reference</a></em> lists
the built-in exceptions and their meanings.</p><h2 id="handling-exceptions">Handling Exceptions&#160;<a class="nav" href="#handling-exceptions" title="bookmark!">#</a></h2><p>It is possible to write programs that handle selected exceptions. Look
at the following example, which asks the user for input until a valid
integer has been entered, but allows the user to interrupt the program
(using Control-C or whatever the operating system supports); note that
a user-generated interruption is signalled by raising the
<a href="/pyref/KeyboardInterrupt.htm"><strong>KeyboardInterrupt</strong></a> exception.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>&gt;&gt;&gt; while True:
...     try:
...         x = int(raw_input("Please enter a number: "))
...         break
...     except ValueError:
...         print "Oops!  That was no valid number.  Try again..."
...
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>The <a href="/pyref/try.htm"><strong>try</strong></a> statement works as follows.</p><ul><li><p>First, the <em>try clause</em> (the statement(s) between the <a href="/pyref/try.htm"><strong>try</strong></a> and <a href="/pyref/except.htm"><strong>except</strong></a> keywords) is executed.</p></li><li><p>If no exception occurs, the <em>except clause</em> is skipped and execution of the <a href="/pyref/try.htm"><strong>try</strong></a> statement is finished.</p></li><li><p>If an exception occurs during execution of the <a href="/pyref/try.htm"><strong>try</strong></a> clause, the rest of the clause is skipped. Then if its type matches the exception named after the except keyword, the <a href="/pyref/except.htm"><strong>except</strong></a> clause is executed, and then execution continues after the <a href="/pyref/try.htm"><strong>try</strong></a> statement.</p></li><li><p>If an exception occurs which does not match the exception named in the <a href="/pyref/except.htm"><strong>except</strong></a> clause, it is passed on to outer <a href="/pyref/try.htm"><strong>try</strong></a> statements; if no handler is found, it is an <em>unhandled exception</em> and execution stops with a message as shown above.</p></li></ul><p>A <a href="/pyref/try.htm"><strong>try</strong></a> statement may have more than one <a href="/pyref/except.htm"><strong>except</strong></a>
clause, to specify handlers for different exceptions.  At most one
handler will be executed.  Handlers only handle exceptions that occur
in the corresponding <a href="/pyref/try.htm"><strong>try</strong></a> clause, not in other handlers of
the same <a href="/pyref/try.htm"><strong>try</strong></a> statement.  An <a href="/pyref/except.htm"><strong>except</strong></a> clause may name
multiple exceptions as a parenthesized tuple, for example:</p><pre class="python">... <span class="pykeyword">except</span> (RuntimeError, TypeError, NameError):
...     <span class="pykeyword">pass</span></pre><p>The last <a href="/pyref/except.htm"><strong>except</strong></a> clause may omit the exception name(s), to
serve as a wildcard.  Use this with extreme caution, since it is easy
to mask a real programming error in this way!  It can also be used to
print an error message and then re-raise the exception (allowing a
caller to handle the exception as well):</p><pre class="python"><span class="pykeyword">import</span> sys

<span class="pykeyword">try</span>:
    f = open(<span class="pystring">'myfile.txt'</span>)
    s = f.readline()
    i = int(s.strip())
<span class="pykeyword">except</span> IOError, (errno, strerror):
    <span class="pykeyword">print</span> <span class="pystring">"I/O error(%s): %s"</span> % (errno, strerror)
<span class="pykeyword">except</span> ValueError:
    <span class="pykeyword">print</span> <span class="pystring">"Could not convert data to an integer."</span>
<span class="pykeyword">except</span>:
    <span class="pykeyword">print</span> <span class="pystring">"Unexpected error:"</span>, sys.exc_info()[0]
    <span class="pykeyword">raise</span></pre><p>The <a href="/pyref/try.htm"><strong>try</strong></a>-<a href="/pyref/except.htm"><strong>except</strong></a> statement has an optional <a href="/pyref/else.htm"><strong>else</strong></a> clause, which, when present, must follow all <a href="/pyref/except.htm"><strong>except</strong></a>
clauses.  It is useful for code that must be executed if the <a href="/pyref/try.htm"><strong>try</strong></a> clause does not raise an exception.  For example:</p><pre class="python"><span class="pykeyword">for</span> arg <span class="pykeyword">in</span> sys.argv[1:]:
    <span class="pykeyword">try</span>:
        f = open(arg, <span class="pystring">'r'</span>)
    <span class="pykeyword">except</span> IOError:
        <span class="pykeyword">print</span> <span class="pystring">'cannot open'</span>, arg
    <span class="pykeyword">else</span>:
        <span class="pykeyword">print</span> arg, <span class="pystring">'has'</span>, len(f.readlines()), <span class="pystring">'lines'</span>
        f.close()</pre><p>The use of the <a href="/pyref/else.htm"><strong>else</strong></a> clause is better than adding additional
code to the <a href="/pyref/try.htm"><strong>try</strong></a> clause because it avoids accidentally
catching an exception that wasn&#8217;t raised by the code being protected
by the <a href="/pyref/try.htm"><strong>try</strong></a>-<a href="/pyref/except.htm"><strong>except</strong></a> statement.</p><p>When an exception occurs, it may have an associated value, also known
as the exception&#8217;s <em>argument</em>.  The presence and type of the argument
depend on the exception type.</p><p>The <a href="/pyref/except.htm"><strong>except</strong></a> clause may specify a variable after the exception
name (or tuple).  The variable is bound to an exception instance with
the arguments stored in <code>instance.args</code>.  For convenience, the
exception instance defines [@link __getitem__]] and <a href="/pyref/__str__.htm"><strong>__str__</strong></a> so the arguments can be accessed or printed directly
without having to reference <code>.args</code>.</p><p>COMMENT: are special methods introduced at this time?</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>&gt;&gt;&gt; try:
...    raise Exception('spam', 'eggs')
... except Exception, inst:
...    print type(inst)     # the exception instance
...    print inst.args      # arguments stored in .args
...    print inst           # __str__ allows args to printed directly
...    x, y = inst          # __getitem__ allows args to be unpacked directly
...    print 'x =', x
...    print 'y =', y
...
&lt;type 'instance'&gt;
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>If an exception has an argument, it is printed as the last part
(`detail&#8217;) of the message for unhandled exceptions.</p><p>Exception handlers don&#8217;t just handle exceptions if they occur
immediately in the <a href="/pyref/try.htm"><strong>try</strong></a> clause, but also if they occur inside
functions that are called (even indirectly) in the <a href="/pyref/try.htm"><strong>try</strong></a>
clause.  For example:</p><pre><code>&gt;&gt;&gt; def this_fails():
...     x = 1/0
... 
&gt;&gt;&gt; try:
...     this_fails()
... except ZeroDivisionError, detail:
...     print 'Handling run-time error:', detail
... 
Handling run-time error: integer division or modulo by zero
</code></pre><h2 id="raising-exceptions">Raising Exceptions&#160;<a class="nav" href="#raising-exceptions" title="bookmark!">#</a></h2><p>The <a href="/pyref/raise.htm"><strong>raise</strong></a> statement allows the programmer to force a
specified exception to occur. For example:</p><pre class="python">&gt;&gt;&gt; <span class="pykeyword">raise</span> NameError, <span class="pystring">'HiThere'</span>
Traceback (most recent call last):
  File <span class="pystring">"&lt;stdin&gt;"</span>, line 1, <span class="pykeyword">in</span> ?
NameError: HiThere</pre><p>The first argument to <a href="/pyref/raise.htm"><strong>raise</strong></a> names the exception to be
raised.  The optional second argument specifies the exception&#8217;s
argument.  Alternatively, the above could be written as `raise
NameError(&#8216;HiThere&#8217;)`.  Either form works fine, but there seems to be
a growing stylistic preference for the latter.</p><p>If you need to determine whether an exception was raised but don&#8217;t
intend to handle it, a simpler form of the <a href="/pyref/raise.htm"><strong>raise</strong></a> statement
allows you to re-raise the exception:</p><pre><code>&gt;&gt;&gt; try:
...     raise NameError, 'HiThere'
... except NameError:
...     print 'An exception flew by!'
...     raise
...
An exception flew by!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ?
NameError: HiThere
</code></pre><h2 id="user-defined-exceptions">User-defined Exceptions&#160;<a class="nav" href="#user-defined-exceptions" title="bookmark!">#</a></h2><p>Programs may name their own exceptions by creating a new exception
class.  Exceptions should typically be derived from the <a href="/pyref/Exception.htm"><strong>Exception</strong></a> class, either directly or indirectly.  For example:</p><pre><code>&gt;&gt;&gt; class MyError(Exception):
...     def __init__(self, value):
...         self.value = value
...     def __str__(self):
...         return repr(self.value)
... 
&gt;&gt;&gt; try:
...     raise MyError(2*2)
... except MyError, e:
...     print 'My exception occurred, value:', e.value
... 
My exception occurred, value: 4
&gt;&gt;&gt; raise MyError, 'oops!'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
__main__.MyError: 'oops!'
</code></pre><p>In this example, the default __init__ of <a href="/pyref/Exception.htm"><strong>Exception</strong></a> has
been overridden.  The new behavior simply creates the value attribute.
This replaces the default behavior of creating the args attribute.</p><p>Exception classes can be defined which do anything any other class can
do, but are usually kept simple, often only offering a number of
attributes that allow information about the error to be extracted by
handlers for the exception.  When creating a module that can raise
several distinct errors, a common practice is to create a base class
for exceptions defined by that module, and subclass that to create
specific exception classes for different error conditions:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide"><span class="pykeyword">class</span> <span class="pyclass">Error</span>(Exception):
    <span class="pystring">"""Base class for exceptions in this module."""</span>
    <span class="pykeyword">pass</span>

<span class="pykeyword">class</span> <span class="pyclass">InputError</span>(Error):
    <span class="pystring">"""Exception raised for errors in the input.</span>

    Attributes:
        expression -- input expression in which the error occurred
        message -- explanation of the error
    """

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, expression, message):
        self.expression = expression
        self.message = message

<span class="pykeyword">class</span> <span class="pyclass">TransitionError</span>(Error):
    <span class="pystring">"""Raised when an operation attempts a state transition that's not</span>
    allowed.

    Attributes:
        previous -- state at beginning of transition
        next -- attempted new state
        message -- explanation of why the specific transition is not allowed
    """

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, previous, next, message):
        self.previous = previous
        self.next = next
        self.message = message</pre></div><div class="yui-ge"><div class="yui-u first"><p>Most exceptions are defined with names that end in <q>Error,</q>
similar to the naming of the standard exceptions.</p><p>Many standard modules define their own exceptions to report errors
that may occur in functions they define.  More information on classes
is presented in the chapter on <a href="node11.html">Classes</a>.</p><h2 id="defining-clean-up-actions">Defining Clean-up Actions&#160;<a class="nav" href="#defining-clean-up-actions" title="bookmark!">#</a></h2><p>The <a href="/pyref/try.htm"><strong>try</strong></a> statement has another optional clause which is
intended to define clean-up actions that must be executed under all
circumstances.  For example:</p><pre><code>&gt;&gt;&gt; try:
...     raise KeyboardInterrupt
... finally:
...     print 'Goodbye, world!'
... 
Goodbye, world!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ?
KeyboardInterrupt
</code></pre><p>A <a href="/pyref/finally.htm"><strong>finally</strong></a> clause is executed whether or not an exception has
occurred in the <a href="/pyref/try.htm"><strong>try</strong></a> clause.  When an exception has occurred,
it is re-raised after the <a href="/pyref/finally.htm"><strong>finally</strong></a> clause is executed.  The
<a href="/pyref/finally.htm"><strong>finally</strong></a> clause is also executed <q>on the way out</q> when
the <a href="/pyref/try.htm"><strong>try</strong></a> statement is left via a <a href="/pyref/break.htm"><strong>break</strong></a> or <a href="/pyref/return.htm"><strong>return</strong></a> statement.</p><p>The code in the <a href="/pyref/finally.htm"><strong>finally</strong></a> clause is useful for releasing
external resources (such as files or network connections), regardless
of whether the use of the resource was successful.</p><p>In Python 2.4 and earlier, a <a href="/pyref/try.htm"><strong>try</strong></a> statement must either have
one or more <a href="/pyref/except.htm"><strong>except</strong></a> clauses or one <a href="/pyref/finally.htm"><strong>finally</strong></a> clause,
but not both.  To use both, you need to nest two <a href="/pyref/try.htm"><strong>try</strong></a>
statements.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class='comment'>
<p><b>Comment:</b></p>
<p>
The section describing User-defined Exceptions should begin with the simplest possible example and only later on show more elaborate ones.  I recall when learning Python it took me a while to realize that I did not need to override any methods to utilize custom exceptions.
For example:


    &gt;&gt;&gt; class MyError(Exception):
    ...     pass
    ...     
    &gt;&gt;&gt; raise MyError, 'Something bad happened'
    Traceback (most recent call last):
      File "&lt;input&gt;", line 1, in ?
    MyError: Something bad happened


</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node10.html/_comments/3tj9'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
This section reinforces the belief that exceptions are errors, which makes it particularly
hard for newbies to understand that they are more useful and powerful than that.

Other questions -- how to ignore exceptions?  The tiny but about pass doesn't quite say it.
and if you are going to raise a system error, which one should you use?  People confuse
ValueError and TypeError all the time.
</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node10.html/_comments/4dwr'>infogami</a></b></p>
</div>
</div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li> <li><b><a href="." title="Go to pytut index page.">::: pytut :::</a></b></li> </ul> <ul><li><b>::: contents</b></li></ul> <ul><li><ul><li><a href="#syntax-errors">Syntax Errors</a></li><li><a href="#exceptions">Exceptions</a></li><li><a href="#handling-exceptions">Handling Exceptions</a></li><li><a href="#raising-exceptions">Raising Exceptions</a></li><li><a href="#user-defined-exceptions">User-defined Exceptions</a></li><li><a href="#defining-clean-up-actions">Defining Clean-up Actions</a></li></ul></li></ul> </div> <!-- menu --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15_grey.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.07s 2010-03-10 12:10:37.097764.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
