
@@module getopt

<h1>getopt&#8212;Parser for command line options</h1>

<p>This module helps scripts to parse the command line arguments in
{@code sys.argv}. It supports the same conventions as the Unix {@link
c:getopt} function (including the special meanings of arguments of the
form `{@code -}' and `{@code -}{@code -}'). Long options similar to
those supported by GNU software may be used as well via an optional
third argument. This module provides a single function and an exception:

@@function getopt(args, options[, long_options])

<p>Parses command line options and parameter list. {@var args} is the
argument list to be parsed, without the leading reference to the running
program. Typically, this means "{@code sys.argv[1:]}". {@var options} is
the string of option letters that the script wants to recognize, with
options that require an argument followed by a colon ("{@code :}"; i.e.,
the same format that Unix {@link c:getopt} uses).

<p class='note'><b>Note:</b> Unlike GNU {@link c:getopt}, after a
non-option argument, all further arguments are considered also
non-options. This is similar to the way non-GNU Unix systems work.

<p>{@var long_options}, if specified, must be a list of strings with the
names of the long options which should be supported. The leading {@code
'-}{@code -'} characters should not be included in the option name. Long
options which require an argument should be followed by an equal sign
("{@code =}"). To accept only long options, {@var options} should be an
empty string. Long options on the command line can be recognized so long
as they provide a prefix of the option name that matches exactly one of
the accepted options. For example, if {@var long_options} is {@code
['foo', 'frob']}, the option --fo will match as --foo, but --f will not
match uniquely, so {@link GetoptError} will be raised.

<p>The return value consists of two elements: the first is a list of
{@code (}{@var option}, {@var value}) pairs; the second is the list of
program arguments left after the option list was stripped (this is a
trailing slice of {@var args}). Each option-and-value pair returned has
the option as its first element, prefixed with a hyphen for short
options (e.g., {@code '-x'}) or two hyphens for long options (e.g.,
{@code '-}{@code -long-option'}), and the option argument as its second
element, or an empty string if the option has no argument. The options
occur in the list in the same order in which they were found, thus
allowing multiple occurrences. Long and short options may be mixed.

@@function gnu_getopt(args, options[, long_options])

<p>This function works like {@link getopt}, except that GNU style
scanning mode is used by default. This means that option and non-option
arguments may be intermixed. The {@link getopt} function stops
processing options as soon as a non-option argument is encountered.

<p>If the first character of the option string is `+', or if the
environment variable POSIXLY_CORRECT is set, then option processing
stops as soon as a non-option argument is encountered.

@@exception GetoptError

<p>This is raised when an unrecognized option is found in the argument
list or when an option requiring an argument is given none. The argument
to the exception is a string indicating the cause of the error. For long
options, an argument given to an option which does not require one will
also cause this exception to be raised. The attributes {@link msg} and
{@link opt} give the error message and related option; if there is no
specific option to which the exception relates, {@link opt} is an empty
string.
<blockquote>
@since Changed in version 1.6: Introduced GetoptError as a synonym for error. <br />
</blockquote>

@@exception error

<p>Alias for {@link GetoptError}; for backward compatibility.

@@text 

<p>An example using only Unix style options:

<pre>
&gt;&gt;&gt; import getopt
&gt;&gt;&gt; args = '-a -b -cfoo -d bar a1 a2'.split()
&gt;&gt;&gt; args
['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']
&gt;&gt;&gt; optlist, args = getopt.getopt(args, 'abc:d:')
&gt;&gt;&gt; optlist
[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]
&gt;&gt;&gt; args
['a1', 'a2']
</pre>


<p>Using long option names is equally easy:

<pre>
&gt;&gt;&gt; s = '--condition=foo --testing --output-file abc.def -x a1 a2'
&gt;&gt;&gt; args = s.split()
&gt;&gt;&gt; args
['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2']
&gt;&gt;&gt; optlist, args = getopt.getopt(args, 'x', [
...     'condition=', 'output-file=', 'testing'])
&gt;&gt;&gt; optlist
[('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x',
 '')]
&gt;&gt;&gt; args
['a1', 'a2']
</pre>


<p>In a script, typical usage is something like this:

<pre>
import getopt, sys

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "ho:v", ["help", "output="])
    except getopt.GetoptError:
        # print help information and exit:
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for o, a in opts:
        if o == "-v":
            verbose = True
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        if o in ("-o", "--output"):
            output = a
    # ...

if __name__ == "__main__":
    main()
</pre>


@see 
{@link optparse Module optparse}

More object-oriented command line option parsing.
