
@@module sunau

<h1>sunau&#8212;Read and write Sun AU files</h1>

<p>The {@link sunau} module provides a convenient interface to the Sun
AU sound format. Note that this module is interface-compatible with the
modules {@link aifc} and {@link wave}.

<p>An audio file consists of a header followed by the data. The fields
of the header are:

<p><table border=1>
<tr> <th>
<p>Field
<th>
<p>Contents
<tr> <td>
<p>magic word
<td>
<p>The four bytes "{@code .snd}".
<tr> <td>
<p>header size
<td>
<p>Size of the header, including info, in bytes.
<tr> <td>
<p>data size
<td>
<p>Physical size of the data, in bytes.
<tr> <td>
<p>encoding
<td>
<p>Indicates how the audio samples are encoded.
<tr> <td>
<p>sample rate
<td>
<p>The sampling rate.
<tr> <td>
<p># of channels
<td>
<p>The number of channels in the samples.
<tr> <td>
<p>info
<td>
<p>ASCII string giving a description of the audio file (padded with null
bytes).
</table></p>

<p>Apart from the info field, all header fields are 4 bytes in size.
They are all 32-bit unsigned integers encoded in big-endian byte order.

<p>The {@link sunau} module defines the following functions:

@@function open(file, mode)

<p>If {@var file} is a string, open the file by that name, otherwise
treat it as a seekable file-like object. {@var mode} can be any of
@@attribute 'r'
@@attribute Read only mode.
@@attribute 'w'

<p>Write only mode.

<p>Note that it does not allow read/write files.

<p>A {@var mode} of {@code 'r'} returns a {@link AU_read} object, while
a {@var mode} of {@code 'w'} or {@code 'wb'} returns a {@link AU_write}
object.

@@function openfp(file, mode)

<p>A synonym for {@link open}, maintained for backwards compatibility.

@@text 

<p>The {@link sunau} module defines the following exception:

@@exception Error

<p>An error raised when something is impossible because of Sun AU specs
or implementation deficiency.

@@text 

<p>The {@link sunau} module defines the following data items:

@@variable AUDIO_FILE_MAGIC

<p>An integer every valid Sun AU file begins with, stored in big-endian
form. This is the string "{@code .snd}" interpreted as an integer.

@@variable AUDIO_FILE_ENCODING_MULAW_8
@@variable AUDIO_FILE_ENCODING_LINEAR_8
@@variable AUDIO_FILE_ENCODING_LINEAR_16
@@variable AUDIO_FILE_ENCODING_LINEAR_24
@@variable AUDIO_FILE_ENCODING_LINEAR_32
@@variable AUDIO_FILE_ENCODING_ALAW_8

<p>Values of the encoding field from the AU header which are supported
by this module.

@@variable AUDIO_FILE_ENCODING_FLOAT
@@variable AUDIO_FILE_ENCODING_DOUBLE
@@variable AUDIO_FILE_ENCODING_ADPCM_G721
@@variable AUDIO_FILE_ENCODING_ADPCM_G722
@@variable AUDIO_FILE_ENCODING_ADPCM_G723_3
@@variable AUDIO_FILE_ENCODING_ADPCM_G723_5

<p>Additional known values of the encoding field from the AU header, but
which are not supported by this module.

@@text 

<h2>AU_read Objects</h2>

<p>AU_read objects, as returned by {@link open} above, have the
following methods:

@@method AU_read.close()

<p>Close the stream, and make the instance unusable. (This is called
automatically on deletion.)

@@method AU_read.getnchannels()

<p>Returns number of audio channels (1 for mone, 2 for stereo).

@@method AU_read.getsampwidth()

<p>Returns sample width in bytes.

@@method AU_read.getframerate()

<p>Returns sampling frequency.

@@method AU_read.getnframes()

<p>Returns number of audio frames.

@@method AU_read.getcomptype()

<p>Returns compression type. Supported compression types are {@code
'ULAW'}, {@code 'ALAW'} and {@code 'NONE'}.

@@method AU_read.getcompname()

<p>Human-readable version of {@link getcomptype}. The supported types
have the respective names {@code 'CCITT G.711 u-law'}, {@code 'CCITT
G.711 A-law'} and {@code 'not compressed'}.

@@method AU_read.getparams()

<p>Returns a tuple {@code (}{@var nchannels}, {@var sampwidth}, {@var
framerate}, {@var nframes}, {@var comptype}, {@var compname}),
equivalent to output of the {@link get*} methods.

@@method AU_read.readframes(n)

<p>Reads and returns at most {@var n} frames of audio, as a string of
bytes. The data will be returned in linear format. If the original data
is in u-LAW format, it will be converted.

@@method AU_read.rewind()

<p>Rewind the file pointer to the beginning of the audio stream.

@@text 

<p>The following two methods define a term &#8220;position&#8221; which
is compatible between them, and is otherwise implementation dependent.

@@method AU_read.setpos(pos)

<p>Set the file pointer to the specified position. Only values returned
from {@link tell} should be used for {@var pos}.

@@method AU_read.tell()

<p>Return current file pointer position. Note that the returned value
has nothing to do with the actual position in the file.

@@text 

<p>The following two functions are defined for compatibility with the
{@link aifc}, and don't do anything interesting.

@@method AU_read.getmarkers()

<p>Returns {@link None}.

@@method AU_read.getmark(id)

<p>Raise an error.

@@text 

<h2>AU_write Objects</h2>

<p>AU_write objects, as returned by {@link open} above, have the
following methods:

@@method AU_write.setnchannels(n)

<p>Set the number of channels.

@@method AU_write.setsampwidth(n)

<p>Set the sample width (in bytes.)

@@method AU_write.setframerate(n)

<p>Set the frame rate.

@@method AU_write.setnframes(n)

<p>Set the number of frames. This can be later changed, when and if more
frames are written.

@@method AU_write.setcomptype(type, name)

<p>Set the compression type and description. Only {@code 'NONE'} and
{@code 'ULAW'} are supported on output.

@@method AU_write.setparams(tuple)

<p>The {@var tuple} should be {@code (}{@var nchannels}, {@var
sampwidth}, {@var framerate}, {@var nframes}, {@var comptype}, {@var
compname}), with values valid for the {@link set*} methods. Set all
parameters.

@@method AU_write.tell()

<p>Return current position in the file, with the same disclaimer for the
{@link AU_read.tell} and {@link AU_read.setpos} methods.

@@method AU_write.writeframesraw(data)

<p>Write audio frames, without correcting {@var nframes}.

@@method AU_write.writeframes(data)

<p>Write audio frames and make sure {@var nframes} is correct.

@@method AU_write.close()

<p>Make sure {@var nframes} is correct, and close the file.

<p>This method is called upon deletion.

@@text 

<p>Note that it is invalid to set any parameters after calling {@link
writeframes} or {@link writeframesraw}.
