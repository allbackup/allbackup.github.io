<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>How can I get a dictionary to display its keys in a consistent&nbsp;order?</title></head><body data-page-id="763"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">How can I get a dictionary to display its keys in a consistent&nbsp;order?</h1></div><div class="yui-ge"><div class="yui-u first"><p>You can&#8217;t. Dictionaries store their keys in an unpredictable order, so
the display order of a dictionary&#8217;s elements will be similarly
unpredictable.</p><p>This can be frustrating if you want to save a printable version to a
file, make some changes and then compare it with some other printed
dictionary.  In this case, you can use the <a href="/pyref/pprint.htm"><strong>pprint</strong></a> module to
pretty-print the dictionary; the items will be presented in order
sorted by the key.</p><p>A more complicated solution is to subclass <a href="/pyref/dict.htm"><strong>dict</strong></a> and create
a class that prints itself in a predictable order. Here&#8217;s one simple-minded
implementation of such a class:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide"><span class="pykeyword">class</span> <span class="pyclass">sorted_dict</span>(dict):
    <span class="pykeyword">def</span> <span class="pyfunction">__repr__</span>(self):
        result = [<span class="pystring">"%r: %r"</span> % (key, self[key]) <span class="pykeyword">for</span> key <span class="pykeyword">in</span> sorted(self)]
        <span class="pykeyword">return</span> <span class="pystring">"{"</span> + <span class="pystring">", "</span>.join(result) + <span class="pystring">"}"</span>
    __str__ = __repr__</pre></div><div class="yui-ge"><div class="yui-u first"><p>This will work for many common situations you might encounter, though
it&#8217;s far from a perfect solution.  The largest flaw is that if some
values in the dictionary are also dictionaries, their values won&#8217;t be
presented in any particular order.</p><p>CATEGORY: programming</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
