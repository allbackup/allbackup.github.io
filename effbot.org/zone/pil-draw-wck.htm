<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Drawing WCK Graphics in a PIL Image&nbsp;Memory</title></head><body data-page-id="183"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Drawing WCK Graphics in a PIL Image&nbsp;Memory</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">December 7, 2003 | Fredrik Lundh</p><p>This class implements <a href="http://www.effbot.org/zone/wck-api.htm#DrawInterface-class">a WCK-style drawing
interface</a> on top of <a href="/tag/PIL.Image">a PIL Image memory</a>.</p><p>A similar module will most likely be added to a future version of PIL.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide"><pre class="python wide">
<span class="pykeyword">from</span> PIL <span class="pykeyword">import</span> ImageColor, ImageDraw, ImagePath

<span class="pykeyword">class</span> <span class="pyclass">Pen</span>:
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, color, width=1):
        self.color = ImageColor.getrgb(color)
        self.width = width

<span class="pykeyword">class</span> <span class="pyclass">Brush</span>:
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, color):
        self.color = ImageColor.getrgb(color)

<span class="pykeyword">class</span> <span class="pyclass">SimpleDraw</span>:

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, image):
        self.draw = ImageDraw.Draw(image)
        self.transform = None

    <span class="pykeyword">def</span> <span class="pyfunction">render</span>(self, op, xy, pen, brush):
        <span class="pycomment"># handle color arguments</span>
        outline = fill = None
        <span class="pykeyword">if</span> isinstance(pen, Pen):
            outline = pen.color
        <span class="pykeyword">elif</span> isinstance(brush, Pen):
            outline = brush.color
        <span class="pykeyword">if</span> isinstance(brush, Brush):
            fill = brush.color
        <span class="pykeyword">elif</span> isinstance(pen, Brush):
            fill = pen.color
        <span class="pycomment"># handle transformation</span>
        <span class="pykeyword">if</span> self.transform:
            xy = ImagePath.Path(xy)
            xy.transform(self.transform)
        <span class="pycomment"># render the item</span>
        <span class="pykeyword">if</span> op == <span class="pystring">"line"</span>:
            self.draw.line(xy, fill=outline)
        <span class="pykeyword">else</span>:
            getattr(self.draw, op)(xy, fill=fill, outline=outline)

    <span class="pykeyword">def</span> <span class="pyfunction">settransform</span>(self, (xoffset, yoffset)):
        self.transform = (1, 0, xoffset, 0, 1, yoffset)

    <span class="pykeyword">def</span> <span class="pyfunction">line</span>(self, xy, pen=None):
        self.render(<span class="pystring">"line"</span>, xy, pen, None)

    <span class="pykeyword">def</span> <span class="pyfunction">rectangle</span>(self, xy, pen=None, brush=None):
        self.render(<span class="pystring">"rectangle"</span>, xy, pen, brush)

    <span class="pykeyword">def</span> <span class="pyfunction">ellipse</span>(self, xy, pen=None, brush=None):
        self.render(<span class="pystring">"ellipse"</span>, xy, pen, brush)

    <span class="pykeyword">def</span> <span class="pyfunction">polygon</span>(self, xy, pen=None, brush=None):
        self.render(<span class="pystring">"polygon"</span>, xy, pen, brush)</pre></div></div><div class="yui-ge"><div class="yui-u first"><h3>Notes:</h3><p>The PIL drawing layer doesn&#8217;t support wide lines.</p><p>Text support is not included in this example; adding that should
be straightforward.</p><p>The <b>settransform</b> method only supports translation.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
