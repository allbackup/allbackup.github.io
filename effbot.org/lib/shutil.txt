
@@module shutil

<h1>shutil&#8212;High-level file operations</h1>

<p>The {@link shutil} module offers a number of high-level operations on
files and collections of files. In particular, functions are provided
which support file copying and removal.

<p>Caveat: On MacOS, the resource fork and other metadata are not used.
For file copies, this means that resources will be lost and file type
and creator codes will not be correct.

@@function copyfile(src, dst)

<p>Copy the contents of the file named {@var src} to a file named {@var
dst}. The destination location must be writable; otherwise, an {@link
exceptions.IOError} exception will be raised. If {@var dst} already
exists, it will be replaced. Special files such as character or block
devices and pipes cannot be copied with this function. {@var src} and
{@var dst} are path names given as strings.

@@function copyfileobj(fsrc, fdst[, length])

<p>Copy the contents of the file-like object {@var fsrc} to the
file-like object {@var fdst}. The integer {@var length}, if given, is
the buffer size. In particular, a negative {@var length} value means to
copy the data without looping over the source data in chunks; by default
the data is read in chunks to avoid uncontrolled memory consumption.

@@function copymode(src, dst)

<p>Copy the permission bits from {@var src} to {@var dst}. The file
contents, owner, and group are unaffected. {@var src} and {@var dst} are
path names given as strings.

@@function copystat(src, dst)

<p>Copy the permission bits, last access time, and last modification
time from {@var src} to {@var dst}. The file contents, owner, and group
are unaffected. {@var src} and {@var dst} are path names given as
strings.

@@function copy(src, dst)

<p>Copy the file {@var src} to the file or directory {@var dst}. If
{@var dst} is a directory, a file with the same basename as {@var src}
is created (or overwritten) in the directory specified. Permission bits
are copied. {@var src} and {@var dst} are path names given as strings.

@@function copy2(src, dst)

<p>Similar to {@link copy}, but last access time and last modification
time are copied as well. This is similar to the Unix command cp -p.

@@function copytree(src, dst[, symlinks])

<p>Recursively copy an entire directory tree rooted at {@var src}. The
destination directory, named by {@var dst}, must not already exist; it
will be created. Individual files are copied using {@link copy2}. If
{@var symlinks} is true, symbolic links in the source tree are
represented as symbolic links in the new tree; if false or omitted, the
contents of the linked files are copied to the new tree. If exception(s)
occur, an Error is raised with a list of reasons.

<p>The source code for this should be considered an example rather than
a tool.
<blockquote>
@since Changed in version 2.3:
Error is raised if any exceptions occur during copying, rather than
printing a message. <br />
</blockquote>

@@function rmtree(path[, ignore_errors[, onerror]])

<p>Delete an entire directory tree. If {@var ignore_errors} is true,
errors resulting from failed removals will be ignored; if false or
omitted, such errors are handled by calling a handler specified by {@var
onerror} or, if that is omitted, they raise an exception.

<p>If {@var onerror} is provided, it must be a callable that accepts
three parameters: {@var function}, {@var path}, and {@var excinfo}. The
first parameter, {@var function}, is the function which raised the
exception; it will be {@link os.listdir}, {@link os.remove} or {@link
os.rmdir}. The second parameter, {@var path}, will be the path name
passed to {@var function}. The third parameter, {@var excinfo}, will be
the exception information return by {@link sys.exc_info}. Exceptions
raised by {@var onerror} will not be caught.

@@function move(src, dst)

<p>Recursively move a file or directory to another location.

<p>If the destination is on our current filesystem, then simply use
rename. Otherwise, copy src to the dst and then remove src.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@exception Error

<p>This exception collects exceptions that raised during a mult-file
operation. For {@link copytree}, the exception argument is a list of
3-tuples ({@var srcname}, {@var dstname}, {@var exception}).
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@text 

<h2>Example</h2>

<p>This example is the implementation of the {@link copytree} function,
described above, with the docstring omitted. It demonstrates many of the
other functions provided by this module.

<pre>
def copytree(src, dst, symlinks=0):
    names = os.listdir(src)
    os.mkdir(dst)
    for name in names:
        srcname = os.path.join(src, name)
        dstname = os.path.join(dst, name)
        try:
            if symlinks and os.path.islink(srcname):
                linkto = os.readlink(srcname)
                os.symlink(linkto, dstname)
            elif os.path.isdir(srcname):
                copytree(srcname, dstname, symlinks)
            else:
                copy2(srcname, dstname)
        except (IOError, os.error), why:
            print "Can't copy %s to %s: %s" % (`srcname`, `dstname`, str(why))
</pre>

