<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>More Control Flow&nbsp;Tools</title> <script type="text/javascript">effbot_page_id=1913;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles

now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">More Control Flow&nbsp;Tools</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p>COMMENT: <a href="http://docs.python.org/tut/node6.html">Original Source</a></p><p>Besides the <a href="/pyref/while.htm"><strong>while</strong></a> statement just introduced, Python provides
the usual control flow statements known from other languages, with
some twists.</p><h2 id="the-if-statement">The if Statement&#160;<a class="nav" href="#the-if-statement" title="bookmark!">#</a></h2><p>Perhaps the most well-known statement type is the <a href="/pyref/if.htm"><strong>if</strong></a>
statement. For example:</p><pre><code>&gt;&gt;&gt; x = int(raw_input("Please enter an integer: ")) 
Please enter an integer: 5
&gt;&gt;&gt; if x &lt; 0:
...      x = 0
...      print 'Negative changed to zero'
... elif x == 0:
...      print 'Zero'
... elif 0 &lt; x and x &lt; 2:
...      print 'Single'
... else:
...      print 'More'
...
More
</code></pre><p>Notice that it is not required to surround the condition part,
i.e. <strong><code>x &lt; 0</code></strong>, with parentheses.  Also, Python uses plain words for
the boolean operators so you would type <strong><code>and</code></strong> instead of <strong><code>&amp;&amp;</code></strong>,
<strong><code>or</code></strong> instead of <strong><code>||</code></strong> and <strong><code>not</code></strong> for <strong><code>!</code></strong>.</p><p>There can be zero or more <a href="/pyref/elif.htm"><strong>elif</strong></a> parts, and the <a href="/pyref/else.htm"><strong>else</strong></a>
part is optional. The keyword <a href="/pyref/elif.htm"><strong>elif</strong></a> is short for
<strong>else if</strong>, and is useful to avoid excessive indentation. An
<strong>if &#8230; elif &#8230; elif &#8230;</strong> sequence is a substitute for the
<strong>switch</strong> or <strong>case</strong> statements found in other languages.</p><h2 id="the-for-statement">The for Statement&#160;<a class="nav" href="#the-for-statement" title="bookmark!">#</a></h2><p>The <a href="/pyref/for.htm"><strong>for</strong></a> statement in Python differs a bit from what you may
be used to in C or Pascal. Rather than always iterating over an
arithmetic progression of numbers (like in Pascal), or giving the user
the ability to define both the iteration step and halting condition
(as C), Python&#8217;s <a href="/pyref/for.htm"><strong>for</strong></a> statement iterates over the items of
any sequence (a list or a string), in the order that they appear in
the sequence. For example:</p><pre><code>&gt;&gt;&gt; # Measure some strings:
... a = ['cat', 'window', 'defenestrate']
&gt;&gt;&gt; for x in a:
...     print x, len(x)
... 
cat 3
window 6
defenestrate 12
</code></pre><p>The <a href="/pyref/for.htm"><strong>for</strong></a> loop maintains an internal loop variable, and you
may get unexpected results if you try to modify the sequence being
iterated over in the loop (this can only happen for mutable sequence
types, such as lists).  To safely modify the list you are iterating
over (for example, to duplicate selected items), you must iterate over
a copy. The slice notation makes this particularly convenient:</p><pre><code>&gt;&gt;&gt; for x in a[:]: # make a slice copy of the entire list
...    if len(x) &gt; 6: a.insert(0, x)
... 
&gt;&gt;&gt; a
['defenestrate', 'cat', 'window', 'defenestrate']
</code></pre><h2 id="the-range-function">The range() Function&#160;<a class="nav" href="#the-range-function" title="bookmark!">#</a></h2><p>If you do need to iterate over a sequence of numbers, the built-in
function <a href="/pyref/range.htm"><strong>range</strong></a> comes in handy. It generates lists containing
arithmetic progressions:</p><pre class="python">&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</pre><p>The given end point is never part of the generated list; <code>range(10)</code>
generates a list of 10 values, the legal indices for items of a
sequence of length 10. It is possible to let the range start at
another number, or to specify a different increment (even negative;
sometimes this is called the <strong><code>step</code></strong>):</p><pre class="python">&gt;&gt;&gt; range(5, 10)
[5, 6, 7, 8, 9]
&gt;&gt;&gt; range(0, 10, 3)
[0, 3, 6, 9]
&gt;&gt;&gt; range(-10, -100, -30)
[-10, -40, -70]</pre><h2 id="the-enumerate-function">The enumerate() Function&#160;<a class="nav" href="#the-enumerate-function" title="bookmark!">#</a></h2><p>To iterate over the indices of a sequence, use <a href="/pyref/enumerate.htm"><strong>enumerate</strong></a> as
follows:</p><pre><code>&gt;&gt;&gt; a = ['Mary', 'had', 'a', 'little', 'lamb']
&gt;&gt;&gt; for i, item in enumerate(a):
...     print i, item
...
0 Mary
1 had
2 a
3 little
4 lamb
</code></pre><h2 id="the-break-and-continue-statements">The break and continue Statements&#160;<a class="nav" href="#the-break-and-continue-statements" title="bookmark!">#</a></h2><p>The <a href="/pyref/break.htm"><strong>break</strong></a> statement, like in C, breaks out of the smallest
enclosing <a href="/pyref/for.htm"><strong>for</strong></a> or <a href="/pyref/while.htm"><strong>while</strong></a> loop.</p><p>The <a href="/pyref/continue.htm"><strong>continue</strong></a> statement, also borrowed from C, continues with
the next iteration of the loop.</p><p>Loop statements may have an <a href="/pyref/else.htm"><strong>else</strong></a> clause; it is executed when
the loop terminates through exhaustion of the list (with <a href="/pyref/for.htm"><strong>for</strong></a>) or when the condition becomes false (with <a href="/pyref/while.htm"><strong>while</strong></a>), but
not when the loop is terminated by a <a href="/pyref/break.htm"><strong>break</strong></a> statement. This
is exemplified by the following loop, which searches for prime
numbers:</p><pre><code>&gt;&gt;&gt; for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print n, 'equals', x, '*', n/x
...             break
...     else:
...         # loop fell through without finding a factor
...         print n, 'is a prime number'
... 
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
</code></pre><h2 id="the-pass-statement">The pass Statement&#160;<a class="nav" href="#the-pass-statement" title="bookmark!">#</a></h2><p>The <a href="/pyref/pass.htm"><strong>pass</strong></a> statement does nothing. It can be used when a
statement is required syntactically but the program requires no
action. For example:</p><pre><code>&gt;&gt;&gt; while True:
...       pass # Busy-wait for keyboard interrupt
...
</code></pre><h2 id="defining-functions">Defining Functions&#160;<a class="nav" href="#defining-functions" title="bookmark!">#</a></h2><p>Earlier, we saw how you could use the <a href="/pyref/while.htm"><strong>while</strong></a>-statement to
calculate numbers from the Fibonacci series.  If you want to repeat
that operation, you can put the code in a function:</p><pre><code>&gt;&gt;&gt; def fib(n):    # write Fibonacci series up to n
...     """Print a Fibonacci series up to n."""
...     a, b = 0, 1
...     while b &lt; n:
...         print b,
...         a, b = b, a+b
... 
&gt;&gt;&gt; # Now call the function we just defined:
... fib(2000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597
</code></pre><p>The keyword <a href="/pyref/def.htm"><strong>def</strong></a> introduces a function <em>definition</em>. It must
be followed by the function name and a list of formal parameter names,
in parentheses. The statements that form the body of the function
start at the next line, and must be indented. The first statement of
the function body can optionally be a string literal; this string
literal is the function&#8217;s documentation string, or <em>docstring</em>.</p><p>There are tools which use docstrings to automatically produce online
or printed documentation, or to let the user interactively browse
through code; it&#8217;s good practice to include docstrings in code that
you write, so try to make a habit of it.</p><p>The <em>execution</em> of a function creates a new symbol table used to hold
the local variables of the function. More precisely, all variable
assignments in a function store the value in the local symbol table;
whereas variable references first look in the local symbol table, then
in the global symbol table, and then in the table of built-in
names. Thus, global variables cannot be directly assigned a value
within a function (unless named in a global statement), although they
may be referenced.</p><p>The actual parameter values (arguments) used in the function call are
added to the local symbol table when the function is called; thus,
arguments are passed using <em>call by value</em> (where the <em>value</em> is
always an object <em>reference</em>, not the value of the object).[4.1][28]
When a function calls another function, a new local symbol table is
created for that call.</p><p>A function definition adds the function name to the current symbol
table. The value of the function name is a function object, an object
that can be called by other code.  Like all other objects, function
objects can be assigned to another variable, which can then also be
used to call the function.  This serves as a general renaming
mechanism:</p><pre class="python">&gt;&gt;&gt; fib
&lt;function fib at 10042ed0&gt;
&gt;&gt;&gt; f = fib
&gt;&gt;&gt; f(100)
1 1 2 3 5 8 13 21 34 55 89</pre><p>You can also store function objects in lists and other containers, and
pass them as arguments to other functions.</p><p>You might object that <code>fib</code> is not a function but a procedure. In
Python, like in C, procedures are just functions that don&#8217;t return a
value. In fact, technically speaking, procedures do return a value,
albeit a rather boring one. This value is called <a href="/pyref/None.htm"><strong>None</strong></a> (it&#8217;s
a built-in name). Writing the value <a href="/pyref/None.htm"><strong>None</strong></a> is normally
suppressed by the interpreter if it would be the only value
written. You can print it out if you want:</p><pre class="python">&gt;&gt;&gt; <span class="pykeyword">print</span> fib(0)
None</pre><p>It is simple to write a function that returns a list of the numbers of
the Fibonacci series, instead of printing it:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>&gt;&gt;&gt; def fib2(n): # return Fibonacci series up to n
...     """Return a list containing the Fibonacci series up to n."""
...     result = []
...     a, b = 0, 1
...     while b &lt; n:
...         result.append(b)    # add to list; see below
...         a, b = b, a+b
...     return result
... 
&gt;&gt;&gt; f100 = fib2(100)    # call it
&gt;&gt;&gt; f100                # write the result
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>This example, as usual, demonstrates some new Python features:</p><ul><li><p>The <a href="/pyref/return.htm"><strong>return</strong></a> statement returns with a value from a function. <strong><code>return</code></strong> without an expression argument returns <strong><code>None</code></strong>. Falling off the end of a procedure also returns <strong><code>None</code></strong>.</p></li><li><p>The statement <code>result.append(b)</code> calls a <em>method</em> of the list object <code>result</code>. A method is a function that <em>belongs</em> to an object and is named <code>obj.methodname</code>, where <code>obj</code> is some object (this may be an expression), and <code>methodname</code> is the name of a method that is defined by the object&#8217;s type. Different types define different methods. Methods of different types may have the same name without causing ambiguity. (It is possible to define your own object types and methods, using <em>classes</em>, as discussed later in this tutorial.) The method append() shown in the example is defined for list objects; it adds a new element at the end of the list. In this example it is equivalent to <code>"result = result + [b]"</code>, but more efficient.</p></li></ul><h2 id="more-on-defining-functions">More on Defining Functions&#160;<a class="nav" href="#more-on-defining-functions" title="bookmark!">#</a></h2><p>It is also possible to define functions with a variable number of
arguments. There are three forms, which can be combined.</p><h3 id="default-argument-values">Default Argument Values&#160;<a class="nav" href="#default-argument-values" title="bookmark!">#</a></h3><p>The most useful form is to specify a default value for one or more
arguments. This creates a function that can be called with fewer
arguments than it is defined to allow. For example:</p><pre class="python"><span class="pykeyword">def</span> <span class="pyfunction">ask_ok</span>(prompt, retries=4, complaint=<span class="pystring">'Yes or no, please!'</span>):
    <span class="pykeyword">while</span> True:
        ok = raw_input(prompt)
        <span class="pykeyword">if</span> ok <span class="pykeyword">in</span> (<span class="pystring">'y'</span>, <span class="pystring">'ye'</span>, <span class="pystring">'yes'</span>): <span class="pykeyword">return</span> True
        <span class="pykeyword">if</span> ok <span class="pykeyword">in</span> (<span class="pystring">'n'</span>, <span class="pystring">'no'</span>, <span class="pystring">'nop'</span>, <span class="pystring">'nope'</span>): <span class="pykeyword">return</span> False
        retries = retries - 1
        <span class="pykeyword">if</span> retries &lt; 0:
            <span class="pykeyword">raise</span> IOError(<span class="pystring">'refusenik user'</span>)
        <span class="pykeyword">print</span> complaint</pre><p>This function can be called either like this: `ask<em>ok(&#8216;Do you really
want to quit?&#8217;)<code>or like this:</code>ask</em>ok(&#8216;OK to overwrite the file?&#8217;,
2)`.</p><p>This example also introduces the <a href="/pyref/in.htm"><strong>in</strong></a> operator. This tests
whether or not a sequence contains a certain value.</p><p>The default values are evaluated at the point of function definition
in the <em>defining</em> scope, so that</p><pre class="python">i = 5

<span class="pykeyword">def</span> <span class="pyfunction">f</span>(arg=i):
    <span class="pykeyword">print</span> arg

i = 6
f()</pre><p>will print <code>5</code>.</p><p><strong>Important warning:</strong> The default value is evaluated only once, when
the function object is created. This makes a difference when the
default is a mutable object such as a <code>list</code>, <code>dictionary</code>, or
instances of most classes. For example, the following function
accumulates the arguments passed to it on subsequent calls:</p><pre class="python"><span class="pykeyword">def</span> <span class="pyfunction">f</span>(a, L=[]):
    L.append(a)
    <span class="pykeyword">return</span> L

<span class="pykeyword">print</span> f(1)
<span class="pykeyword">print</span> f(2)
<span class="pykeyword">print</span> f(3)</pre><p>This will print</p><pre class="python">[1]
[1, 2]
[1, 2, 3]</pre><p>If you don&#8217;t want the default to be shared between subsequent calls,
you can write the function like this instead:</p><pre class="python"><span class="pykeyword">def</span> <span class="pyfunction">f</span>(a, L=None):
    <span class="pykeyword">if</span> L <span class="pykeyword">is</span> None:
        L = []
    L.append(a)
    <span class="pykeyword">return</span> L</pre><h3 id="keyword-arguments">Keyword Arguments&#160;<a class="nav" href="#keyword-arguments" title="bookmark!">#</a></h3><p>Functions can also be called using keyword arguments of the form
<code>"keyword = value"</code>. For instance, the following function:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide"><span class="pykeyword">def</span> <span class="pyfunction">parrot</span>(voltage, state=<span class="pystring">'a stiff'</span>, action=<span class="pystring">'voom'</span>, type=<span class="pystring">'Norwegian Blue'</span>):
    <span class="pykeyword">print</span> <span class="pystring">"-- This parrot wouldn't"</span>, action,
    <span class="pykeyword">print</span> <span class="pystring">"if you put"</span>, voltage, <span class="pystring">"volts through it."</span>
    <span class="pykeyword">print</span> <span class="pystring">"-- Lovely plumage, the"</span>, type
    <span class="pykeyword">print</span> <span class="pystring">"-- It's"</span>, state, <span class="pystring">"!"</span></pre></div><div class="yui-ge"><div class="yui-u first"><p>could be called in any of the following ways:</p><pre class="python">parrot(1000)
parrot(action = <span class="pystring">'VOOOOOM'</span>, voltage = 1000000)
parrot(<span class="pystring">'a thousand'</span>, state = <span class="pystring">'pushing up the daisies'</span>)
parrot(<span class="pystring">'a million'</span>, <span class="pystring">'bereft of life'</span>, <span class="pystring">'jump'</span>)</pre><p>but the following calls would all be invalid:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>parrot()                     # required argument missing
parrot(voltage=5.0, 'dead')  # non-keyword argument following keyword
parrot(110, voltage=220)     # duplicate value for argument
parrot(actor='John Cleese')  # unknown keyword
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>In general, an argument list must have any positional arguments
followed by any keyword arguments, where the keywords must be chosen
from the formal parameter names. It&#8217;s not important whether a formal
parameter has a default value or not. No argument may receive a value
more than once &#8212; formal parameter names corresponding to positional
arguments cannot be used as keywords in the same calls. Here&#8217;s an
example that fails due to this restriction:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>&gt;&gt;&gt; def function(a):
...     pass
... 
&gt;&gt;&gt; function(0, a=0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
TypeError: function() got multiple values for keyword argument 'a'
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>When a final formal parameter of the form <code>**name</code> is present, it
receives a <a href="http://docs.python.org/lib/typesmapping.html">dictionary</a>
containing all keyword arguments except for those corresponding to a
formal parameter. This may be combined with a formal parameter of the
form <code>*name</code> (described in the next subsection) which receives a tuple
containing the positional arguments beyond the formal parameter
list. (<code>*name</code> must occur before <code>**name</code>.) For example, if we define
a function like this:</p><pre class="python"><span class="pykeyword">def</span> <span class="pyfunction">cheeseshop</span>(kind, *arguments, **keywords):
    <span class="pykeyword">print</span> <span class="pystring">"-- Do you have any"</span>, kind, <span class="pystring">'?'</span>
    <span class="pykeyword">print</span> <span class="pystring">"-- I'm sorry, we're all out of"</span>, kind
    <span class="pykeyword">for</span> arg <span class="pykeyword">in</span> arguments: <span class="pykeyword">print</span> arg
    <span class="pykeyword">print</span> <span class="pystring">'-'</span>*40
    keys = keywords.keys()
    keys.sort()
    <span class="pykeyword">for</span> kw <span class="pykeyword">in</span> keys: <span class="pykeyword">print</span> kw, <span class="pystring">':'</span>, keywords[kw]</pre><p>It could be called like this:</p><pre class="python">cheeseshop(<span class="pystring">'Limburger'</span>, <span class="pystring">"It's very runny, sir."</span>,
           <span class="pystring">"It's really very, VERY runny, sir."</span>,
           client=<span class="pystring">'John Cleese'</span>,
           shopkeeper=<span class="pystring">'Michael Palin'</span>,
           sketch=<span class="pystring">'Cheese Shop Sketch'</span>)</pre><p>and of course it would print:</p><pre><code>-- Do you have any Limburger ?
-- I'm sorry, we're all out of Limburger
It's very runny, sir.
It's really very, VERY runny, sir.
----------------------------------------
client : John Cleese
shopkeeper : Michael Palin
sketch : Cheese Shop Sketch
</code></pre><p>Note that the <a href="/pyref/list.sort.htm"><strong>sort</strong></a> method of the list of keyword
argument names is called before printing the contents of the
<code>keywords</code> dictionary; if this is not done, the order in which the
arguments are printed is undefined.</p><h3 id="arbitrary-argument-lists">Arbitrary Argument Lists&#160;<a class="nav" href="#arbitrary-argument-lists" title="bookmark!">#</a></h3><p>Finally, the least frequently used option is to specify that a
function can be called with an arbitrary number of arguments. These
arguments will be wrapped up in a tuple. Before the variable number of
arguments, zero or more normal arguments may occur.</p><pre class="python"><span class="pykeyword">def</span> <span class="pyfunction">fprintf</span>(file, format, *args):
    file.write(format % args)</pre><h3 id="unpacking-argument-lists">Unpacking Argument Lists&#160;<a class="nav" href="#unpacking-argument-lists" title="bookmark!">#</a></h3><p>The reverse situation occurs when the arguments are already in a list
or tuple but need to be unpacked for a function call requiring
separate positional arguments. For instance, the built-in <a href="/pyref/range.htm"><strong>range</strong></a> function expects separate start and stop arguments. If they
are not available separately, write the function call with the
<code>*</code>-operator to unpack the arguments out of a list or tuple:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">&gt;&gt;&gt; range(3, 6)             <span class="pycomment"># normal call with separate arguments</span>
[3, 4, 5]
&gt;&gt;&gt; args = [3, 6]
&gt;&gt;&gt; range(*args)            <span class="pycomment"># call with arguments unpacked from a list</span>
[3, 4, 5]</pre></div><div class="yui-ge"><div class="yui-u first"><h3 id="lambda-forms">Lambda Forms&#160;<a class="nav" href="#lambda-forms" title="bookmark!">#</a></h3><p>By popular demand, a few features commonly found in functional
programming languages like Lisp have been added to Python. With the
lambda keyword, small anonymous functions can be created. Here&#8217;s a
function that returns the sum of its two arguments: &#8220;lambda a, b:
a+b&#8221;. Lambda forms can be used wherever function objects are
required. They are syntactically restricted to a single
expression. Semantically, they are just syntactic sugar for a normal
function definition. Like nested function definitions, lambda forms
can reference variables from the containing scope:</p><pre><code>&gt;&gt;&gt; def make_incrementor(n):
...     return lambda x: x + n
...
&gt;&gt;&gt; f = make_incrementor(42)
&gt;&gt;&gt; f(0)
42
&gt;&gt;&gt; f(1)
43
</code></pre><h3 id="documentation-strings">Documentation Strings&#160;<a class="nav" href="#documentation-strings" title="bookmark!">#</a></h3><p>There are emerging conventions about the content and formatting of
documentation strings.</p><p>The first line should always be a short, concise summary of the
object&#8217;s purpose. For brevity, it should not explicitly state the
object&#8217;s name or type, since these are available by other means
(except if the name happens to be a verb describing a function&#8217;s
operation). This line should begin with a capital letter and end with
a period.</p><p>If there are more lines in the documentation string, the second line
should be blank, visually separating the summary from the rest of the
description. The following lines should be one or more paragraphs
describing the object&#8217;s calling conventions, its side effects, etc.</p><p>The Python parser does not strip indentation from multi-line string
literals in Python, so tools that process documentation have to strip
indentation if desired. This is done using the following
convention. The first non-blank line <em>after</em> the first line of the
string determines the amount of indentation for the entire
documentation string. (We can&#8217;t use the first line since it is
generally adjacent to the string&#8217;s opening quotes so its indentation
is not apparent in the string literal.) Whitespace <q>equivalent</q>
to this indentation is then stripped from the start of all lines of
the string. Lines that are indented less should not occur, but if they
occur all their leading whitespace should be stripped. Equivalence of
whitespace should be tested after expansion of tabs (to 8 spaces,
normally).</p><p>Here is an example of a multi-line docstring:</p><pre><code>&gt;&gt;&gt; def my_function():
...     """Do nothing, but document it.
... 
...     No, really, it doesn't do anything.
...     """
...     pass
... 
&gt;&gt;&gt; print my_function.__doc__
Do nothing, but document it.

    No, really, it doesn't do anything.
</code></pre><h3 id="decorators">Decorators&#160;<a class="nav" href="#decorators" title="bookmark!">#</a></h3><p>As of Python 2.4, decorator expressions are now supported. A decorator
expression is simply syntactic sugar for the following:</p><pre><code>def foo():
    do some stuff
foo = bar(foo)
</code></pre><p>where <code>bar</code> is a function that was defined somewhere else.</p><p>In Python2.4, you could instead write:</p><pre><code>@bar
def foo():
    do some stuff
</code></pre><p>The immediate use case for decorator expressions is to make it easier
to see when a <a href="/pyref/classmethod.htm"><strong>classmethod</strong></a> or <a href="/pyref/staticmethod.htm"><strong>staticmethod</strong></a> is being
defined:</p><pre class="python"><span class="pykeyword">class</span> <span class="pyclass">A</span>(object):
    @<span class="pydecorator">staticmethod</span>
    <span class="pykeyword">def</span> <span class="pyfunction">some_static_method</span>(cls):
        ... do some stuff

    @<span class="pydecorator">classmethod</span>
    <span class="pykeyword">def</span> <span class="pyfunction">some_class_method</span>(cls):
        ... do some stuff</pre><p>Of course, you&#8217;re allowed to define your own decorators.</p><p>There are a variety of reasons you&#8217;d want to define your own
decorators, but we&#8217;ll just give one exceedingly simple use case here:</p><pre class="python"><span class="pykeyword">def</span> <span class="pyfunction">plus_ten_wrapper</span>(f):
    <span class="pykeyword">def</span> <span class="pyfunction">anon</span>(*args, **kargs):
        <span class="pykeyword">return</span> f(*args, **kargs) + 10
    <span class="pykeyword">return</span> anon</pre><p>So now we&#8217;ve defined a decorator named <code>plus_ten_wrapper</code> that takes a
single function <code>f</code> as an argument, and creates a new function called
<code>anon</code>. This new function <code>anon</code> returns the result of <code>f</code> added with
10.</p><p>Now to use this decorator, we do:</p><pre class="python">@<span class="pydecorator">plus_ten_wrapper</span>
<span class="pykeyword">def</span> <span class="pyfunction">foo</span>(a,b,c=2):
    <span class="pykeyword">return</span> a + b + c</pre><p>And what happens if we now use our <code>foo</code> function inside of the interpreter?:</p><pre class="python">&gt;&gt;&gt; foo(1,5,c=9)
25</pre><p>It&#8217;s important to note what&#8217;s going on here, in case you can&#8217;t see
it. After decorating <code>foo</code>, the name <code>foo</code> actually points to an
instance of the <code>anon</code> function. So whenever you call <code>foo</code>, it will
actually call the <code>anon</code> that was defined inside <code>plus_ten_wrapper</code>.
But <code>anon</code> has a reference to the <em>original</em> <code>f</code>, which is why
everything works out.</p><hr /><h4>Footnotes</h4><p>&#8230; object).[4.1]
     Actually, <em>call by object reference</em> would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list).</p><hr /></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class='comment'>
<p><b>Comment:</b></p>
<p>
Alright, I went ahead and added a decorators section anyway. It always bugged me that there are no good examples of decorators anywhere in the official Python docs. And the example given in the reference manual isn't the most helpful to a newcomer.

Jay P.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/3t2v/_comments/3tcl'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
Would this be a good place to talk about decorators? It would be best to talk about them at the same time as functions, but the concept of passing functions as arguments might be a bit complex this early in the game.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/3t2v'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
The "else" clause needs to be aligned with the "for x" statement, not the "if" statement.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/3tdd/_comments/3trz'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
Running the code listed in the "Break" section under PythonWin produces:

    3 is a prime number
    4 equals 2 * 2
    5 is a prime number
    5 is a prime number
    5 is a prime number
    6 equals 2 * 3
    7 is a prime number
    7 is a prime number
    7 is a prime number
    7 is a prime number
    7 is a prime number
    8 equals 2 * 4
    9 is a prime number
    9 equals 3 * 3 

How come?</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/3tdd'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
A "debugging decorator" is definitely more _useful_. I've always had pretty good success explaining decorators to people with adding functions, which is why I used it as the example.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/44dx/_comments/44mg/_comments/44tq/_comments/452k'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
I agree that the decorators should be moved to a later place, and I also think the example could be simplified (an adding function is a bit too abstract for me); how about a "debugging decorator" instead, which simply prints the arguments and return values for a decorated function?</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/44dx/_comments/44mg/_comments/44tq'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
I agree, especially since decorators do so many "advanced" things (rebinding names, taking functions as arguments, dynamically defining inner functions, etc.)

"Advanced Function Features" would also be a good place for generators, instead of "Classes", where they currently inexplicably live.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/44dx/_comments/44mg'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
Decorators are too much at this stage IMO. It is important not to overwhelm the reader. The reader hasn't even seen exceptions, classes and modules, which are much more commonly used than decorators. By the way, the docorator example goes on to use 'classmethod' , 'staticmethod' etc, which the reader has probably no clue about.

If we do want decorators in the tutorial, there can be a section later in the tutorial titled "Advanced Function Features", which first shows functions being passed around as other objects, closures and then decorators.

This is a introductory tutorial - it is important to build new concepts on top of existing ones. New terminology should always be defined at the place it is first used. Occasionally it may be okay to break this rule if the new terminology is defined soon after it is used.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/44dx'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
Why is "Arbitrary Argument Lists" in here. The `def f(*name)` syntax is describe just above that section.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/44k5'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
1. I think it'd be better to keep what's there, and then after show the Pythonic way of doing it. It's nice to remind people that you can in fact index lists, if you want, but usually you don't have to

2. Well, xrange() is funny because it's one of those rare iterators that don't just return `self` when `__iter__`() is called. I think getting into the details of that would be too much now, but I do think it's worth it to mention xrange() here.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/457u/_comments/45lo'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
(_effbot: fixed markup to work around infogami HTML generation bug_)

Here are my current suggestions for updates to this page, I'd like some feedback:

1. In the range() section the example for the following is (Pythonically) incorrect: "To iterate over the indices of a sequence, combine range() and len() as follows:"
   It should really be using enumerate(). range(len(x)) is only useful if you don't want to access elements of x, but just want the indices. Besides enumerate() is already described in the previous chapter under "Looping Techniques". I think this entire paragraph (i.e. last para of "The range() function" section) should be removed.

2. In "The range() function", should we add somethign about xrange()? I was thinking it is useful to introduce the concept of a generator, efficiently producing objects as you need them. However, I discovered xrange() returns an object of type [type 'xrange'] which is different from the [type 'generator'] created by a function containing yield. I would not want to add incorrect info.

3. The flow of matter regarding \*\*kw and \*args is not clear to me. I suggest creating a new section "Catch-all arguments" after "Keyword Arguments". The following will be removed: "Arbitrary Argument Lists" and last few paras of "Keyword Arguments" (starting at "When a final...").

   Alternatively, just remove the last few paras of "Keyword Arguments" (starting with "When a final..."). That improves the text quite a bit, but does not include the \*\*kw syntax.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/457u'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
Regarding 3 above, on second reading, the current text is not that bad and can be left as it is.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/45a4'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
I've added a few of the conspicuous features of Python wrt if, elif, else ... that is that you don't use &amp;&amp; or () syntax like C, Java, JS etc..
I'm also wondering if the 'Enter an Integer' part is not a bit too dry... can anyone think of a better example?</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node6.html/_comments/dt2f'>infogami</a></b></p>
</div>
</div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li> <li><b><a href="." title="Go to pytut index page.">::: pytut :::</a></b></li> </ul> <ul><li><b>::: contents</b></li></ul> <ul><li><ul><li><a href="#the-if-statement">The if Statement</a></li><li><a href="#the-for-statement">The for Statement</a></li><li><a href="#the-range-function">The range() Function</a></li><li><a href="#the-enumerate-function">The enumerate() Function</a></li><li><a href="#the-break-and-continue-statements">The break and continue Statements</a></li><li><a href="#the-pass-statement">The pass Statement</a></li><li><a href="#defining-functions">Defining Functions</a></li><li><a href="#more-on-defining-functions">More on Defining Functions</a></li><li><ul><li><a href="#default-argument-values">Default Argument Values</a></li><li><a href="#keyword-arguments">Keyword Arguments</a></li><li><a href="#arbitrary-argument-lists">Arbitrary Argument Lists</a></li><li><a href="#unpacking-argument-lists">Unpacking Argument Lists</a></li><li><a href="#lambda-forms">Lambda Forms</a></li><li><a href="#documentation-strings">Documentation Strings</a></li><li><a href="#decorators">Decorators</a></li></ul></li></ul></li></ul> </div> <!-- menu --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15_grey.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.08s 2009-06-21 14:59:54.128710.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
