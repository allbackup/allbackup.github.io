
@@module codeop

<h1>codeop&#8212;Compile Python code</h1>

<p>The {@link codeop} module provides utilities upon which the Python
read-eval-print loop can be emulated, as is done in the {@link code}
module. As a result, you probably don't want to use the module directly;
if you want to include such a loop in your program you probably want to
use the {@link code} module instead.

<p>There are two parts to this job:
<ol>
<li>
<p>Being able to tell if a line of input completes a Python statement:
in short, telling whether to print `{@code >}>> ' or `{@code ... } '
next.
<li>
<p>Remembering which future statements the user has entered, so
subsequent input can be compiled with these in effect.
</ol>

<p>The {@link codeop} module provides a way of doing each of these
things, and a way of doing them both.

<p>To do just the former:

@@function compile_command(source[, filename[, symbol]])

<p>Tries to compile {@var source}, which should be a string of Python
code and return a code object if {@var source} is valid Python code. In
that case, the filename attribute of the code object will be {@var
filename}, which defaults to {@code '&ltinput>'}. Returns {@link None}
if {@var source} is {@em not} valid Python code, but is a prefix of
valid Python code.

<p>If there is a problem with {@var source}, an exception will be
raised. {@link exceptions.SyntaxError} is raised if there is invalid
Python syntax, and {@link exceptions.OverflowError} or {@link
exceptions.ValueError} if there is an invalid literal.

<p>The {@var symbol} argument determines whether {@var source} is
compiled as a statement ({@code 'single'}, the default) or as an
expression ({@code 'eval'}). Any other value will cause {@link
exceptions.ValueError} to be raised.

<p>Caveat: It is possible (but not likely) that the parser stops parsing
with a successful outcome before reaching the end of the source; in this
case, trailing symbols may be ignored instead of causing an error. For
example, a backslash followed by two newlines may be followed by
arbitrary garbage. This will be fixed once the API for the parser is
better.

@@class Compile()

<p>Instances of this class have {@link __call__} methods identical in
signature to the built-in function {@link compile}, but with the
difference that if the instance compiles program text containing a
{@link __future__} statement, the instance 'remembers' and compiles all
subsequent program texts with the statement in force.

@@class CommandCompiler()

<p>Instances of this class have {@link __call__} methods identical in
signature to {@link compile_command}; the difference is that if the
instance compiles program text containing a {@code __future__}
statement, the instance 'remembers' and compiles all subsequent program
texts with the statement in force.

@@text 

<p>A note on version compatibility: the {@link Compile} and {@link
CommandCompiler} are new in Python 2.2. If you want to enable the
future-tracking features of 2.2 but also retain compatibility with 2.1
and earlier versions of Python you can either write

<pre>
try:
    from codeop import CommandCompiler
    compile_command = CommandCompiler()
    del CommandCompiler
except ImportError:
    from codeop import compile_command
</pre>


<p>which is a low-impact change, but introduces possibly unwanted global
state into your program, or you can write:

<pre>
try:
    from codeop import CommandCompiler
except ImportError:
    def CommandCompiler():
        from codeop import compile_command
        return compile_command
</pre>


<p>and then call {@code CommandCompiler} every time you need a fresh
compiler object.
