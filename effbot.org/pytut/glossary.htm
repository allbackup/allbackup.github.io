<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Appendix D.&nbsp;Glossary</title> <script type="text/javascript">effbot_page_id=1895;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles

now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Appendix D.&nbsp;Glossary</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p>COMMENT: <a href="http://docs.python.org/tut/node18.html">Original Source</a></p><h3 id="h0001">&gt;&gt;&gt;&#160;<a class="nav" href="#h0001" title="bookmark!">#</a></h3><p>The typical Python prompt of the interactive shell.  Often seen for
code examples that can be tried right away in the interpreter.</p><h3 id="h0002">&#8230;&#160;<a class="nav" href="#h0002" title="bookmark!">#</a></h3><p>The typical Python prompt of the interactive shell when entering code
for an indented code block.</p><h3 id="bdfl">BDFL&#160;<a class="nav" href="#bdfl" title="bookmark!">#</a></h3><p>Benevolent Dictator For Life, a.k.a. <a href="http://www.python.org/~guido/">Guido van
Rossum</a>, Python&#8217;s creator.</p><h3 id="byte-code">byte code&#160;<a class="nav" href="#byte-code" title="bookmark!">#</a></h3><p>The internal representation of a Python program in the
interpreter. The byte code is also cached in <code>.pyc</code> and <code>.pyo</code> files
so that executing the same file is faster the second time
(recompilation from source to byte code can be avoided). This
<q>intermediate language</q> is said to run on a <q>virtual
machine</q> that calls the subroutines corresponding to each bytecode.</p><h3 id="classic-class">classic class&#160;<a class="nav" href="#classic-class" title="bookmark!">#</a></h3><p>Any class which does not inherit from <a href="/pyref/object.htm"><strong>object</strong></a>. See <em>new-style
class</em>.</p><h3 id="coercion">coercion&#160;<a class="nav" href="#coercion" title="bookmark!">#</a></h3><p>The implicit conversion of an instance of one type to another during
an operation which involves two arguments of the same type. For
example, <code>int(3.15)</code> converts the floating point number to the integer
<code>3</code>, but in <code>3+4.5</code>, each argument is of a different type (one int,
one float), and both must be converted to the same type before they
can be added or it will raise a <a href="/pyref/TypeError.htm"><strong>TypeError</strong></a>.  Coercion between
two operands can be performed with the <a href="/pyref/coerce.htm"><strong>coerce</strong></a> builtin
function; thus, <code>3+4.5</code> is equivalent to calling
<code>operator.add(*coerce(3, 4.5))</code> and results in `operator.add(3.0,
4.5)`.  Without coercion, all arguments of even compatible types would
have to be normalized to the same value by the programmer, e.g.,
<code>float(3)+4.5</code> rather than just <code>3+4.5</code>.</p><h3 id="complex-number">complex number&#160;<a class="nav" href="#complex-number" title="bookmark!">#</a></h3><p>An extension of the familiar real number system in which all numbers
are expressed as a sum of a real part and an imaginary part.
Imaginary numbers are real multiples of the imaginary unit (the square
root of <code>-1</code>), often written <code>i</code> in mathematics or <code>j</code> in
engineering. Python has builtin support for complex numbers, which are
written with this latter notation; the imaginary part is written with
a <code>j</code> suffix, e.g., <code>3+1j</code>. To get access to complex equivalents of
the <a href="/pyref/math.htm"><strong>math</strong></a> module, use <a href="/pyref/cmath.htm"><strong>cmath</strong></a>. Use of complex numbers
is a fairly advanced mathematical feature. If you&#8217;re not aware of a
need for them, it&#8217;s almost certain you can safely ignore them.</p><h3 id="descriptor">descriptor&#160;<a class="nav" href="#descriptor" title="bookmark!">#</a></h3><p>Any <em>new-style</em> object that defines the methods <a href="/pyref/__get__.htm"><strong>__get__</strong></a>,
<a href="/pyref/__set__.htm"><strong>__set__</strong></a>, or <a href="/pyref/__delete__.htm"><strong>__delete__</strong></a>.  When a class
attribute is a descriptor, its special binding behavior is triggered
upon attribute lookup.  Normally, writing a.b looks up the object b in
the class dictionary for a, but if b is a descriptor, the defined
method gets called.  Understanding descriptors is a key to a deep
understanding of Python because they are the basis for many features
including functions, methods, properties, class methods, static
methods, and reference to super classes.</p><h3 id="dictionary">dictionary&#160;<a class="nav" href="#dictionary" title="bookmark!">#</a></h3><p>An associative array, where arbitrary keys are mapped to values. The
use of <a href="/pyref/dict.htm"><strong>dict</strong></a> much resembles that for <a href="/pyref/list.htm"><strong>list</strong></a>, but the
keys can be any object with a <a href="/pyref/__hash__.htm"><strong>__hash__</strong></a> function, not
just integers starting from zero.  Known as a hash in Perl.</p><h3 id="duck-typing">duck-typing&#160;<a class="nav" href="#duck-typing" title="bookmark!">#</a></h3><p>Pythonic programming style that determines an object&#8217;s type by
inspection of its method or attribute signature rather than by
explicit relationship to some type object (<q>If it looks like a duck
and quacks like a duck, it must be a duck.</q>) By emphasizing
interfaces rather than specific types, well-designed code improves its
flexibility by allowing polymorphic substitution. Duck-typing avoids
tests using <a href="/pyref/type.htm"><strong>type</strong></a> or <a href="/pyref/isinstance.htm"><strong>isinstance</strong></a>. Instead, it
typically employs <a href="/pyref/hasattr.htm"><strong>hasattr</strong></a> tests or <em>EAFP</em> programming.</p><h3 id="eafp">EAFP&#160;<a class="nav" href="#eafp" title="bookmark!">#</a></h3><p>Easier to ask for forgiveness than permission. This common Python
coding style assumes the existence of valid keys or attributes and
catches exceptions if the assumption proves false.  This clean and fast
style is characterized by the presence of many try and except
statements.  The technique contrasts with the <em>LBYL</em> style that is
common in many other languages such as C.</p><h3 id="__future__">__future__&#160;<a class="nav" href="#__future__" title="bookmark!">#</a></h3><p>A pseudo module which programmers can use to enable new language
features which are not compatible with the current interpreter. For
example, the expression <code>11/4</code> currently evaluates to <code>2</code>. If the
module in which it is executed had enabled <em>true division</em> by
executing:</p><pre class="python"><span class="pykeyword">from</span> __future__ <span class="pykeyword">import</span> division</pre><p>the expression <code>11/4</code> would evaluate to <code>2.75</code>. By importing the
<a href="/pyref/__future__.htm"><strong>__future__</strong></a> module and evaluating its variables, you can
see when a new feature was first added to the language and when it
will become the default:</p><pre class="python">&gt;&gt;&gt; <span class="pykeyword">import</span> __future__
&gt;&gt;&gt; __future__.division
_Feature((2, 2, 0, <span class="pystring">'alpha'</span>, 2), (3, 0, 0, <span class="pystring">'alpha'</span>, 0), 8192)</pre><h3 id="generator">generator&#160;<a class="nav" href="#generator" title="bookmark!">#</a></h3><p>A function that returns an iterator.  It looks like a normal function
except that values are returned to the caller using a <a href="/pyref/yield.htm"><strong>yield</strong></a>
statement instead of a <a href="/pyref/return.htm"><strong>return</strong></a> statement. Generator functions
often contain one or more for or while loops that yield elements back
to the caller. The function execution is stopped at the <a href="/pyref/yield.htm"><strong>yield</strong></a> keyword (returning the result) and is resumed there when the
next element is requested by calling the <a href="/pyref/next.htm"><strong>next</strong></a> method of the
returned iterator. (Note that generators are just syntactic shortforms
for iterators)</p><pre><code>&gt;&gt;&gt; def gen():
...     yield 1
...     yield 2
...     for each in (3,4,5):
...         yield each
... 
&gt;&gt;&gt; for val in gen():
...     print val
... 
1
2
3
4
5
&gt;&gt;&gt; x = gen()
&gt;&gt;&gt; x.next()
1
&gt;&gt;&gt; x.next()
2
&gt;&gt;&gt; x.next()
3
&gt;&gt;&gt; x.next()
4
&gt;&gt;&gt; x.next()
5
&gt;&gt;&gt; x.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
StopIteration
</code></pre><h3 id="generator-expression">generator expression&#160;<a class="nav" href="#generator-expression" title="bookmark!">#</a></h3><p>An expression that returns a generator. It looks like a normal
expression followed by a for expression defining a loop variable,
range, and an optional if expression. The combined expression
generates values for an enclosing function:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">&gt;&gt;&gt; sum(i*i <span class="pykeyword">for</span> i <span class="pykeyword">in</span> range(10))         <span class="pycomment"># sum of squares 0, 1, 4, ... 81</span>
285
&gt;&gt;&gt; x = (i*i <span class="pykeyword">for</span> i <span class="pykeyword">in</span> range(4))
&gt;&gt;&gt; x.next()
0
&gt;&gt;&gt; x.next()
1
&gt;&gt;&gt; x.next()
4
&gt;&gt;&gt; x.next()
9
&gt;&gt;&gt; x.next()
Traceback (most recent call last):
  File <span class="pystring">"&lt;stdin&gt;"</span>, line 1, <span class="pykeyword">in</span> ?
StopIteration</pre></div><div class="yui-ge"><div class="yui-u first"><h3 id="gil">GIL&#160;<a class="nav" href="#gil" title="bookmark!">#</a></h3><p>See <em>global interpreter lock</em>.</p><h3 id="global-interpreter-lock">global interpreter lock&#160;<a class="nav" href="#global-interpreter-lock" title="bookmark!">#</a></h3><p>The lock used by Python threads to assure that only one thread can be
run at a time.  This simplifies Python by assuring that no two
processes can access the same memory at the same time. Locking the
entire interpreter makes it easier for the interpreter to be
multi-threaded, at the expense of some parallelism on multi-processor
machines.  Efforts have been made in the past to create a
<q>free-threaded</q> interpreter (one which locks shared data at a
much finer granularity), but performance suffered in the common
single-processor case.</p><h3 id="idle">IDLE&#160;<a class="nav" href="#idle" title="bookmark!">#</a></h3><p>An Integrated Development Environment for Python.  IDLE is a basic
editor and interpreter environment that ships with the standard
distribution of Python.  Good for beginners, it also serves as clear
example code for those wanting to implement a moderately
sophisticated, multi-platform GUI application.</p><h3 id="immutable">immutable&#160;<a class="nav" href="#immutable" title="bookmark!">#</a></h3><p>An object with fixed value.  Immutable objects are numbers, strings or
tuples (and more). Such an object cannot be altered.  A new object has
to be created if a different value has to be stored.  They play an
important role in places where a constant hash value is needed, for
example as a key in a dictionary.</p><h3 id="integer-division">integer division&#160;<a class="nav" href="#integer-division" title="bookmark!">#</a></h3><p>Mathematical division discarding any remainder. For example, the
expression <code>11/4</code> currently evaluates to <code>2</code> in contrast to the <code>2.75</code>
returned by float division. Also called <em>floor division</em>. When
dividing two integers the outcome will always be another integer
(having the floor function applied to it).  However, if one of the
operands is another numeric type (such as a float), the result will be
coerced (see <em>coercion</em>) to a common type. For example, an integer
divided by a float will result in a float value, possibly with a
decimal fraction. Integer division can be forced by using the <code>//</code>
operator instead of the <code>/</code> operator. See also <a href="/pyref/__future__.htm"><strong>__future__</strong></a>.</p><h3 id="interactive">interactive&#160;<a class="nav" href="#interactive" title="bookmark!">#</a></h3><p>Python has an interactive interpreter which means that you can try out
things and immediately see their results.  Just launch <code>python</code> with no
arguments (possibly by selecting it from your computer&#8217;s main menu).
It is a very powerful way to test out new ideas or inspect modules and
packages (remember <code>help(x)</code>).</p><h3 id="interpreted">interpreted&#160;<a class="nav" href="#interpreted" title="bookmark!">#</a></h3><p>Python is an interpreted language, as opposed to a compiled one.  This
means that the source files can be run directly without first creating
an executable which is then run.  Interpreted languages typically have
a shorter development/debug cycle than compiled ones, though their
programs generally also run more slowly.  See also <em>interactive</em>.</p><h3 id="iterable">iterable&#160;<a class="nav" href="#iterable" title="bookmark!">#</a></h3><p>A container object capable of returning its members one at a
time. Examples of iterables include all sequence types (such as
<a href="/pyref/list.htm"><strong>list</strong></a>, <a href="/pyref/str.htm"><strong>str</strong></a>, and <a href="/pyref/tuple.htm"><strong>tuple</strong></a>) and some
non-sequence types like <a href="/pyref/dict.htm"><strong>dict</strong></a> and <a href="/pyref/file.htm"><strong>file</strong></a> and objects
of any classes you define with an <a href="/pyref/__iter__.htm"><strong>__iter__</strong></a> or
__getitem__() method. Iterables can be used in a for loop and in
many other places where a sequence is needed (<a href="/pyref/zip.htm"><strong>zip</strong></a>, <a href="@lin map.htm"><strong>@lin
map</strong></a>, &#8230;). When an iterable object is passed as an argument to the
builtin function <a href="/pyref/iter.htm"><strong>iter</strong></a>, it returns an iterator for the
object. This iterator is good for one pass over the set of values.
When using iterables, it is usually not necessary to call <a href="/pyref/iter.htm"><strong>iter</strong></a> or deal with iterator objects yourself. The <a href="/pyref/for.htm"><strong>for</strong></a>
statement does that automatically for you, creating a temporary
unnamed variable to hold the iterator for the duration of the loop.
See also <em>iterator</em>, <em>sequence</em>, and <em>generator</em>.</p><h3 id="iterator">iterator&#160;<a class="nav" href="#iterator" title="bookmark!">#</a></h3><p>An object representing a stream of data.  Repeated calls to the
iterator&#8217;s <a href="/pyref/next.htm"><strong>next</strong></a> method return successive items in the
stream.  When no more data is available a <a href="/pyref/StopIteration.htm"><strong>StopIteration</strong></a>
exception is raised instead.  At this point, the iterator object is
exhausted and any further calls to its <a href="/pyref/next.htm"><strong>next</strong></a> method just
raise StopIteration again.  Iterators are required to have an
__iter__() method that returns the iterator object itself so every
iterator is also iterable and may be used in most places where other
iterables are accepted.  One notable exception is code that attempts
multiple iteration passes. A container object (such as a <a href="/pyref/list.htm"><strong>list</strong></a>) produces a fresh new iterator each time you pass it to the
iter() function or use it in a <a href="/pyref/for.htm"><strong>for</strong></a> loop. Attempting this
with an iterator will just return the same exhausted iterator object
used in the previous iteration pass, making it appear like an empty
container.</p><h3 id="lbyl">LBYL&#160;<a class="nav" href="#lbyl" title="bookmark!">#</a></h3><p>Look before you leap. This coding style explicitly tests for
pre-conditions before making calls or lookups. This style contrasts
with the <em>EAFP</em> approach and is characterized by the presence of many
if statements.</p><h3 id="list-comprehension">list comprehension&#160;<a class="nav" href="#list-comprehension" title="bookmark!">#</a></h3><p>A compact way to process all or a subset of elements in a sequence and
return a list with the results. `result = [&#8220;0x%02x&#8221; % x for x in
range(256) if x % 2 == 0]` generates a list of strings containing hex
numbers (0x..) that are even and in the range from 0 to 255. The if
clause is optional. If omitted, all elements in <code>range(256)</code> are
processed.</p><h3 id="mapping">mapping&#160;<a class="nav" href="#mapping" title="bookmark!">#</a></h3><p>Any type that associates keys with values.  The builtin type <a href="/pyref/dict.htm"><strong>dict</strong></a> is an example of a mapping.  The de facto standard way to
implement this interface is to implement the special methods <a href="/pyref/__setitem__.htm"><strong>__setitem__</strong></a> and <a href="/pyref/__getitem__.htm"><strong>__getitem__</strong></a>.</p><h3 id="metaclass">metaclass&#160;<a class="nav" href="#metaclass" title="bookmark!">#</a></h3><p>The class of a class (!).  Class definitions create a class name, a
class dictionary, and a list of base classes.  The metaclass is
responsible for taking those three arguments and creating the class.
Most object oriented programming languages provide a default
implementation.  What makes Python special is that it is possible to
create custom metaclasses. Most users never need this tool, but when
the need arises, metaclasses can provide powerful, elegant solutions.
They have been used for logging attribute access, adding
thread-safety, tracking object creation, implementing singletons, and
many other tasks.</p><h3 id="mutable">mutable&#160;<a class="nav" href="#mutable" title="bookmark!">#</a></h3><p>Mutable objects can change their value but keep their <a href="/pyref/id.htm"><strong>id</strong></a>.
They cannot be used as keys in dictionaries because their hash value
may change at any time. See also <em>immutable</em>.</p><h3 id="namespace">namespace&#160;<a class="nav" href="#namespace" title="bookmark!">#</a></h3><p>The place where a variable is stored.  Namespaces are implemented as
dictionaries.  There are the local, global and builtin namespaces as
well as nested namespaces in objects (in methods).  Namespaces support
modularity by preventing naming conflicts. For instance, the built-in
<a href="/pyref/open.htm"><strong>open</strong></a> function is distinguished from <a href="/pyref/os.open.htm"><strong>os.open</strong></a> by
being in a different namespace.  Namespaces also aid readability and
maintainability by making it clear which module implements a function.
For instance, writing <a href="/pyref/random.seed.htm"><strong>random.seed()</strong></a> or <a href="/pyref/itertools.izip.htm"><strong>itertools.izip()</strong></a> makes it clear that those functions
are implemented by the <a href="/pyref/random.htm"><strong>random</strong></a> and <a href="/pyref/itertools.htm"><strong>itertools</strong></a>
modules respectively.</p><h3 id="nested-scope">nested scope&#160;<a class="nav" href="#nested-scope" title="bookmark!">#</a></h3><p>The ability to refer to a variable in an enclosing definition. For
instance, a function defined inside another function can refer to
variables in the outer function.  Note that nested scopes work only
for reference and not for assignment which will always write to the
innermost scope.  In contrast, local variables both read and write in
the innermost scope. Likewise, global variables read and write to the
global namespace.</p><h3 id="new-style-class">new-style class&#160;<a class="nav" href="#new-style-class" title="bookmark!">#</a></h3><p>Any class that inherits from object.  This includes all built-in types
like list and dict.  Only new-style classes can use Python&#8217;s newer,
versatile features like <a href="/pyref/__slots__.htm"><strong>__slots__</strong></a>, descriptors,
properties, <a href="/pyref/__getattribute__.htm"><strong>__getattribute__</strong></a>, class methods, and static
methods.</p><h3 id="python3000">Python3000&#160;<a class="nav" href="#python3000" title="bookmark!">#</a></h3><p>A mythical python release, not required to be fully backward
compatible, with telepathic interface.  See PEP 3000.</p><h3 id="__slots__">__slots__&#160;<a class="nav" href="#__slots__" title="bookmark!">#</a></h3><p>A declaration inside a <em>new-style class</em> that saves memory by
pre-declaring space for instance attributes and eliminating instance
dictionaries.  Though popular, the technique is somewhat tricky to get
right and is best reserved for rare cases where there are large
numbers of instances in a memory-critical application.</p><h3 id="sequence">sequence&#160;<a class="nav" href="#sequence" title="bookmark!">#</a></h3><p>An <em>iterable</em> which supports efficient element access using integer
indices via the <a href="/pyref/__getitem__.htm"><strong>__getitem__</strong></a> and <a href="/pyref/__len__.htm"><strong>__len__</strong></a>
special methods.  Some built-in sequence types are <a href="/pyref/list.htm"><strong>list</strong></a>,
<a href="/pyref/str.htm"><strong>str</strong></a>, <a href="/pyref/tuple.htm"><strong>tuple</strong></a>, and <a href="/pyref/unicode.htm"><strong>unicode</strong></a>.  Note that
<a href="/pyref/dict.htm"><strong>dict</strong></a> also supports <a href="/pyref/__getitem__.htm"><strong>__getitem__</strong></a> and <a href="/pyref/__len__.htm"><strong>__len__</strong></a>, but is considered a mapping rather than a sequence
because the lookups use arbitrary <em>immutable</em> keys rather than
integers.</p><h3 id="zen-of-python">Zen of Python&#160;<a class="nav" href="#zen-of-python" title="bookmark!">#</a></h3><p>Listing of Python design principles and philosophies that are helpful
in understanding and using the language.  The listing can be found by
typing &#8220;<code>import this</code>&#8221; at the interactive prompt.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class='comment'>
<p><b>Comment:</b></p>
<p>
Look at that... Both generators and iterators are talked about in the `Classes` section. That seems like a very odd place to do it. (Although I guess since there are no language feature sections after `Classes`, there was no where else)</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node18.html/_comments/3wtk/_comments/3wx0'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
Added some better examples for generators and generator expressions. I couldn't find these kinds of examples anywhere else in the tutorial. If they're there somewhere, please delete mine.

Jay P.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node18.html/_comments/3wtk'>infogami</a></b></p>
</div>
</div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li> <li><b><a href="." title="Go to pytut index page.">::: pytut :::</a></b></li> </ul> <ul><li><b>::: contents</b></li></ul> <ul><li><ul><li><ul><li><a href="#h0001">&gt;&gt;&gt;</a></li><li><a href="#h0002">&#8230;</a></li><li><a href="#bdfl">BDFL</a></li><li><a href="#byte-code">byte code</a></li><li><a href="#classic-class">classic class</a></li><li><a href="#coercion">coercion</a></li><li><a href="#complex-number">complex number</a></li><li><a href="#descriptor">descriptor</a></li><li><a href="#dictionary">dictionary</a></li><li><a href="#duck-typing">duck-typing</a></li><li><a href="#eafp">EAFP</a></li><li><a href="#__future__">__future__</a></li><li><a href="#generator">generator</a></li><li><a href="#generator-expression">generator expression</a></li><li><a href="#gil">GIL</a></li><li><a href="#global-interpreter-lock">global interpreter lock</a></li><li><a href="#idle">IDLE</a></li><li><a href="#immutable">immutable</a></li><li><a href="#integer-division">integer division</a></li><li><a href="#interactive">interactive</a></li><li><a href="#interpreted">interpreted</a></li><li><a href="#iterable">iterable</a></li><li><a href="#iterator">iterator</a></li><li><a href="#lbyl">LBYL</a></li><li><a href="#list-comprehension">list comprehension</a></li><li><a href="#mapping">mapping</a></li><li><a href="#metaclass">metaclass</a></li><li><a href="#mutable">mutable</a></li><li><a href="#namespace">namespace</a></li><li><a href="#nested-scope">nested scope</a></li><li><a href="#new-style-class">new-style class</a></li><li><a href="#python3000">Python3000</a></li><li><a href="#__slots__">__slots__</a></li><li><a href="#sequence">sequence</a></li><li><a href="#zen-of-python">Zen of Python</a></li></ul></li></ul></li></ul> </div> <!-- menu --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15_grey.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.05s 2010-02-22 06:49:45.229360.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
