<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>When I edit an imported module and reimport it, the changes don't show up. Why does this&nbsp;happen?</title></head><body data-page-id="918"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">When I edit an imported module and reimport it, the changes don't show up. Why does this&nbsp;happen?</h1></div><div class="yui-ge"><div class="yui-u first"><p>For reasons of efficiency as well as consistency, Python&#8217;s <a href="/pyref/import.htm"><strong>import</strong></a> mechanism only reads the module file on the first time a module is imported. If it didn&#8217;t, in a program consisting of many modules where each one imports the same basic module, the basic module would be parsed and re-parsed many times. To force rereading of a changed module, use <a href="/pyref/reload.htm"><strong>reload</strong></a>:</p><pre class="python"><span class="pykeyword">import</span> modname
reload(modname)</pre><p>Warning: this technique is not 100% fool-proof. In particular, modules containing statements like</p><pre class="python"><span class="pykeyword">from</span> modname <span class="pykeyword">import</span> some_objects</pre><p>will continue to work with the old version of the imported objects. If the module contains class definitions, existing class instances will <em>not</em> be updated to use the new class definition. This can result in the following paradoxical behaviour:</p><pre class="python">&gt;&gt;&gt; <span class="pykeyword">import</span> cls
&gt;&gt;&gt; c = cls.C()                <span class="pycomment"># Create an instance of C</span>
&gt;&gt;&gt; reload(cls)
&lt;module <span class="pystring">'cls'</span> <span class="pykeyword">from</span> <span class="pystring">'cls.pyc'</span>&gt;
&gt;&gt;&gt; isinstance(c, cls.C)       <span class="pycomment"># isinstance is false?!?</span>
False</pre><p>The nature of the problem is made clear if you print out the class objects:</p><pre class="python">&gt;&gt;&gt; c.__class__
&lt;<span class="pykeyword">class</span> <span class="pyclass">cls</span>.C at 0x7352a0&gt;
&gt;&gt;&gt; cls.C
&lt;<span class="pykeyword">class</span> <span class="pyclass">cls</span>.C at 0x4198d0&gt;</pre><p>CATEGORY: programming</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
