
@@module wave

<h1>wave&#8212;Read and write WAV files</h1>

<p>The {@link wave} module provides a convenient interface to the WAV
sound format. It does not support compression/decompression, but it does
support mono/stereo.

<p>The {@link wave} module defines the following function and exception:

@@function open(file[, mode])

<p>If {@var file} is a string, open the file by that name, other treat
it as a seekable file-like object. {@var mode} can be any of
@@attribute 'r', 'rb'
@@attribute Read only mode.
@@attribute 'w', 'wb'

<p>Write only mode.

<p>Note that it does not allow read/write WAV files.

<p>A {@var mode} of {@code 'r'} or {@code 'rb'} returns a {@link
Wave_read} object, while a {@var mode} of {@code 'w'} or {@code 'wb'}
returns a {@link Wave_write} object. If {@var mode} is omitted and a
file-like object is passed as {@var file}, {@var file}.mode is used as
the default value for {@var mode} (the "{@code b}" flag is still added
if necessary).

@@function openfp(file, mode)

<p>A synonym for {@link open}, maintained for backwards compatibility.

@@exception Error

<p>An error raised when something is impossible because it violates the
WAV specification or hits an implementation deficiency.

@@text 

<h2>Wave_read Objects</h2>

<p>Wave_read objects, as returned by {@link open}, have the following
methods:

@@method Wave_read.close()

<p>Close the stream, and make the instance unusable. This is called
automatically on object collection.

@@method Wave_read.getnchannels()

<p>Returns number of audio channels ({@code 1} for mono, {@code 2} for
stereo).

@@method Wave_read.getsampwidth()

<p>Returns sample width in bytes.

@@method Wave_read.getframerate()

<p>Returns sampling frequency.

@@method Wave_read.getnframes()

<p>Returns number of audio frames.

@@method Wave_read.getcomptype()

<p>Returns compression type ({@code 'NONE'} is the only supported type).

@@method Wave_read.getcompname()

<p>Human-readable version of {@link getcomptype}. Usually {@code 'not
compressed'} parallels {@code 'NONE'}.

@@method Wave_read.getparams()

<p>Returns a tuple {@code (}{@var nchannels}, {@var sampwidth}, {@var
framerate}, {@var nframes}, {@var comptype}, {@var compname}),
equivalent to output of the {@link get*} methods.

@@method Wave_read.readframes(n)

<p>Reads and returns at most {@var n} frames of audio, as a string of
bytes.

@@method Wave_read.rewind()

<p>Rewind the file pointer to the beginning of the audio stream.

@@text 

<p>The following two methods are defined for compatibility with the
{@link aifc} module, and don't do anything interesting.

@@method Wave_read.getmarkers()

<p>Returns {@link None}.

@@method Wave_read.getmark(id)

<p>Raise an error.

@@text 

<p>The following two methods define a term &#8220;position&#8221; which
is compatible between them, and is otherwise implementation dependent.

@@method Wave_read.setpos(pos)

<p>Set the file pointer to the specified position.

@@method Wave_read.tell()

<p>Return current file pointer position.

@@text 

<h2>Wave_write Objects</h2>

<p>Wave_write objects, as returned by {@link open}, have the following
methods:

@@method Wave_write.close()

<p>Make sure {@var nframes} is correct, and close the file. This method
is called upon deletion.

@@method Wave_write.setnchannels(n)

<p>Set the number of channels.

@@method Wave_write.setsampwidth(n)

<p>Set the sample width to {@var n} bytes.

@@method Wave_write.setframerate(n)

<p>Set the frame rate to {@var n}.

@@method Wave_write.setnframes(n)

<p>Set the number of frames to {@var n}. This will be changed later if
more frames are written.

@@method Wave_write.setcomptype(type, name)

<p>Set the compression type and description.

@@method Wave_write.setparams(tuple)

<p>The {@var tuple} should be {@code (}{@var nchannels}, {@var
sampwidth}, {@var framerate}, {@var nframes}, {@var comptype}, {@var
compname}), with values valid for the {@link set*} methods. Sets all
parameters.

@@method Wave_write.tell()

<p>Return current position in the file, with the same disclaimer for the
{@link Wave_read.tell} and {@link Wave_read.setpos} methods.

@@method Wave_write.writeframesraw(data)

<p>Write audio frames, without correcting {@var nframes}.

@@method Wave_write.writeframes(data)

<p>Write audio frames and make sure {@var nframes} is correct.

@@text 

<p>Note that it is invalid to set any parameters after calling {@link
writeframes} or {@link writeframesraw}, and any attempt to do so will
raise {@link wave.Error}.
