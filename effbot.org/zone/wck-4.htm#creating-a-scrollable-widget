<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Displaying Large Amounts of Data (Writing Widgets in Python, Part&nbsp;4)</title> <script type="text/javascript">effbot_page_id=348;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <p><a href="wck-3.htm">back</a> <a href="wck-5.htm">next</a></p> <h1 class="maintitle">Displaying Large Amounts of Data (Writing Widgets in Python, Part&nbsp;4)</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p class="info">May 31, 2003 | Fredrik Lundh</p><p>The <b>Widget Construction Kit</b> (WCK) is a programming interface
that you can use to create new widgets for Tkinter and other toolkits,
in pure Python.</p><p>This is the fourth article in <a href="wck.htm">a series</a>.  In
this article, we&#8217;ll look at how to implement scrollable widgets.</p><p>In this article:</p><dl><dt><a href="#the-scrollbar-interface">The Scrollbar Interface</a></dt><dt><a href="#creating-a-scrollable-widget">Creating a Scrollable Widget</a></dt><dt><a href="#displaying-huge-data-sets">Displaying Huge Data Sets</a></dt></dl><p align="center" class="mark">:::</p><h2 id="the-scrollbar-interface">The Scrollbar Interface&#160;<a class="nav" href="#the-scrollbar-interface" title="bookmark!">#</a></h2><p>The WCK uses Tkinter&#8217;s scrollbar model, where the scrollbar is
a separate widget that can be attached to any widget that supports
scrolling.</p><p>To bind a scrollbar to the scrolled widget, you set the scrollbar&#8217;s
<b>command</b> option to point to a method that will be called when the
scrollbar is changed, and the <b>yscrollcommand</b> option on the
scrollable widget is set to to a method that is called when the view
is changed (for example, when new items are added, or the widget is
resized).</p><p>In the following example, a listbox containing 100 integers is
equipped with a scrollbar:</p><div class="example">
<b>Example: A listbox with a scrollbar</b>
<pre class="python">
<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> *

root = Tk()

scrollbar = Scrollbar(root)
scrollbar.pack(side=RIGHT, fill=Y)

listbox = Listbox(root)
listbox.pack()

<span class="pykeyword">for</span> i <span class="pykeyword">in</span> range(100):
    listbox.insert(END, i)

<span class="pycomment"># bind listbox to scrollbar</span>
listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=listbox.yview)

mainloop()</pre></div><blockquote>
<img alt="" height="193" src="/media/cache/15500761596e9c1e62496afdd860550f.png" width="152" />
</blockquote><p>To watch the traffic between the listbox and the scrollbar, you can
replace the <b>Scrollbar</b> and <b>Listbox</b> classes with versions
that log the relevant method calls:</p><pre class="python">
<span class="pykeyword">class</span> <span class="pyclass">DebugScrollbar</span>(Scrollbar):
    <span class="pykeyword">def</span> <span class="pyfunction">set</span>(self, *args):
        <span class="pykeyword">print</span> <span class="pystring">"SCROLLBAR SET"</span>, args
        Scrollbar.set(self, *args)

<span class="pykeyword">class</span> <span class="pyclass">DebugListbox</span>(Listbox):
    <span class="pykeyword">def</span> <span class="pyfunction">yview</span>(self, *args):
        <span class="pykeyword">print</span> <span class="pystring">"LISTBOX YVIEW"</span>, args
        Listbox.yview(self, *args)

scrollbar = DebugScrollbar()
scrollbar.pack(side=RIGHT, fill=Y)

listbox = DebugListbox(yscrollcommand=scrollbar.set)
listbox.pack()

scrollbar.config(command=listbox.yview)</pre><p>When you run the example using these widgets, you&#8217;ll get a stream
of SCROLLBAR and LISTBOX messages in the console window.</p><p>When the listbox is first displayed, the listbox calls the
scrollbar to inform it about the current view (in this example, 10 out
of 100 lines are displayed).  The scrollbar calls back, informing the
listbox that the scrollbar is in its topmost position:</p><pre>
SCROLLBAR SET ('0', '0.1')
LISTBOX YVIEW ('moveto', '0')
</pre><p>Note that all arguments are strings, and that the values are
normalized to fit in the 0.0 to 1.0 range.</p><p>When you move the scrollbar thumb, the scrollbar sends
<b>moveto</b> messages to the listbox.  The listbox updates the view,
and calls the scrollbar&#8217;s <b>set</b> method with the resulting
values:</p><pre>
LISTBOX YVIEW ('moveto', '0.1041')
SCROLLBAR SET ('0.1', '0.2')
LISTBOX YVIEW ('moveto', '0.186')
SCROLLBAR SET ('0.19', '0.29')
LISTBOX YVIEW ('moveto', '0.3124')
SCROLLBAR SET ('0.31', '0.41')
LISTBOX YVIEW ('moveto', '0.4166')
SCROLLBAR SET ('0.42', '0.52')
</pre><p>Note that the listbox rounds the scrollbar value to the nearest
full line.</p><p>If you click outside the scrollbar thumb, the scrollbar generates
<b>scroll</b> events.</p><pre>
LISTBOX YVIEW ('scroll', '1', 'pages')
SCROLLBAR SET ('0.5', '0.6')
LISTBOX YVIEW ('scroll', '1', 'pages')
SCROLLBAR SET ('0.58', '0.68')
LISTBOX YVIEW ('scroll', '1', 'units')
SCROLLBAR SET ('0.59', '0.69')
LISTBOX YVIEW ('scroll', '1', 'units')
SCROLLBAR SET ('0.6', '0.7')
</pre><p>For <b>scroll</b> events, the scrollbar provides both a value and a
unit, and it&#8217;s up to the listbox to interpret the units in a way that
makes sense to the user.  The value is usually -1 (scroll up/left) or
1 (scroll down/right), and the unit is either <b>pages</b> or
<b>units</b>.</p><p>In a listbox, the basic <b>unit</b> is usually a single item, and
a <b>page</b> is as many items that fit into the widget&#8217;s window.</p><h2 id="creating-a-scrollable-widget">Creating a Scrollable Widget&#160;<a class="nav" href="#creating-a-scrollable-widget" title="bookmark!">#</a></h2><p>To create your own scrollable widget, you need to deal with two
separate issues:</p><ol><li>write code that displays a suitable subset of the source data</li><li>write code that interacts with the scrollbar, using a Tkinter-style
Scrollbar interface</li></ol><p>The following example is a list widget that displays a number of
strings (stored in a list variable), and allows you to select which
one to display at the top of the widget.  Use the <b>setfirst</b>
method to change the view; use <b>setdata</b> to update the
contents.</p><div class="example">
<b>Example: A scrollable list view</b>
<pre class="python">
<span class="pykeyword">from</span> WCK <span class="pykeyword">import</span> Widget, FONT

<span class="pykeyword">class</span> <span class="pyclass">ListView</span>(Widget):

    ui_option_width = 20 <span class="pycomment"># in character units</span>
    ui_option_height = 10

    ui_option_font = FONT

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, master, **options):
        self.items = []
        self.first_item = 0 <span class="pycomment"># first visible item</span>
        self.ui_init(master, options)

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_config</span>(self):
        self.font = self.ui_font(<span class="pystring">"black"</span>, self.ui_option_font)
        width, self.item_height = self.font.measure()
        <span class="pykeyword">return</span> (
            width * int(self.ui_option_width),
            self.item_height * int(self.ui_option_height)
            )

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        y = 0
        i = self.first_item
        <span class="pykeyword">while</span> i &lt; len(self.items) <span class="pykeyword">and</span> y &lt; y1:
            draw.text((0, y), self.items[i], self.font)
            y = y + self.item_height
            i = i + 1

    <span class="pykeyword">def</span> <span class="pyfunction">setfirst</span>(self, first_item):
        self.first_item = first_item
        self.ui_damage()

    <span class="pykeyword">def</span> <span class="pyfunction">getdata</span>(self):
        <span class="pykeyword">return</span> self.items

    <span class="pykeyword">def</span> <span class="pyfunction">setdata</span>(self, items):
        self.items = items
        self.ui_damage()

<span class="pycomment">#</span>
<span class="pycomment"># try it out</span>

<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> *

root = Tk()

listbox = ListView(root)
listbox.setdata(map(str, range(100)))
listbox.pack()

listbox.setfirst(10)

mainloop()</pre></div><blockquote>
<img alt="" height="157" src="/media/cache/5fd35642cf8b7cada16482a291d04cbc.png" width="128" />
</blockquote><p>To add scrollbar support, you need to add code that calls the
scrollbar&#8217;s <b>set</b> method (via the <b>yscrollcommand</b> option)
whenever the widget&#8217;s view is changed.  You also need to implement the
<b>yview</b> method in a suitable fashion.</p><p>The following example adds an <b>update_geometry</b> method which
is called whenever the geometry changes.  This method notifies the
scrollbar, and schedules a widget update.</p><p>The <b>setfirst</b> method from the previous example has been
extended to make sure that the user cannot move the contents outside
the view; without that code, if you scroll to the end, and keep
clicking the scollbar arrow, the contents will scroll out of view.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b>Example: A scrollable list view, with scrollbar support</b>
<pre class="python wide">
<span class="pykeyword">from</span> WCK <span class="pykeyword">import</span> Widget, FONT

<span class="pykeyword">class</span> <span class="pyclass">ListView</span>(Widget):

    ui_option_width = 20 <span class="pycomment"># in character units</span>
    ui_option_height = 10

    ui_option_font = FONT

    ui_option_yscrollcommand = None

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, master, **options):
        self.height = 0
        self.items = []
        self.first_item = 0 <span class="pycomment"># first visible item</span>
        self.ui_init(master, options)
        self.update_geometry()

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_config</span>(self):
        self.font = self.ui_font(<span class="pystring">"black"</span>, self.ui_option_font)
        width, self.item_height = self.font.measure()
        self.update_geometry()
        <span class="pykeyword">return</span> (
            width * int(self.ui_option_width),
            self.item_height * int(self.ui_option_height)
            )

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_resize</span>(self, width, height):
        self.height = height
        self.update_geometry()

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        y = 0
        i = self.first_item
        <span class="pykeyword">while</span> i &lt; len(self.items) <span class="pykeyword">and</span> y &lt; y1:
            draw.text((0, y), self.items[i], self.font)
            y = y + self.item_height
            i = i + 1

    <span class="pykeyword">def</span> <span class="pyfunction">update_geometry</span>(self):
        <span class="pykeyword">if</span> callable(self.ui_option_yscrollcommand):
            <span class="pykeyword">if</span> self.items <span class="pykeyword">and</span> self.height:
                <span class="pycomment"># calculate visible region, in percent</span>
                page_size = self.height / self.item_height
                start = float(self.first_item) / len(self.items)
                end = float(self.first_item + page_size) / len(self.items)
                self.ui_option_yscrollcommand(start, end)
            <span class="pykeyword">else</span>:
                self.ui_option_yscrollcommand(0.0, 1.0)
        self.ui_damage()

    <span class="pykeyword">def</span> <span class="pyfunction">setfirst</span>(self, first):
        <span class="pycomment"># clamp first index</span>
        page_size = self.height / self.item_height
        <span class="pykeyword">if</span> first &lt; 0 <span class="pykeyword">or</span> len(self.items) &lt;= page_size:
            first = 0
        <span class="pykeyword">elif</span> first &gt;= len(self.items) - page_size:
            first = len(self.items)-page_size
        <span class="pykeyword">if</span> first != self.first_item:
            <span class="pycomment"># redraw widget</span>
            self.first_item = first
            self.update_geometry()

    <span class="pykeyword">def</span> <span class="pyfunction">yview</span>(self, event, value, unit=None):
        <span class="pycomment"># adjust top index</span>
        <span class="pykeyword">if</span> event == <span class="pystring">"moveto"</span>:
            self.setfirst(int(len(self.items) * float(value) + 0.5))
        <span class="pykeyword">elif</span> event == <span class="pystring">"scroll"</span>:
            <span class="pykeyword">if</span> unit == <span class="pystring">"units"</span>:
                self.setfirst(self.first_item + int(value))
            <span class="pykeyword">elif</span> unit == <span class="pystring">"pages"</span>:
                page_size = self.height / self.item_height
                self.setfirst(self.first_item + int(value) * page_size)

    <span class="pycomment">#</span>
    <span class="pycomment"># list item interface</span>

    <span class="pykeyword">def</span> <span class="pyfunction">getdata</span>(self):
        <span class="pykeyword">return</span> self.items

    <span class="pykeyword">def</span> <span class="pyfunction">setdata</span>(self, items):
        self.items = items
        self.update_geometry()

<span class="pycomment">#</span>
<span class="pycomment"># try it out</span>

<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> *

root = Tk()

scrollbar = Scrollbar(root)
scrollbar.pack(side=RIGHT, fill=Y)

listbox = ListView(root, yscrollcommand=scrollbar.set)
listbox.setdata(map(str, range(100)))
listbox.pack()

scrollbar.config(command=listbox.yview)

mainloop()</pre><h2 id="displaying-huge-data-sets">Displaying Huge Data Sets&#160;<a class="nav" href="#displaying-huge-data-sets" title="bookmark!">#</a></h2><p>The list view implementation offers a great advantage over the
standard Tkinter Listbox, in that it uses a standard Python list, and
fetches strings from the list only when it needs them.</p><p>If you need to modify the list, all you have to do is to call
<b>getdata</b>, modify the object (or replace it), and put it back
using <b>setdata</b>:</p><pre class="python wide">
data = listbox.getdata()
data.sort()
listbox.setdata(data) <span class="pycomment"># triggers a redraw</span></pre><p>In contrast, the Tkinter Listbox requires you to transfer data from
Python to Tk, and if you want to modify the contents, you have to use
Tkinter-specific methods (<b>insert</b>, <b>delete</b>, etc).  If you
have hundreds or thousands of items, the overhead can be quite
noticable.</p><p>And if we&#8217;re talking millions of items, the Tkinter Listbox will
easily gobble up all the memory you have.  In contrast, with the
list view class, all it takes to display a few million items is a
list-like object that responds to the <b>len()</b> function and
the <b>[]</b> operator, in the usual way.</p><p>Consider this example:</p><pre class="python wide">
<span class="pykeyword">import</span> sys

<span class="pykeyword">class</span> <span class="pyclass">huge_list</span>:

    <span class="pykeyword">def</span> <span class="pyfunction">__len__</span>(self):
        <span class="pykeyword">return</span> sys.maxint

    <span class="pykeyword">def</span> <span class="pyfunction">__getitem__</span>(self, index):
        <span class="pykeyword">return</span> str(index)

...

listbox = ListView(root)
listbox.setdata(huge_list())

...</pre><p>When used with the list view, instances of the <b>huge_list</b>
class will behave like a list containing 2147483647 strings (or more,
if you&#8217;re running it on a 64-bit platform).  If you had to create all
those strings before displaying any of them, you&#8217;d run out of memory
on most contemporary platforms, but the list view widget has no
problems displaying the entire list:</p><blockquote>
<img alt="" height="157" src="/media/cache/4d918ed98ee5de0ed1b373b24426a0e0.png" width="144" />
</blockquote><p>Note that the <b>huge_list</b> class works pretty much like the
built-in <b>xrange</b> method, except that it returns strings instead
of integers.</p><p>What if we want to use something like <b>xrange</b> right away?
The widget expects the list to contain strings, but <b>xrange</b>
returns integers.  An obvious way to solve this is change the widget
so it uses the <b>str</b> function on each item:</p><pre class="python wide">
<span class="pykeyword">class</span> <span class="pyclass">ListView</span>(Widget):

    ...

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        y = 0
        i = self.first_item
        <span class="pykeyword">while</span> i &lt; len(self.items) <span class="pykeyword">and</span> y &lt; y1:
            draw.text((0, y), str(self.items[i]), self.font)
            y = y + self.item_height
            i = i + 1</pre><p>A more flexible solution is to refactor the repair method just
slightly, and delegate the drawing to a separate method.</p><pre class="python wide">
<span class="pykeyword">class</span> <span class="pyclass">ListView</span>(Widget):

    ...

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        y = 0
        i = self.first_item
        <span class="pykeyword">while</span> i &lt; len(self.items) <span class="pykeyword">and</span> y &lt; y1:
            self.repair_item(draw, (0, y), self.items[i])
            y = y + self.item_height
            i = i + 1

    <span class="pykeyword">def</span> <span class="pyfunction">repair_item</span>(self, draw, xy, item):
        draw.text(xy, str(item), self.font)</pre><p>The new <b>repair_item</b> method is called once for each visible
item.  The default implementation calls <b>str</b> on each item; if
you don&#8217;t want that, for some reason, you can easily override the
method and add your own drawing code.</p><p>With this code in place, you can get rid of the <b>huge_list</b>
code in the earlier example.  Just pass <b>xrange(sys.maxint)</b> to
the <b>setdata</b> method, and let the widget take care of the
rest.</p><pre class="wide">
listbox = ListView(root, yscrollcommand=scrollbar.set)
listbox.setdata(xrange(sys.maxint))
listbox.pack()
</pre><h3>Displaying Virtual Data Sets</h3><p>Displaying insane amounts of integers in a listbox might be a nice
way to impress your friends and family at the next user interface
toolkit reunion, but it&#8217;s probably not something that you will end up
doing in a real application. However, you can use the same approach to
display more interesting data sets.</p><p>In the following example, a simple wrapper class is used as an
interface to the result set from a database search.  The list view
will only fetch enough results to keep the widget up to date:</p><pre class="python wide">
<span class="pykeyword">class</span> <span class="pyclass">SearchResult</span>:

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, database, search_context, number_of_results):
        self.database = database
        self.search_context = search_context
        self.number_of_results = number_of_results

    <span class="pykeyword">def</span> <span class="pyfunction">__len__</span>(self):
        <span class="pykeyword">return</span> self.number_of_results

    <span class="pykeyword">def</span> <span class="pyfunction">__getitem__</span>(self, index):
        <span class="pykeyword">return</span> self.database.getresult(self.search_context, index)

listbox = ListView(root)

context, number_of_results = database.search(query)
listbox.setdata(SearchResult(database, context, number_of_results))</pre><p>In production code, you should probably add some kind of cache on
the way from the database to the display, to avoid fetching the same
items over and over again.</p><h3>Non-Standard Rendering</h3><p>Since the <b>repair_item</b> hook does all the drawing, it can be
also be used to modify the appearance of the list items.  Here&#8217;s a
subclass that takes a list containing (color name, color value)
tuples, and draws each name in the corresponding color:</p><pre class="python wide">
<span class="pykeyword">class</span> <span class="pyclass">ColorListView</span>(ListView):

    <span class="pykeyword">def</span> <span class="pyfunction">repair_item</span>(self, draw, xy, item):
        draw.text(xy, item[0], self.ui_font(item[1], self.ui_option_font))

...

DATA = [
    <span class="pycomment"># CSS1 standard colors</span>
    (<span class="pystring">"Aqua"</span>, <span class="pystring">"#00ffff"</span>),
    (<span class="pystring">"Black"</span>, <span class="pystring">"#000000"</span>),
    (<span class="pystring">"Blue"</span>, <span class="pystring">"#0000ff"</span>),
    (<span class="pystring">"Fuchsia"</span>, <span class="pystring">"#ff00ff"</span>),
    (<span class="pystring">"Gray"</span>, <span class="pystring">"#808080"</span>),
    (<span class="pystring">"Green"</span>, <span class="pystring">"#008000"</span>),
    (<span class="pystring">"Lime"</span>, <span class="pystring">"#00ff00"</span>),
    (<span class="pystring">"Maroon"</span>, <span class="pystring">"#800000"</span>),
    (<span class="pystring">"Navy"</span>, <span class="pystring">"#000080"</span>),
    (<span class="pystring">"Olive"</span>, <span class="pystring">"#808000"</span>),
    (<span class="pystring">"Purple"</span>, <span class="pystring">"#800080"</span>),
    (<span class="pystring">"Red"</span>, <span class="pystring">"#ff0000"</span>),
    (<span class="pystring">"Silver"</span>, <span class="pystring">"#c0c0c0"</span>),
    (<span class="pystring">"Teal"</span>, <span class="pystring">"#008080"</span>),
    (<span class="pystring">"White"</span>, <span class="pystring">"#ffffff"</span>),
    (<span class="pystring">"Yellow"</span>, <span class="pystring">"#ffff00"</span>),
    ]

...

listbox = ColorListView(root, yscrollcommand=scrollbar.set)
listbox.setdata(DATA)
listbox.pack()

...</pre><blockquote>
<img alt="" height="157" src="/media/cache/21b05bac24f6be80cbebf145b3756f8d.png" width="144" />
</blockquote><p>And here&#8217;s a variant that draws a colored rectangle to the left,
and the color name (in black) to the right:</p><pre class="python wide">
<span class="pykeyword">class</span> <span class="pyclass">ColorListView</span>(ListView):

    <span class="pykeyword">def</span> <span class="pyfunction">repair_item</span>(self, draw, xy, item):
        x0, y0 = xy
        x1 = x0 + self.item_height * 4
        y1 = y0 + self.item_height
        draw.rectangle((x0, y0+2, x1-2, y1-2), self.ui_brush(item[1]))
        draw.text((x1, y0), item[0], self.font)</pre><blockquote>
<img alt="" height="157" src="/media/cache/89d0bd52221ddee536cb785fb091c650.png" width="144" />
</blockquote><p class="fixme">Ideas for future articles: creating a simple log console,
optimizing updates (dirty flags), using the scroll helper mixin, dealing
with selections)</p></div></div><div class="yui-g"> <p><a href="wck-3.htm">back</a> <a href="wck-5.htm">next</a></p><div class='comment' timestamp='1162827773.85'>
 <p><b>Comment:</b></p>
 <p>How about a multi-column list and sorted? A tutorial on that would be nice.
</p>
 <p>Posted by <b class='author'>metaperl</b> <span class='mark'>(2006-11-06)</span></p>
</div>


<div class='comment' target-id='None' timestamp='1171984898.2'>
 <p><b>Comment:</b></p>
 <p>How about a scrolled frame ?</p>
 <p>Posted by <b class='author'>Pythoneur</b> <span class='mark'>(2007-02-20)</span></p>
</div>
</div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/">::: effbot.org</a></b></li> <li><b><a href=".">::: zone :::</a></b></li> </ul> <ul><li><b>contents :::</b></li></ul> <ul><li><a href="#the-scrollbar-interface">The Scrollbar Interface</a></li><li><a href="#creating-a-scrollable-widget">Creating a Scrollable Widget</a></li><li><a href="#displaying-huge-data-sets">Displaying Huge Data Sets</a></li></ul> </div> <!-- menu --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15_grey.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.16s 2007-11-14 22:28:43.376764.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
