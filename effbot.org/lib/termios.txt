
@@module termios

<h1>termios&#8212;POSIX style tty control</h1>

<p>Availability: Unix.

<p>This module provides an interface to the POSIX calls for tty I/O
control. For a complete description of these calls, see the POSIX or
Unix manual pages. It is only available for those Unix versions that
support POSIX {@em termios} style tty I/O control (and then only if
configured at installation time).

<p>All functions in this module take a file descriptor {@var fd} as
their first argument. This can be an integer file descriptor, such as
returned by {@code sys.stdin.fileno()}, or a file object, such as {@code
sys.stdin} itself.

<p>This module also defines all the constants needed to work with the
functions provided here; these have the same name as their counterparts
in C. Please refer to your system documentation for more information on
using these terminal control interfaces.

<p>The module defines the following functions:

@@function tcgetattr(fd)

<p>Return a list containing the tty attributes for file descriptor {@var
fd}, as follows: {@code [}{@var iflag}, {@var oflag}, {@var cflag},
{@var lflag}, {@var ispeed}, {@var ospeed}, {@var cc}{@code ]} where
{@var cc} is a list of the tty special characters (each a string of
length 1, except the items with indices {@code VMIN} and {@code VTIME},
which are integers when these fields are defined). The interpretation of
the flags and the speeds as well as the indexing in the {@var cc} array
must be done using the symbolic constants defined in the {@link termios}
module.

@@function tcsetattr(fd, when, attributes)

<p>Set the tty attributes for file descriptor {@var fd} from the {@var
attributes}, which is a list like the one returned by {@link tcgetattr}.
The {@var when} argument determines when the attributes are changed:
{@code TCSANOW} to change immediately, {@code TCSADRAIN} to change after
transmitting all queued output, or {@code TCSAFLUSH} to change after
transmitting all queued output and discarding all queued input.

@@function tcsendbreak(fd, duration)

<p>Send a break on file descriptor {@var fd}. A zero {@var duration}
sends a break for 0.25-0.5 seconds; a nonzero {@var duration} has a
system dependent meaning.

@@function tcdrain(fd)

<p>Wait until all output written to file descriptor {@var fd} has been
transmitted.

@@function tcflush(fd, queue)

<p>Discard queued data on file descriptor {@var fd}. The {@var queue}
selector specifies which queue: {@code TCIFLUSH} for the input queue,
{@code TCOFLUSH} for the output queue, or {@code TCIOFLUSH} for both
queues.

@@function tcflow(fd, action)

<p>Suspend or resume input or output on file descriptor {@var fd}. The
{@var action} argument can be {@code TCOOFF} to suspend output, {@code
TCOON} to restart output, {@code TCIOFF} to suspend input, or {@code
TCION} to restart input.

@@text 

@see 
{@link tty Module tty}

Convenience functions for common terminal control operations.

<h2>Example</h2>

<p>Here's a function that prompts for a password with echoing turned
off. Note the technique using a separate {@link tcgetattr} call and a
{@link try} ... {@link finally} statement to ensure that the old tty
attributes are restored exactly no matter what happens:

<pre>
def getpass(prompt = "Password: "):
    import termios, sys
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    new = termios.tcgetattr(fd)
    new[3] = new[3] &amp; ~termios.ECHO          # lflags
    try:
        termios.tcsetattr(fd, termios.TCSADRAIN, new)
        passwd = raw_input(prompt)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
    return passwd
</pre>

