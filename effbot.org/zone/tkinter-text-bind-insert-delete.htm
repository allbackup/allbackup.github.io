<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Adding bind_insert, bind_delete methods to the Text&nbsp;widget</title></head><body data-page-id="318"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Adding bind_insert, bind_delete methods to the Text&nbsp;widget</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">July 1998 | Fredrik Lundh</p><i>An old proposal from July 1998.  I wonder what happened to the
sample implementation&#8230;</i>
<p>What do you think about adding the following new methods to
the Text class:</p><pre class="python">
    <span class="pykeyword">def</span> <span class="pyfunction">bind_insert</span>(self, callback)
    <span class="pykeyword">def</span> <span class="pyfunction">bind_delete</span>(self, callback)</pre><p>If installed, the given callbacks are called upon each call to &#8220;insert&#8221;
(&#8220;delete&#8221;) generated by the standard text widget bindings, calls to
Tkinter (outside the callbacks themselves), calls to Tcl code, etc.
The callback is called before the insert/delete operation is actually
executed, and you can return &#8220;break&#8221; to &#8220;capture&#8221; the operation.</p><p>This makes it trivial to implement &#8220;dirty&#8221; flags, undoable text widgets,
readonly text regions, etc.  Here&#8217;s a simple example:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pykeyword">class</span> <span class="pyclass">UndoableText</span>(Text):

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(...)
        ...
        self.bind_insert(self.insert_hook)
        self.bind_delete(self.delete_hook)
        self.bind(<span class="pystring">"&lt;Control-z&gt;"</span>, self.undo)
        self.history = []

    <span class="pykeyword">def</span> <span class="pyfunction">insert_hook</span>(self, index, text, *tags):
        self.history.append(1, self.index(index), len(text))

    <span class="pykeyword">def</span> <span class="pyfunction">delete_hook</span>(self, start, stop=None):
        self.history.append(0, self.index(index), self.get(start, stop))

    <span class="pykeyword">def</span> <span class="pyfunction">undo</span>(self, event):
        ...</pre></div><div class="yui-ge"><div class="yui-u first"><p><i>Guido says: One API design question: I think this should be done as
a subclass of Tkinter.Text, possibly even in a different module, rather
than by defining new methods on the Text class; that would violate the
(informal) more-or-less direct mapping between Python method names and
Tk subcommands.</i></p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
