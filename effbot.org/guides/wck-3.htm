<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>The Drawing Interface (Writing Widgets in Python, Part&nbsp;3)</title> <script type="text/javascript">effbot_page_id=347;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles

now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <p><a href="wck-2.htm">back</a> <a href="wck-4.htm">next</a></p> <h1 class="maintitle">The Drawing Interface (Writing Widgets in Python, Part&nbsp;3)</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p class="info">Updated December 11, 2005 | May 31, 2003 | Fredrik Lundh</p><p>The <b>Widget Construction Kit</b> (WCK) is a programming interface
that you can use to create new widgets for Tkinter and other toolkits,
in pure Python.</p><p>This is the third article in <a href="wck.htm">a series</a>.</p><p>In this article:</p><dl><dt><a href="#introducing">Introducing the 2D Drawing Interface</a></dt><dt><a href="#data-types">Data Types</a></dt><dt><a href="#drawing-graphics">Drawing Graphics</a></dt><dt><a href="#drawing-text">Drawing Text</a></dt><dt><a href="#drawing-images">Drawing Images</a></dt><dt><a href="#drawing-widget-backgrounds">Drawing Widget Backgrounds</a></dt><dt><a href="#animation-techniques">Animation Techniques</a></dt></dl><p align="center" class="mark">:::</p><h2 id="introducing">Introducing the 2D Drawing Interface&#160;<a class="nav" href="#introducing" title="bookmark!">#</a></h2><p>The WCK passes a <b>draw</b> object to the <b>ui_handle_repair</b>
and <b>ui_handle_clear</b> methods.  This object provides an interface
to the underlying drawing library.  By default, the WCK uses a
relatively simple drawing library, which lets you draw text, lines,
rectangles, and other 2D graphic elements to the screen.</p><p>Here&#8217;s a simple example, which draws a black cross on the
widget:</p><pre class="python">
<span class="pykeyword">from</span> WCK <span class="pykeyword">import</span> Widget

<span class="pykeyword">class</span> <span class="pyclass">CrossWidget</span>(Widget):

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        black = self.ui_pen(<span class="pystring">"black"</span>, 5)

        <span class="pycomment"># draw a black cross</span>
        draw.line((x0, y0, x1, y1), black)
        draw.line((x0, y1, x1, y0), black)</pre><p>The (x0, y0) coordinate is the upper left corner of the widget;
(x1, y1) is the lower left.</p><p>Here&#8217;s the resulting widget.  If you resize the widget, it will
draw a bigger cross:</p><blockquote>
<img alt="" height="127" src="/media/cache/b2e0b42912dc6c23a0d0c602768efd99.png" width="112" />
</blockquote><p>To draw a polygon, you have to provide at least three coordinate
pairs:</p><pre class="python">
<span class="pykeyword">from</span> WCK <span class="pykeyword">import</span> Widget

<span class="pykeyword">class</span> <span class="pyclass">TriangleWidget</span>(Widget):

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        <span class="pycomment"># draw a triangle</span>
        draw.polygon(
            (x0, y0, x1, (y0+y1)/2, x0, y1),
            self.ui_brush(<span class="pystring">"gold"</span>)
        )</pre><p>Here&#8217;s the resulting widget:</p><blockquote>
<img alt="" height="127" src="/media/cache/4b7fe5a7f7746e8972cc1d061c2c6129.png" width="112" />
</blockquote><p>Note that if the polygon intersects itself, the standard drawing
interface will fill all interior regions (in technical terms, the WCK
uses the <i>zero-winding fill rule</i>):</p><pre class="python">
<span class="pykeyword">from</span> WCK <span class="pykeyword">import</span> Widget

<span class="pykeyword">class</span> <span class="pyclass">StarWidget</span>(Widget):

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        pen = self.ui_pen(<span class="pystring">"black"</span>, 1)
        brush = self.ui_brush(<span class="pystring">"red"</span>)

        <span class="pycomment"># draw a filled star</span>
        xy = []
        <span class="pykeyword">for</span> x, y <span class="pykeyword">in</span> [(2,35),(98,35),(21,90),(50,0),(79,90)]:
            xy.append(x0 + x*(x1-x0)/100)
            xy.append(y0 + y*(y1-y0)/100)
        draw.polygon(xy, pen, brush)</pre><blockquote>
<img alt="" height="127" src="/media/cache/30e46d8fd76e5d4f11d94a35ecd0da4d.png" width="112" />
</blockquote><p>To draw text, use the <b>text</b> method.  To determine the width
and height of the text, you can use the <b>textsize</b> method.  The
following example uses both methods to draw some right-aligned text in
the widget area:</p><pre class="python">
<span class="pykeyword">class</span> <span class="pyclass">MessageWidget</span>(Widget):

    message = [<span class="pystring">"this is a"</span>, <span class="pystring">"very simple"</span>, <span class="pystring">"message"</span>, <span class="pystring">"widget"</span>]

    <span class="pykeyword">def</span> <span class="pyfunction">ui_handle_repair</span>(self, draw, x0, y0, x1, y1):
        font = self.ui_font(<span class="pystring">"blue"</span>, <span class="pystring">"helvetica"</span>)

        <span class="pycomment"># draw some right-aligned text</span>
        y = y0
        <span class="pykeyword">for</span> text <span class="pykeyword">in</span> self.message:
            w, h = draw.textsize(text, font)
            draw.text((x1 - w, y), text, font)
            y = y + h</pre><p>The <b>text</b> method takes a single coordinate (where to draw the
upper left corner of the text string), a text string, and a font
object.</p><p>Here&#8217;s the resulting widget:</p><blockquote>
<img alt="" height="127" src="/media/cache/ad642725c432a4b60af8ccc18d6ef6d2.png" width="112" />
</blockquote><h2 id="data-types">Data Types&#160;<a class="nav" href="#data-types" title="bookmark!">#</a></h2><h3>Coordinates</h3><p>The WCK coordinate system uses pixel coordinates, with (0, 0) in
the widget&#8217;s upper left corner.  To specify a rectangle, four
coordinates are needed (left, top, right, bottom).  To specify a
polygon, you need to specify at least three coordinate pairs (x0, y0,
x1, y1, x2, y2).</p><p>Note that coordinates must be given as &#8216;flattened&#8217; Python
sequences; PIL&#8217;s [(x, y), (x, y), &#8230;] format is not supported.</p><h3>Colors</h3><p>Colors are given as X-style color names, hexadecimal color
specifiers (&#8220;#rrggbb&#8221;), or packed RGB integers (0xrrggbb).  Examples
(all specifying the same color):
<blockquote><pre class="python">
    <span class="pystring">"red"</span>
    <span class="pystring">"#ff0000"</span>
    0xff0000</pre></blockquote></p><p>The exact set of available color names is somewhat platform
dependent, but most english names are available.  If you need more
control, use hexadecimal specifiers.</p><h3>Pens</h3><p>Pen objects are used to draw lines, as well as the outline of
shapes like rect