<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>A Safe Read&nbsp;Function</title></head><body data-page-id="256"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">A Safe Read&nbsp;Function</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Fredrik Lundh | June 2007</p><p>The file <b>read</b> method takes an optional <i>size</i> argument, which tells Python how much data you want to read from the file.  If this argument is
used, Python allocates a buffer large enough to hold <i>size</i> bytes of
data, reads that much data from the file, and finally adjusts the size of
the resulting buffer to match the amount of data actually read from the file.

</p><p>This is all and well if you&#8217;re using a fixed size, or trust the source,
but if you&#8217;re getting the size from somewhere else, your program might
misbehave badly if it gets broken data.

</p><p>For example, the following snippet reads an 8-byte header from a binary
file, where the first four bytes is a constant string, and the next four bytes contains the size of the following data block.

<pre class="python">
header = fp.read(8)
tag, size = struct.unpack(<span class="pystring">"4si"</span>, header)
<span class="pykeyword">if</span> tag != <span class="pystring">"HEAD"</span>:
    <span class="pykeyword">raise</span> IOError(<span class="pystring">"invalid header"</span>)
data = fp.read(size)</pre></p><p>If the size field contains bogus data (accidentally or on purpose), the
<b>read</b> call may attempt to allocate hundreds of megabytes of memory, or gigabytes, even if the file isn&#8217;t close to being that large.  If you&#8217;re
lucky, this results in a memory error, but it may also cause excessive
swapping, or otherwise affect other processes on the same machine.</p><p>Here&#8217;s a simple replacement.  This behaves like an ordinary <b>read(size)</b> call, but doesn&#8217;t blindly overallocate.

<pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">safe_read</span>(fp, size, blocksize=1024*1024):
    <span class="pykeyword">if</span> size &lt;= 0:
        <span class="pykeyword">return</span> <span class="pystring">""</span>
    <span class="pykeyword">if</span> size &lt;= blocksize:
        <span class="pykeyword">return</span> fp.read(size)
    data = []
    <span class="pykeyword">while</span> size &gt; 0:
        block = fp.read(min(size, blocksize))
        <span class="pykeyword">if</span> <span class="pykeyword">not</span> block:
            <span class="pykeyword">break</span>
        data.append(block)
        size = size - len(block)
    <span class="pykeyword">return</span> <span class="pystring">""</span>.join(data)</pre></p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
