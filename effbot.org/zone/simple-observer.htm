<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Simple&nbsp;Observer</title></head><body data-page-id="268"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Simple&nbsp;Observer</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Updated February 19, 2003 | Fredrik Lundh</p><p>The <b>Observable</b> class is a simple mixin class which can
be used to make container objects &#8220;observable&#8221;.  An observable container
issues events when being modified, and external &#8220;observers&#8221; can subscribe
to such events.</p><p>For a more advanced event dispatching library, see
<a href="http://pydispatcher.sourceforge.net/">PyDispatcher</a>.

<div class="example">
<b>The Observable Mixin Class</b>
<pre class="python">
<span class="pykeyword">class</span> <span class="pyclass">Observable</span>:

    __observers = None

    <span class="pykeyword">def</span> <span class="pyfunction">addobserver</span>(self, observer):
        <span class="pykeyword">if</span> <span class="pykeyword">not</span> self.__observers:
            self.__observers = []
        self.__observers.append(observer)

    <span class="pykeyword">def</span> <span class="pyfunction">removeobserver</span>(self, observer):
        self.__observers.remove(observer)

    <span class="pykeyword">def</span> <span class="pyfunction">notify</span>(self, event, data=None):
        <span class="pykeyword">for</span> o <span class="pykeyword">in</span> self.__observers <span class="pykeyword">or</span> ():
            o(event, data)</pre></div><h3 id="usage">Usage&#160;<a class="nav" href="#usage" title="bookmark!">#</a></h3></p><p>To use this class, you can simply inherit from it:</p><pre class="python">
<span class="pykeyword">class</span> <span class="pyclass">Model</span>(Observable):

    <span class="pykeyword">def</span> <span class="pyfunction">append</span>(self, data):
        self.notify(<span class="pystring">"update"</span>)

<span class="pykeyword">class</span> <span class="pyclass">Viewer</span>:

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, model):
        self.model = model
        self.model.addobserver(self.handle_notification)

    <span class="pykeyword">def</span> <span class="pyfunction">__del__</span>(self, model):
        self.model.removeobserver(self.handle_notification)

    <span class="pykeyword">def</span> <span class="pyfunction">handle_notification</span>(self, event, data):
        ...</pre><p>You can also use multiple inheritance to turn an existing model
class into an observable object:</p><pre class="python">
<span class="pykeyword">class</span> <span class="pyclass">StorageModel</span>(Storage, Observable):

    <span class="pykeyword">def</span> <span class="pyfunction">insert</span>(self, data):
        Storage.insert(self, data) <span class="pycomment"># delegate</span>
        self.notify(<span class="pystring">"addrecord"</span>, data) <span class="pycomment"># notify</span></pre><h3 id="methods">Methods&#160;<a class="nav" href="#methods" title="bookmark!">#</a></h3><dl><dt><b>addobserver</b>(<i>observer</i>)</dt><dd><p>The <b>addobserver</b> method adds an observer object to the
container.  The observer should be a callable object which takes two
arguments (the event code and associated data).</p></dd>
<dt><b>removeobserver</b>(<i>observer</i>)</dt><dd><p>The <b>removeobserver</b> method removes the given observer
object from the container.  The observer must exist.</p></dd>
<dt><b>notify</b>(<i>event, data</i>)</dt><dd><p>The <b>notify</b> method sends an event and associated data to
all observers.  If the data argument is omitted, <b>None</b> is used
instead.</p><p>The event can be any kind of object, but is usually an integer
constant or an instance of an event class hierarchy (which allows
the observer to use <b>isinstance</b> to check for event categories).</p><p>If an observer raises an exception, it&#8217;s undefined (by the
interface, not by this specific implementation) whether any other
observers will be called.  The exception itself is propagated back to
the caller.</p></dd>
</dl></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><ul><li><a href="#usage">Usage</a></li><li><a href="#methods">Methods</a></li></ul></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
