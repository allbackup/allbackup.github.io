
@@module stat

<h1>stat&#8212;Interpreting stat() results</h1>

<p>The {@link stat} module defines constants and functions for
interpreting the results of {@link os.stat}, {@link os.fstat} and {@link
os.lstat} (if they exist). For complete details about the {@link
c:stat}, {@link c:fstat} and {@link c:lstat} calls, consult the
documentation for your system.

<p>The {@link stat} module defines the following functions to test for
specific file types:

@@function S_ISDIR(mode)

<p>Return non-zero if the mode is from a directory.

@@function S_ISCHR(mode)

<p>Return non-zero if the mode is from a character special device file.

@@function S_ISBLK(mode)

<p>Return non-zero if the mode is from a block special device file.

@@function S_ISREG(mode)

<p>Return non-zero if the mode is from a regular file.

@@function S_ISFIFO(mode)

<p>Return non-zero if the mode is from a FIFO (named pipe).

@@function S_ISLNK(mode)

<p>Return non-zero if the mode is from a symbolic link.

@@function S_ISSOCK(mode)

<p>Return non-zero if the mode is from a socket.

@@text 

<p>Two additional functions are defined for more general manipulation of
the file's mode:

@@function S_IMODE(mode)

<p>Return the portion of the file's mode that can be set by {@link
os.chmod}--that is, the file's permission bits, plus the sticky bit,
set-group-id, and set-user-id bits (on systems that support them).

@@function S_IFMT(mode)

<p>Return the portion of the file's mode that describes the file type
(used by the {@link S_IS*} functions above).

@@text 

<p>Normally, you would use the {@link os.path.is*} functions for testing
the type of a file; the functions here are useful when you are doing
multiple tests of the same file and wish to avoid the overhead of the
{@link c:stat} system call for each test. These are also useful when
checking for information about a file that isn't handled by {@link
os.path}, like the tests for block and character devices.

<p>All the variables below are simply symbolic indexes into the 10-tuple
returned by {@link os.stat}, {@link os.fstat} or {@link os.lstat}.

@@variable ST_MODE

<p>Inode protection mode.

@@variable ST_INO

<p>Inode number.

@@variable ST_DEV

<p>Device inode resides on.

@@variable ST_NLINK

<p>Number of links to the inode.

@@variable ST_UID

<p>User id of the owner.

@@variable ST_GID

<p>Group id of the owner.

@@variable ST_SIZE

<p>Size in bytes of a plain file; amount of data waiting on some special
files.

@@variable ST_ATIME

<p>Time of last access.

@@variable ST_MTIME

<p>Time of last modification.

@@variable ST_CTIME

<p>The &#8220;ctime&#8221; as reported by the operating system. On some
systems (like Unix) is the time of the last metadata change, and, on
others (like Windows), is the creation time (see platform documentation
for details).

@@text 

<p>The interpretation of &#8220;file size&#8221; changes according to
the file type. For plain files this is the size of the file in bytes.
For FIFOs and sockets under most flavors of Unix (including Linux in
particular), the &#8220;size&#8221; is the number of bytes waiting to be
read at the time of the call to {@link os.stat}, {@link os.fstat}, or
{@link os.lstat}; this can sometimes be useful, especially for polling
one of these special files after a non-blocking open. The meaning of the
size field for other character and block devices varies more, depending
on the implementation of the underlying system call.

<p>Example:

<pre>
import os, sys
from stat import *

def walktree(top, callback):
    '''recursively descend the directory tree rooted at top,
       calling the callback function for each regular file'''

    for f in os.listdir(top):
        pathname = os.path.join(top, f)
        mode = os.stat(pathname)[ST_MODE]
        if S_ISDIR(mode):
            # It's a directory, recurse into it
            walktree(pathname, callback)
        elif S_ISREG(mode):
            # It's a file, call the callback function
            callback(pathname)
        else:
            # Unknown file type, print a message
            print 'Skipping %s' % pathname

def visitfile(file):
    print 'visiting', file

if __name__ == '__main__':
    walktree(sys.argv[1], visitfile)
</pre>

