<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Providing XML-RPC Services via&nbsp;CGI</title></head><body data-page-id="377"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Providing XML-RPC Services via&nbsp;CGI</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">February 8, 2002 | Fredrik Lundh</p><p>The following sample script shows how to use the standard CGI
interface to implement a simple XML-RPC responder.  You need to
implement the <b>dispatch</b> method yourself.</p><p><i>This should be turned into a small support class, allowing
the user to override the &#8220;giveup&#8221; and &#8220;dispatch&#8221; methods instead
of modifying the script.  No time for that today, though&#8230; /F</i></p><pre class="python">
<span class="pycomment">#!/usr/bin/python -u</span>
<span class="pycomment"># simple xmlrpc service</span>

<span class="pykeyword">import</span> sys, os, xmlrpclib

sys.stderr = sys.stdout

MAX_REQUEST = 50000

<span class="pykeyword">def</span> <span class="pyfunction">giveup</span>(message):
    <span class="pykeyword">print</span> <span class="pystring">"Status: 400"</span>
    <span class="pykeyword">print</span>
    <span class="pykeyword">print</span> <span class="pystring">"sorry,"</span>, message
    sys.exit(0)

<span class="pykeyword">if</span> os.environ.get(<span class="pystring">"REQUEST_METHOD"</span>) != <span class="pystring">"POST"</span>:
    giveup(<span class="pystring">"invalid request"</span>)

bytes = int(os.environ.get(<span class="pystring">"CONTENT_LENGTH"</span>, 0))
<span class="pykeyword">if</span> bytes &gt; MAX_REQUEST:
    giveup(<span class="pystring">"request too large"</span>)

params, method = xmlrpclib.loads(sys.stdin.read(bytes))

result = dispatch(method, params)

<span class="pykeyword">if</span> <span class="pykeyword">not</span> isinstance(result, type(())):
    result = (result,)

response = xmlrpclib.dumps(result, methodresponse=1)

<span class="pykeyword">print</span> <span class="pystring">"Content-Type: text/xml"</span>
<span class="pykeyword">print</span> <span class="pystring">"Content-Length:"</span>, len(response)
<span class="pykeyword">print</span>
<span class="pykeyword">print</span> response</pre></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
