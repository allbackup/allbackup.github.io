<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Why must dictionary keys be&nbsp;immutable?</title></head><body data-page-id="953"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Why must dictionary keys be&nbsp;immutable?</h1></div><div class="yui-ge"><div class="yui-u first"><p>The hash table implementation of dictionaries uses a <a href="/pyref/hash.htm"><strong>hash</strong></a>
value calculated from the key value to find the key. If the key were a
mutable object, its value could change, and thus its hash could also
change. But since whoever changes the key object can&#8217;t tell that it
was being used as a dictionary key, it can&#8217;t move the entry around in
the dictionary. Then, when you try to look up the same object in the
dictionary it won&#8217;t be found because its hash value is different. If
you tried to look up the old value it wouldn&#8217;t be found either,
because the value of the object found in that hash bin would be
different.</p><p>If you want a dictionary indexed with a list, simply convert the list
to a tuple first; the function <a href="/pyref/tuple.htm"><strong>tuple(L)</strong></a> creates a
tuple with the same entries as the list L. Tuples are immutable and
can therefore be used as dictionary keys.</p><p>Some ideas for alternative implementations have been proposed:</p><p><strong>Hash lists by their address (object ID).</strong> This doesn&#8217;t work because
if you construct a new list with the same value it won&#8217;t be found;
e.g.:</p><pre class="python">d = {[1,2]: <span class="pystring">'12'</span>}
<span class="pykeyword">print</span> d[ [1,2] ]</pre><p>would raise a <a href="/pyref/KeyError.htm"><strong>KeyError</strong></a> exception because the <a href="/pyref/id.htm"><strong>id</strong></a> of the
[1,2] used in the second line differs from that in the first line. In other
words, dictionary keys should be compared using ==, not using <a href="/pyref/is.htm"><strong>is</strong></a>.</p><p><strong>Make a copy when using a list as a key.</strong>  This doesn&#8217;t work because
the list, being a mutable object, could contain a reference to itself,
and then the copying code would run into an infinite loop.</p><p><strong>Allow lists as keys but tell the user not to modify them.</strong> This
would allow a class of hard-to-track bugs in programs when you forgot
or modified a list by accident. It also invalidates an important
invariant of dictionaries: every value in d.keys() is usable as a key
of the dictionary.</p><p><strong>Mark lists as read-only once they are used as a dictionary key.</strong>
The problem is that it&#8217;s not just the top-level object that could
change its value; you could use a tuple containing a list as a
key. Entering anything as a key into a dictionary would require
marking all objects reachable from there as read-only &#8212; and again,
self-referential objects could cause an infinite loop.</p><p>There is a trick to get around this if you need to, but use it at your
own risk: You can wrap a mutable structure inside a class instance
which has both a <a href="/pyref/__cmp__.htm"><strong>__cmp__</strong></a> and a <a href="/pyref/__hash__.htm"><strong>__hash__</strong></a>
method.  You must then make sure that the hash value for all such
wrapper objects that reside in a dictionary (or other hash based
structure), remain fixed while the object is in the dictionary (or
other structure):</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide"><span class="pykeyword">class</span> <span class="pyclass">ListWrapper</span>:
     <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, the_list):
           self.the_list = the_list
     <span class="pykeyword">def</span> <span class="pyfunction">__cmp__</span>(self, other):
           <span class="pykeyword">return</span> self.the_list == other.the_list
     <span class="pykeyword">def</span> <span class="pyfunction">__hash__</span>(self):
           l = self.the_list
           result = 98767 - len(l)*555
           <span class="pykeyword">for</span> i <span class="pykeyword">in</span> range(len(l)):
                <span class="pykeyword">try</span>:
                     result = result + (hash(l[i]) % 9999999) * 1001 + i
                <span class="pykeyword">except</span>:
                     result = (result % 7777777) + i * 333
           <span class="pykeyword">return</span> result</pre></div><div class="yui-ge"><div class="yui-u first"><p>Note that the hash computation is complicated by the possibility that
some members of the list may be unhashable and also by the possibility
of arithmetic overflow.</p><p>Furthermore it must always be the case that if o1 == o2 (i.e.
o1.__cmp__(o2)==0) then hash(o1)==hash(o2) (i.e.,
o1.__hash__() == o2.__hash__()), regardless of whether the
object is in a dictionary or not.  If you fail to meet these
restrictions dictionaries and other hash based structures will
misbehave.</p><p>In the case of ListWrapper, whenever the wrapper object is in a
dictionary the wrapped list must not change to avoid anomalies.  Don&#8217;t
do this unless you are prepared to think hard about the requirements
and the consequences of not meeting them correctly.  Consider yourself
warned.</p><p>CATEGORY: general</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
