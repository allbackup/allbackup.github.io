<html>
<head>
<title>md5 ::: www.effbot.org</title>
<link rel='stylesheet' href='/effbot.css' type='text/css' media='screen' />
</head>
<body bgcolor='#ccffcc'>
<div>[<a href='md5.htm'>back</a>]</div>
<h3>Welcome to the effbot.org user editor!</h3>


<p><b>Note: This is not a contact form!  Support questions, spam, and
other off-topic stuff will be ignored.</b></p>

<p>To suggest changes, edit the HTML fragment in the text box below.
You can use the 'update preview' button to check your changes (the
preview is displayed beneath the text box).  When done, fill in the
name and address fields (optional) and click 'submit patch' to mail
the patch to me.  (I reserve the right to decide which patches to
include, of course.)  Thanks! /F</p>

<form method='post' id='useredit'>
<input type='hidden' name='name' value='md5'/>
<p>
<input type='submit' name='preview' value='update preview' style='background:#084; color:white; width:200px; font-weight:bold;' >
&nbsp;&nbsp;&nbsp;
<input type='submit' name='submit' value='submit patch'  style='background:#084; color:white; width:200px; font-weight:bold;' >
</p>
<textarea name='text' rows='30' cols='80'>The md5 module

&lt;!-- ADSENSE --&gt;

&lt;p class='site'&gt;[&lt;a href='index.htm'&gt;contents&lt;/a&gt;]&lt;/p&gt;

&lt;p class='note'&gt;&lt;b&gt;Note:&lt;/b&gt; In Python 2.5, this module is a
compatibility wrapper for &lt;a href="hashlib.htm"&gt;hashlib&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This module is used to calculate message signatures (so-called
&lt;span&gt;"message digests"&lt;/span&gt;).&lt;/p&gt;

&lt;p&gt;The MD5 algorithm calculates a strong 128-bit signature. This
means that if two strings are different, it's highly likely that
their MD5 signatures are different as well. Or to put it another
way, given an MD5 digest, it's supposed to be nearly impossible to
come up with a string that generates that digest.&lt;/p&gt;

&lt;p class='note'&gt;&lt;b&gt;Note:&lt;/b&gt;
Since this was written, MD5 has been broken.  It's now relatively
easy to generate files that differ slightly, but have the same MD5
signature, if you can insert random-looking data somewhere in
the file (e.g in a comment, or in a part of the file that's not
used for any other purpose).  Most published attacks use environments
where such differences can be used to control the result in some
way (e.g. a PostScript document that contains two texts, and
code that selects which one to display, or a self-extracting
executable that extracts different files).  While applications that
use MD5 to sign only the data that's actually displayed or extracted
should be safe for now, use of MD5 in new applications should be
avoided.
&lt;/p&gt;


&lt;div class="example"&gt;

&lt;b style="example"&gt;Example: Using the md5
module&lt;/b&gt;
&lt;pre&gt;
# File: &lt;a href="md5-example-1.py"&gt;md5-example-1.py&lt;/a&gt;

import md5

hash = md5.new()
hash.update("spam, spam, and eggs")

print repr(hash.digest())

&lt;/pre&gt;

&lt;pre class="computeroutput" moreinfo="NONE"&gt;
'L\005J\243\266\355\243u`\305r\203\267\020F\303'
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that the checksum is returned as a binary string. Getting a
hexadecimal or base64-encoded string is quite easy, though:&lt;/p&gt;

&lt;div class="example"&gt;

&lt;b style="example"&gt;Example: Using the md5
module to get a hexadecimal or base64-encoded md5 value&lt;/b&gt;

&lt;pre&gt;
# File: &lt;a href="md5-example-2.py"&gt;md5-example-2.py&lt;/a&gt;

import md5
import string
import base64

hash = md5.new()
hash.update("spam, spam, and eggs")

value = hash.digest()

print hash.hexdigest()

# in Python 1.5.2 and earlier, use this instead:
# print string.join(map(lambda v: "%02x" % ord(v), value), "")

print base64.encodestring(value)

&lt;/pre&gt;

&lt;pre class="computeroutput" moreinfo="NONE"&gt;
4c054aa3b6eda37560c57283b71046c3
TAVKo7bto3VgxXKDtxBGww==
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Among other things, the MD5 checksum can be used for
challenge-response authentication (but see the note on random
numbers below):&lt;/p&gt;

&lt;div class="example"&gt;

&lt;b style="example"&gt;Example: Using the md5
module for challenge-response authentication&lt;/b&gt;
&lt;pre&gt;
# File: &lt;a href="md5-example-3.py"&gt;md5-example-3.py&lt;/a&gt;

import md5
import string, random

def getchallenge():
    # generate a 16-byte long random string.  (note that the built-
    # in pseudo-random generator uses a 24-bit seed, so this is not
    # as good as it may seem...)
    challenge = map(lambda i: chr(random.randint(0, 255)), range(16))
    return string.join(challenge, "")

def getresponse(password, challenge):
    # calculate combined digest for password and challenge
    m = md5.new()
    m.update(password)
    m.update(challenge)
    return m.digest()

#
# server/client communication

# 1. client connects.  server issues challenge.

print "client:", "connect"

challenge = getchallenge()

print "server:", repr(challenge)

# 2. client combines password and challenge, and calculates
# the response

client_response = getresponse("trustno1", challenge)

print "client:", repr(client_response)

# 3. server does the same, and compares the result with the
# client response.  the result is a safe login in which the
# password is never sent across the communication channel.

server_response = getresponse("trustno1", challenge)

if server_response == client_response:
    print "server:", "login ok"

&lt;/pre&gt;

&lt;pre class="computeroutput" moreinfo="NONE"&gt;
client: connect
server: '\334\352\227Z#\272\273\212KG\330\265\032&amp;gt;\311o'
client: "l'\305\240-x\245\237\035\225A\254\233\337\225\001"
server: login ok
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A variation of this can be used to sign messages sent over a
public network, so that their integrity can be verified at the
receiving end.&lt;/p&gt;

&lt;div class="example"&gt;

&lt;b style="example"&gt;Example: Using the md5
module for data integrity checks&lt;/b&gt;
&lt;pre&gt;
# File: &lt;a href="md5-example-4.py"&gt;md5-example-4.py&lt;/a&gt;

import md5
import array

class HMAC_MD5:
    # keyed MD5 message authentication

    def __init__(self, key):
        if len(key) &amp;gt; 64:
            key = md5.new(key).digest()
        ipad = array.array("B", [0x36] * 64)
        opad = array.array("B", [0x5C] * 64)
        for i in range(len(key)):
            ipad[i] = ipad[i] ^ ord(key[i])
            opad[i] = opad[i] ^ ord(key[i])
        self.ipad = md5.md5(ipad.tostring())
        self.opad = md5.md5(opad.tostring())

    def digest(self, data):
        ipad = self.ipad.copy()
        opad = self.opad.copy()
        ipad.update(data)
        opad.update(ipad.digest())
        return opad.digest()

#
# simulate server end

key = "this should be a well-kept secret"
message = open("samples/sample.txt").read()

signature = HMAC_MD5(key).digest(message)

# (send message and signature across a public network)

#
# simulate client end

key = "this should be a well-kept secret"

client_signature = HMAC_MD5(key).digest(message)

if client_signature == signature:
    print "this is the original message:"
    print
    print message
else:
    print "someone has modified the message!!!"
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;b&gt;copy&lt;/b&gt; method takes a snapshot of the internal object
state. This allows you to precalculate partial digests (such as the
padded key, in this example).&lt;/p&gt;

&lt;p&gt;For details on this algorithm, see &lt;a href="http://www.research.ibm.com/security/draft-ietf-ipsec-hmac-md5-00.txt"&gt;
&lt;i&gt;HMAC-MD5: Keyed-MD5 for Message Authentication&lt;/i&gt;&lt;/a&gt; by
Krawczyk et al.&lt;/p&gt;

&lt;p class="note"&gt;&lt;b&gt;Warning:&lt;/b&gt;
Don't forget that the built-in psuedo random number generator
isn't really good enough for encryption purposes. Be careful.
&lt;/p&gt;</textarea>
<table>
<tr><td><label for='author'>Name:</label></td><td>
<div><input name='author' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='email'>Mail:</label></td><td>
<div><input name='email' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='note'>Comment:</label></td><td>
<div><input name='note' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='password'>Password:</label></td><td>
<div><input name='password' value="(replace with the sum of 7+4)" size=40></div>
</td><td>(Required)</td></tr>
</table>
<p>
<input type='submit' name='preview' value='update preview' style='background:#084; color:white; width:200px; font-weight:bold;' >
&nbsp;&nbsp;&nbsp;
<input type='submit' name='submit' value='submit patch'  style='background:#084; color:white; width:200px; font-weight:bold;' >
</p>
<p>&nbsp;</p>
</form>
<div style='background: white; border: 2px solid #084; padding: 0px 20px;'>
<h2>The md5 module</h2>

<!-- ADSENSE -->

<p class='site'>[<a href='index.htm'>contents</a>]</p>

<p class='note'><b>Note:</b> In Python 2.5, this module is a
compatibility wrapper for <a href="hashlib.htm">hashlib</a>.</p>

<p>This module is used to calculate message signatures (so-called
<span>"message digests"</span>).</p>

<p>The MD5 algorithm calculates a strong 128-bit signature. This
means that if two strings are different, it's highly likely that
their MD5 signatures are different as well. Or to put it another
way, given an MD5 digest, it's supposed to be nearly impossible to
come up with a string that generates that digest.</p>

<p class='note'><b>Note:</b>
Since this was written, MD5 has been broken.  It's now relatively
easy to generate files that differ slightly, but have the same MD5
signature, if you can insert random-looking data somewhere in
the file (e.g in a comment, or in a part of the file that's not
used for any other purpose).  Most published attacks use environments
where such differences can be used to control the result in some
way (e.g. a PostScript document that contains two texts, and
code that selects which one to display, or a self-extracting
executable that extracts different files).  While applications that
use MD5 to sign only the data that's actually displayed or extracted
should be safe for now, use of MD5 in new applications should be
avoided.
</p>


<div class="example">

<b style="example">Example: Using the md5
module</b>
<pre>
# File: <a href="md5-example-1.py">md5-example-1.py</a>

import md5

hash = md5.new()
hash.update("spam, spam, and eggs")

print repr(hash.digest())

</pre>

<pre class="computeroutput" moreinfo="NONE">
'L\005J\243\266\355\243u`\305r\203\267\020F\303'
</pre>

</div>

<p>Note that the checksum is returned as a binary string. Getting a
hexadecimal or base64-encoded string is quite easy, though:</p>

<div class="example">

<b style="example">Example: Using the md5
module to get a hexadecimal or base64-encoded md5 value</b>

<pre>
# File: <a href="md5-example-2.py">md5-example-2.py</a>

import md5
import string
import base64

hash = md5.new()
hash.update("spam, spam, and eggs")

value = hash.digest()

print hash.hexdigest()

# in Python 1.5.2 and earlier, use this instead:
# print string.join(map(lambda v: "%02x" % ord(v), value), "")

print base64.encodestring(value)

</pre>

<pre class="computeroutput" moreinfo="NONE">
4c054aa3b6eda37560c57283b71046c3
TAVKo7bto3VgxXKDtxBGww==
</pre>

</div>

<p>Among other things, the MD5 checksum can be used for
challenge-response authentication (but see the note on random
numbers below):</p>

<div class="example">

<b style="example">Example: Using the md5
module for challenge-response authentication</b>
<pre>
# File: <a href="md5-example-3.py">md5-example-3.py</a>

import md5
import string, random

def getchallenge():
    # generate a 16-byte long random string.  (note that the built-
    # in pseudo-random generator uses a 24-bit seed, so this is not
    # as good as it may seem...)
    challenge = map(lambda i: chr(random.randint(0, 255)), range(16))
    return string.join(challenge, "")

def getresponse(password, challenge):
    # calculate combined digest for password and challenge
    m = md5.new()
    m.update(password)
    m.update(challenge)
    return m.digest()

#
# server/client communication

# 1. client connects.  server issues challenge.

print "client:", "connect"

challenge = getchallenge()

print "server:", repr(challenge)

# 2. client combines password and challenge, and calculates
# the response

client_response = getresponse("trustno1", challenge)

print "client:", repr(client_response)

# 3. server does the same, and compares the result with the
# client response.  the result is a safe login in which the
# password is never sent across the communication channel.

server_response = getresponse("trustno1", challenge)

if server_response == client_response:
    print "server:", "login ok"

</pre>

<pre class="computeroutput" moreinfo="NONE">
client: connect
server: '\334\352\227Z#\272\273\212KG\330\265\032&gt;\311o'
client: "l'\305\240-x\245\237\035\225A\254\233\337\225\001"
server: login ok
</pre>

</div>

<p>A variation of this can be used to sign messages sent over a
public network, so that their integrity can be verified at the
receiving end.</p>

<div class="example">

<b style="example">Example: Using the md5
module for data integrity checks</b>
<pre>
# File: <a href="md5-example-4.py">md5-example-4.py</a>

import md5
import array

class HMAC_MD5:
    # keyed MD5 message authentication

    def __init__(self, key):
        if len(key) &gt; 64:
            key = md5.new(key).digest()
        ipad = array.array("B", [0x36] * 64)
        opad = array.array("B", [0x5C] * 64)
        for i in range(len(key)):
            ipad[i] = ipad[i] ^ ord(key[i])
            opad[i] = opad[i] ^ ord(key[i])
        self.ipad = md5.md5(ipad.tostring())
        self.opad = md5.md5(opad.tostring())

    def digest(self, data):
        ipad = self.ipad.copy()
        opad = self.opad.copy()
        ipad.update(data)
        opad.update(ipad.digest())
        return opad.digest()

#
# simulate server end

key = "this should be a well-kept secret"
message = open("samples/sample.txt").read()

signature = HMAC_MD5(key).digest(message)

# (send message and signature across a public network)

#
# simulate client end

key = "this should be a well-kept secret"

client_signature = HMAC_MD5(key).digest(message)

if client_signature == signature:
    print "this is the original message:"
    print
    print message
else:
    print "someone has modified the message!!!"
</pre>

</div>

<p>The <b>copy</b> method takes a snapshot of the internal object
state. This allows you to precalculate partial digests (such as the
padded key, in this example).</p>

<p>For details on this algorithm, see <a href="http://www.research.ibm.com/security/draft-ietf-ipsec-hmac-md5-00.txt">
<i>HMAC-MD5: Keyed-MD5 for Message Authentication</i></a> by
Krawczyk et al.</p>

<p class="note"><b>Warning:</b>
Don't forget that the built-in psuedo random number generator
isn't really good enough for encryption purposes. Be careful.
</p>
</div>
</body>
</html>
