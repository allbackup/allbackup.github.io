
@@module unittest

<h1>unittest&#8212;Unit testing framework</h1>

<p>New in version 2.1.

<p>The Python unit testing framework, often referred to as
&#8220;PyUnit,&#8221; is a Python language version of JUnit, by Kent
Beck and Erich Gamma. JUnit is, in turn, a Java version of Kent's
Smalltalk testing framework. Each is the de facto standard unit testing
framework for its respective language.

<p>PyUnit supports test automation, sharing of setup and shutdown code
for tests, aggregation of tests into collections, and independence of
the tests from the reporting framework. The {@link unittest} module
provides classes that make it easy to support these qualities for a set
of tests.

<p>To achieve this, PyUnit supports some important concepts:

@@variable test fixture
@@unknown A test fixture represents the preparation needed to perform one or more tests, and any associate cleanup actions. This may involve, for example, creating temporary or proxy databases, directories, or starting a server process.
@@variable test case
@@class A test case is the smallest unit of testing. It checks for a specific response to a particular set of inputs. PyUnit provides a base class, TestCase, which may be used to create new test cases. You may provide your own implementation that does not subclass from TestCase, of course.
@@variable test suite
@@unknown A test suite is a collection of test cases, test suites, or both. It is used to aggregate tests that should be executed together.
@@variable test runner

<p>A test runner is a component which orchestrates the execution of
tests and provides the outcome to the user. The runner may use a
graphical interface, a textual interface, or return a special value to
indicate the results of executing the tests.

@@text 

<p>The test case and test fixture concepts are supported through the
{@link TestCase} and {@link FunctionTestCase} classes; the former should
be used when creating new tests, and the latter can be used when
integrating existing test code with a PyUnit-driven framework. When
building test fixtures using {@link TestCase}, the {@link setUp} and
{@link tearDown} methods can be overridden to provide initialization and
cleanup for the fixture. With {@link FunctionTestCase}, existing
functions can be passed to the constructor for these purposes. When the
test is run, the fixture initialization is run first; if it succeeds,
the cleanup method is run after the test has been executed, regardless
of the outcome of the test. Each instance of the {@link TestCase} will
only be used to run a single test method, so a new fixture is created
for each test.

<p>Test suites are implemented by the {@link TestSuite} class. This
class allows individual tests and test suites to be aggregated; when the
suite is executed, all tests added directly to the suite and in
&#8220;child&#8221; test suites are run.

<p>A test runner is an object that provides a single method, {@link
run}, which accepts a {@link TestCase} or {@link TestSuite} object as a
parameter, and returns a result object. The class {@link TestResult} is
provided for use as the result object. PyUnit provide the {@link
TextTestRunner} as an example test runner which reports test results on
the standard error stream by default. Alternate runners can be
implemented for other environments (such as graphical environments)
without any need to derive from a specific class.

@see 
{@link doctest Module doctest}

Another test-support module with a very different flavor.
@see 
{@link http://pyunit.sourceforge.net/ PyUnit Web Site}

The source for further information on PyUnit.
@see 
{@link http://www.XProgramming.com/testfram.htm Simple Smalltalk Testing: With Patterns}

Kent Beck's original paper on testing frameworks using the pattern
shared by unittest.

<h2>Basic example</h2>

<p>The {@link unittest} module provides a rich set of tools for
constructing and running tests. This section demonstrates that a small
subset of the tools suffice to meet the needs of most users.

<p>Here is a short script to test three functions from the {@link
random} module:

<pre>
import random
import unittest

class TestSequenceFunctions(unittest.TestCase):
    
    def setUp(self):
        self.seq = range(10)

    def testshuffle(self):
        # make sure the shuffled sequence does not lose any elements
        random.shuffle(self.seq)
        self.seq.sort()
        self.assertEqual(self.seq, range(10))

    def testchoice(self):
        element = random.choice(self.seq)
        self.assert_(element in self.seq)

    def testsample(self):
        self.assertRaises(ValueError, random.sample, self.seq, 20)
        for element in random.sample(self.seq, 5):
            self.assert_(element in self.seq)

if __name__ == '__main__':
    unittest.main()
</pre>


<p>A testcase is created by subclassing {@link unittest.TestCase}. The
three individual tests are defined with methods whose names start with
the letters "{@code test}". This naming convention informs the test
runner about which methods represent tests.

<p>The crux of each test is a call to {@link assertEqual} to check for
an expected result; {@link assert_} to verify a condition; or {@link
assertRaises} to verify that an expected exception gets raised. These
methods are used instead of the {@link assert} statement so the test
runner can accumulate all test results and produce a report.

<p>When a {@link setUp} method is defined, the test runner will run that
method prior to each test. Likewise, if a {@link tearDown} method is
defined, the test runner will invoke that method after each test. In the
example, {@link setUp} was used to create a fresh sequence for each
test.

<p>The final block shows a simple way to run the tests. {@link
unittest.main} provides a command line interface to the test script.
When run from the command line, the above script produces an output that
looks like this:

<pre>
...
----------------------------------------------------------------------
Ran 3 tests in 0.000s

OK
</pre>


<p>Instead of {@link unittest.main}, there are other ways to run the
tests with a finer level of control, less terse output, and no
requirement to be run from the command line. For example, the last two
lines may be replaced with:

<pre>
suite = unittest.makeSuite(TestSequenceFunctions)
unittest.TextTestRunner(verbosity=2).run(suite)
</pre>


<p>Running the revised script from the interpreter or another script
produces the following output:

<pre>
testchoice (__main__.TestSequenceFunctions) ... ok
testsample (__main__.TestSequenceFunctions) ... ok
testshuffle (__main__.TestSequenceFunctions) ... ok

----------------------------------------------------------------------
Ran 3 tests in 0.110s

OK
</pre>


<p>The above examples show the most commonly used {@link unittest}
features which are sufficient to meet many everyday testing needs. The
remainder of the documentation explores the full feature set from first
principles.

<h2>Organizing test code</h2>

<p>The basic building blocks of unit testing are test cases -- single
scenarios that must be set up and checked for correctness. In PyUnit,
test cases are represented by instances of the {@link TestCase} class in
the {@link unittest} module. To make your own test cases you must write
subclasses of {@link TestCase}, or use {@link FunctionTestCase}.

<p>An instance of a {@link TestCase}-derived class is an object that can
completely run a single test method, together with optional set-up and
tidy-up code.

<p>The testing code of a {@link TestCase} instance should be entirely
self contained, such that it can be run either in isolation or in
arbitrary combination with any number of other test cases.

<p>The simplest test case subclass will simply override the {@link
runTest} method in order to perform specific testing code:

<pre>
import unittest

class DefaultWidgetSizeTestCase(unittest.TestCase):
    def runTest(self):
        widget = Widget("The widget")
        self.failUnless(widget.size() == (50,50), 'incorrect default size')
</pre>


<p>Note that in order to test something, we use the one of the {@link
assert*} or {@link fail*} methods provided by the {@link TestCase} base
class. If the test fails when the test case runs, an exception will be
raised, and the testing framework will identify the test case as a
failure. Other exceptions that do not arise from checks made through the
{@link assert*} and {@link fail*} methods are identified by the testing
framework as dfnerrors.

<p>The way to run a test case will be described later. For now, note
that to construct an instance of such a test case, we call its
constructor without arguments:

<pre>
testCase = DefaultWidgetSizeTestCase()
</pre>


<p>Now, such test cases can be numerous, and their set-up can be
repetitive. In the above case, constructing a &#8220;Widget&#8221; in
each of 100 Widget test case subclasses would mean unsightly
duplication.

<p>Luckily, we can factor out such set-up code by implementing a method
called {@link setUp}, which the testing framework will automatically
call for us when we run the test:

<pre>
import unittest

class SimpleWidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget("The widget")

class DefaultWidgetSizeTestCase(SimpleWidgetTestCase):
    def runTest(self):
        self.failUnless(self.widget.size() == (50,50),
                        'incorrect default size')

class WidgetResizeTestCase(SimpleWidgetTestCase):
    def runTest(self):
        self.widget.resize(100,150)
        self.failUnless(self.widget.size() == (100,150),
                        'wrong size after resize')
</pre>


<p>If the {@link setUp} method raises an exception while the test is
running, the framework will consider the test to have suffered an error,
and the {@link runTest} method will not be executed.

<p>Similarly, we can provide a {@link tearDown} method that tidies up
after the {@link runTest} method has been run:

<pre>
import unittest

class SimpleWidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget("The widget")

    def tearDown(self):
        self.widget.dispose()
        self.widget = None
</pre>


<p>If {@link setUp} succeeded, the {@link tearDown} method will be run
regardless of whether or not {@link runTest} succeeded.

<p>Such a working environment for the testing code is called a fixture.

<p>Often, many small test cases will use the same fixture. In this case,
we would end up subclassing {@link SimpleWidgetTestCase} into many small
one-method classes such as {@link DefaultWidgetSizeTestCase}. This is
time-consuming and discouraging, so in the same vein as JUnit, PyUnit
provides a simpler mechanism:

<pre>
import unittest

class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget("The widget")

    def tearDown(self):
        self.widget.dispose()
        self.widget = None

    def testDefaultSize(self):
        self.failUnless(self.widget.size() == (50,50),
                        'incorrect default size')

    def testResize(self):
        self.widget.resize(100,150)
        self.failUnless(self.widget.size() == (100,150),
                        'wrong size after resize')
</pre>


<p>Here we have not provided a {@link runTest} method, but have instead
provided two different test methods. Class instances will now each run
one of the {@link test*} methods, with {@code self.widget} created and
destroyed separately for each instance. When creating an instance we
must specify the test method it is to run. We do this by passing the
method name in the constructor:

<pre>
defaultSizeTestCase = WidgetTestCase("testDefaultSize")
resizeTestCase = WidgetTestCase("testResize")
</pre>


<p>Test case instances are grouped together according to the features
they test. PyUnit provides a mechanism for this: the {@link test suite},
represented by the class {@link TestSuite} in the {@link unittest}
module:

<pre>
widgetTestSuite = unittest.TestSuite()
widgetTestSuite.addTest(WidgetTestCase("testDefaultSize"))
widgetTestSuite.addTest(WidgetTestCase("testResize"))
</pre>


<p>For the ease of running tests, as we will see later, it is a good
idea to provide in each test module a callable object that returns a
pre-built test suite:

<pre>
def suite():
    suite = unittest.TestSuite()
    suite.addTest(WidgetTestCase("testDefaultSize"))
    suite.addTest(WidgetTestCase("testResize"))
    return suite
</pre>


<p>or even:

<pre>
class WidgetTestSuite(unittest.TestSuite):
    def __init__(self):
        unittest.TestSuite.__init__(self,map(WidgetTestCase,
                                              ("testDefaultSize",
                                               "testResize")))
</pre>


<p>(The latter is admittedly not for the faint-hearted!)

<p>Since it is a common pattern to create a {@link TestCase} subclass
with many similarly named test functions, there is a convenience
function called {@link makeSuite} that constructs a test suite that
comprises all of the test cases in a test case class:

<pre>
suite = unittest.makeSuite(WidgetTestCase)
</pre>


<p>Note that when using the {@link makeSuite} function, the order in
which the various test cases will be run by the test suite is the order
determined by sorting the test function names using the {@link cmp}
built-in function.

<p>Often it is desirable to group suites of test cases together, so as
to run tests for the whole system at once. This is easy, since {@link
TestSuite} instances can be added to a {@link TestSuite} just as {@link
TestCase} instances can be added to a {@link TestSuite}:

<pre>
suite1 = module1.TheTestSuite()
suite2 = module2.TheTestSuite()
alltests = unittest.TestSuite((suite1, suite2))
</pre>


<p>You can place the definitions of test cases and test suites in the
same modules as the code they are to test (such as widget.py), but there
are several advantages to placing the test code in a separate module,
such as widgettests.py:
<ul>
<li>
<p>The test module can be run standalone from the command line.
<li>
<p>The test code can more easily be separated from shipped code.
<li>
<p>There is less temptation to change test code to fit the code it tests
without a good reason.
<li>
<p>Test code should be modified much less frequently than the code it
tests.
<li>
<p>Tested code can be refactored more easily.
<li>
<p>Tests for modules written in C must be in separate modules anyway, so
why not be consistent?
<li>
<p>If the testing strategy changes, there is no need to change the
source code.
</ul>

<h2>Re-using old test code</h2>

<p>Some users will find that they have existing test code that they
would like to run from PyUnit, without converting every old test
function to a {@link TestCase} subclass.

<p>For this reason, PyUnit provides a {@link FunctionTestCase} class.
This subclass of {@link TestCase} can be used to wrap an existing test
function. Set-up and tear-down functions can also optionally be wrapped.

<p>Given the following test function:

<pre>
def testSomething():
    something = makeSomething()
    assert something.name is not None
    # ...
</pre>


<p>one can create an equivalent test case instance as follows:

<pre>
testcase = unittest.FunctionTestCase(testSomething)
</pre>


<p>If there are additional set-up and tear-down methods that should be
called as part of the test case's operation, they can also be provided:

<pre>
testcase = unittest.FunctionTestCase(testSomething,
                                     setUp=makeSomethingDB,
                                     tearDown=deleteSomethingDB)
</pre>



<p class='note'><b>Note:</b> PyUnit supports the use of {@link
exceptions.AssertionError} as an indicator of test failure, but does not
recommend it. Future versions may treat {@link
exceptions.AssertionError} differently.

<h2>Classes and functions</h2>

@@class TestCase()

<p>Instances of the {@link TestCase} class represent the smallest
testable units in a set of tests. This class is intended to be used as a
base class, with specific tests being implemented by concrete
subclasses. This class implements the interface needed by the test
runner to allow it to drive the test, and methods that the test code can
use to check for and report various kinds of failures.

@@class FunctionTestCase(testFunc[, setUp[, tearDown[, description]]])

<p>This class implements the portion of the {@link TestCase} interface
which allows the test runner to drive the test, but does not provide the
methods which test code can use to check and report errors. This is used
to create test cases using legacy test code, allowing it to be
integrated into a {@link unittest}-based test framework.

@@class TestSuite([tests])

<p>This class represents an aggregation of individual tests cases and
test suites. The class presents the interface needed by the test runner
to allow it to be run as any other test case, but all the contained
tests and test suites are executed. Additional methods are provided to
add test cases and suites to the aggregation. If {@var tests} is given,
it must be a sequence of individual tests that will be added to the
suite.

@@class TestLoader()

<p>This class is responsible for loading tests according to various
criteria and returning them wrapped in a {@link TestSuite}. It can load
all tests within a given module or {@link TestCase} class. When loading
from a module, it considers all {@link TestCase}-derived classes. For
each such class, it creates an instance for each method with a name
beginning with the string "{@code test}".

@@variable defaultTestLoader

<p>Instance of the {@link TestLoader} class which can be shared. If no
customization of the {@link TestLoader} is needed, this instance can
always be used instead of creating new instances.

@@class TextTestRunner([stream[, descriptions[, verbosity]]])

<p>A basic test runner implementation which prints results on standard
output. It has a few configurable parameters, but is essentially very
simple. Graphical applications which run test suites should provide
alternate implementations.

@@function main([module[, defaultTest[, argv[, testRunner[, testRunner]]]]])

<p>A command-line program that runs a set of tests; this is primarily
for making test modules conveniently executable. The simplest use for
this function is:

<pre>
if __name__ == '__main__':
    unittest.main()
</pre>


@@text 

<p>In some cases, the existing tests may have be written using the
{@link doctest} module. If so, that module provides a {@link
DocTestSuite} class that can automatically build {@link
unittest.TestSuite} instances from the existing test code. New in
version 2.3.

<h2>TestCase Objects</h2>

<p>Each {@link TestCase} instance represents a single test, but each
concrete subclass may be used to define multiple tests -- the concrete
class represents a single test fixture. The fixture is created and
cleaned up for each test case.

<p>{@link TestCase} instances provide three groups of methods: one group
used to run the test, another used by the test implementation to check
conditions and report failures, and some inquiry methods allowing
information about the test itself to be gathered.

<p>Methods in the first group are:

@@method TestCase.setUp()

<p>Method called to prepare the test fixture. This is called immediately
before calling the test method; any exception raised by this method will
be considered an error rather than a test failure. The default
implementation does nothing.

@@method TestCase.tearDown()

<p>Method called immediately after the test method has been called and
the result recorded. This is called even if the test method raised an
exception, so the implementation in subclasses may need to be
particularly careful about checking internal state. Any exception raised
by this method will be considered an error rather than a test failure.
This method will only be called if the {@link setUp} succeeds,
regardless of the outcome of the test method. The default implementation
does nothing.

@@method TestCase.run([result])

<p>Run the test, collecting the result into the test result object
passed as {@var result}. If {@var result} is omitted or {@code None}, a
temporary result object is created and used, but is not made available
to the caller. This is equivalent to simply calling the {@link TestCase}
instance.

@@method TestCase.debug()

<p>Run the test without collecting the result. This allows exceptions
raised by the test to be propagated to the caller, and can be used to
support running tests under a debugger.

@@text 

<p>The test code can use any of the following methods to check for and
report failures.

@@method TestCase.assert_(expr[, msg])
@@method TestCase.failUnless(expr[, msg])

<p>Signal a test failure if {@var expr} is false; the explanation for
the error will be {@var msg} if given, otherwise it will be {@code
None}.

@@method TestCase.assertEqual(first, second[, msg])
@@method TestCase.failUnlessEqual(first, second[, msg])

<p>Test that {@var first} and {@var second} are equal. If the values do
not compare equal, the test will fail with the explanation given by
{@var msg}, or {@code None}. Note that using {@link failUnlessEqual}
improves upon doing the comparison as the first parameter to {@link
failUnless}: the default value for {@var msg} can be computed to include
representations of both {@var first} and {@var second}.

@@method TestCase.assertNotEqual(first, second[, msg])
@@method TestCase.failIfEqual(first, second[, msg])

<p>Test that {@var first} and {@var second} are not equal. If the values
do compare equal, the test will fail with the explanation given by {@var
msg}, or {@code None}. Note that using {@link failIfEqual} improves upon
doing the comparison as the first parameter to {@link failUnless} is
that the default value for {@var msg} can be computed to include
representations of both {@var first} and {@var second}.

@@method TestCase.assertAlmostEqual(first, second[, places[, msg]])
@@method TestCase.failUnlessAlmostEqual(first, second[, places[, msg]])

<p>Test that {@var first} and {@var second} are approximately equal by
computing the difference, rounding to the given number of {@var places},
and comparing to zero. Note that comparing a given number of decimal
places is not the same as comparing a given number of significant
digits. If the values do not compare equal, the test will fail with the
explanation given by {@var msg}, or {@code None}.

@@method TestCase.assertNotAlmostEqual(first, second[, places[, msg]])
@@method TestCase.failIfAlmostEqual(first, second[, places[, msg]])

<p>Test that {@var first} and {@var second} are not approximately equal
by computing the difference, rounding to the given number of {@var
places}, and comparing to zero. Note that comparing a given number of
decimal places is not the same as comparing a given number of
significant digits. If the values do not compare equal, the test will
fail with the explanation given by {@var msg}, or {@code None}.

@@method TestCase.assertRaises(exception, callable, ...)
@@method TestCase.failUnlessRaises(exception, callable, ...)

<p>Test that an exception is raised when {@var callable} is called with
any positional or keyword arguments that are also passed to {@link
assertRaises}. The test passes if {@var exception} is raised, is an
error if another exception is raised, or fails if no exception is
raised. To catch any of a group of exceptions, a tuple containing the
exception classes may be passed as {@var exception}.

@@method TestCase.failIf(expr[, msg])

<p>The inverse of the {@link failUnless} method is the {@link failIf}
method. This signals a test failure if {@var expr} is true, with {@var
msg} or {@code None} for the error message.

@@method TestCase.fail([msg])

<p>Signals a test failure unconditionally, with {@var msg} or {@code
None} for the error message.

@@attribute TestCase.failureException

<p>This class attribute gives the exception raised by the {@link test}
method. If a test framework needs to use a specialized exception,
possibly to carry additional information, it must subclass this
exception in order to &#8220;play fair&#8221; with the framework. The
initial value of this attribute is {@link exceptions.AssertionError}.

@@text 

<p>Testing frameworks can use the following methods to collect
information on the test:

@@method TestCase.countTestCases()

<p>Return the number of tests represented by the this test object. For
{@link TestCase} instances, this will always be {@code 1}, but this
method is also implemented by the {@link TestSuite} class, which can
return larger values.

@@method TestCase.defaultTestResult()

<p>Return the default type of test result object to be used to run this
test.

@@method TestCase.id()

<p>Return a string identifying the specific test case. This is usually
the full name of the test method, including the module and class names.

@@method TestCase.shortDescription()

<p>Returns a one-line description of the test, or {@code None} if no
description has been provided. The default implementation of this method
returns the first line of the test method's docstring, if available, or
{@code None}.

@@text 

<h2>TestSuite Objects</h2>

<p>{@link TestSuite} objects behave much like {@link TestCase} objects,
except they do not actually implement a test. Instead, they are used to
aggregate tests into groups that should be run together. Some additional
methods are available to add tests to {@link TestSuite} instances:

@@method TestSuite.addTest(test)

<p>Add a {@link TestCase} or {@link TestSuite} to the set of tests that
make up the suite.

@@method TestSuite.addTests(tests)

<p>Add all the tests from a sequence of {@link TestCase} and {@link
TestSuite} instances to this test suite.

@@text 

<p>The {@link run} method is also slightly different:

@@method TestSuite.run(result)

<p>Run the tests associated with this suite, collecting the result into
the test result object passed as {@var result}. Note that unlike {@link
TestCase.run}, {@link TestSuite.run} requires the result object to be
passed in.

@@text 

<p>In the typical usage of a {@link TestSuite} object, the {@link run}
method is invoked by a {@link TestRunner} rather than by the end-user
test harness.

<h2>TestResult Objects</h2>

<p>A {@link TestResult} object stores the results of a set of tests. The
{@link TestCase} and {@link TestSuite} classes ensure that results are
properly stored; test authors do not need to worry about recording the
outcome of tests.

<p>Testing frameworks built on top of {@link unittest} may want access
to the {@link TestResult} object generated by running a set of tests for
reporting purposes; a {@link TestResult} instance is returned by the
{@link TestRunner.run} method for this purpose.

<p>Each instance holds the total number of tests run, and collections of
failures and errors that occurred among those test runs. The collections
contain tuples of {@code (}{@var testcase}, {@var traceback}), where
{@var traceback} is a string containing a formatted version of the
traceback for the exception.

<p>{@link TestResult} instances have the following attributes that will
be of interest when inspecting the results of running a set of tests:

@@attribute TestResult.errors

<p>A list containing pairs of {@link TestCase} instances and the
formatted tracebacks for tests which raised an exception but did not
signal a test failure.
<blockquote>
@since Changed in version 2.2: Contains formatted
tracebacks instead of sys.exc_info()
results. <br />
</blockquote>

@@attribute TestResult.failures

<p>A list containing pairs of {@link TestCase} instances and the
formatted tracebacks for tests which signalled a failure in the code
under test.
<blockquote>
@since Changed
in version 2.2: Contains formatted tracebacks instead of sys.exc_info() results. <br />
</blockquote>

@@attribute TestResult.testsRun

<p>The number of tests which have been started.

@@method TestResult.wasSuccessful()

<p>Returns true if all tests run so far have passed, otherwise returns
false.

@@text 

<p>The following methods of the {@link TestResult} class are used to
maintain the internal data structures, and may be extended in subclasses
to support additional reporting requirements. This is particularly
useful in building tools which support interactive reporting while tests
are being run.

@@method TestResult.startTest(test)

<p>Called when the test case {@var test} is about to be run.

@@method TestResult.stopTest(test)

<p>Called when the test case {@var test} has been executed, regardless
of the outcome.

@@method TestResult.addError(test, err)

<p>Called when the test case {@var test} raises an exception without
signalling a test failure. {@var err} is a tuple of the form returned by
{@link sys.exc_info}: {@code (}{@var type}, {@var value}, {@var
traceback}).

@@method TestResult.addFailure(test, err)

<p>Called when the test case {@var test} signals a failure. {@var err}
is a tuple of the form returned by {@link sys.exc_info}: {@code (}{@var
type}, {@var value}, {@var traceback}).

@@method TestResult.addSuccess(test)

<p>This method is called for a test that does not fail; {@var test} is
the test case object.

@@text 

<p>One additional method is available for {@link TestResult} objects:

@@method TestResult.stop()

<p>This method can be called to signal that the set of tests being run
should be aborted. Once this has been called, the {@link TestRunner}
object return to its caller without running any additional tests. This
is used by the {@link TextTestRunner} class to stop the test framework
when the user signals an interrupt from the keyboard. Interactive tools
which provide runners can use this in a similar manner.

@@text 

<h2>TestLoader Objects</h2>

<p>The {@link TestLoader} class is used to create test suites from
classes and modules. Normally, there is no need to create an instance of
this class; the {@link unittest} module provides an instance that can be
shared as the {@code defaultTestLoader} module attribute. Using a
subclass or instance would allow customization of some configurable
properties.

<p>{@link TestLoader} objects have the following methods:

@@method TestLoader.loadTestsFromTestCase(testCaseClass)

<p>Return a suite of all tests cases contained in the {@link
TestCase}-derived class {@link testCaseClass}.

@@method TestLoader.loadTestsFromModule(module)

<p>Return a suite of all tests cases contained in the given module. This
method searches {@var module} for classes derived from {@link TestCase}
and creates an instance of the class for each test method defined for
the class.

<p class='warning'><b>Warning:</b> While using a hierarchy of {@link
Testcase}-derived classes can be convenient in sharing fixtures and
helper functions, defining test methods on base classes that are not
intended to be instantiated directly does not play well with this
method. Doing so, however, can be useful when the fixtures are different
and defined in subclasses.

@@method TestLoader.loadTestsFromName(name[, module])

<p>Return a suite of all tests cases given a string specifier.

<p>The specifier {@var name} is a &#8220;dotted name&#8221; that may
resolve either to a module, a test case class, a test method within a
test case class, or a callable object which returns a {@link TestCase}
or {@link TestSuite} instance. For example, if you have a module {@link
SampleTests} containing a {@link TestCase}-derived class {@link
SampleTestCase} with three test methods ({@link test_one}, {@link
test_two}, and {@link test_three}), the specifier {@code
'SampleTests.SampleTestCase'} would cause this method to return a suite
which will run all three test methods. Using the specifier {@code
'SampleTests.SampleTestCase.test_two'} would cause it to return a test
suite which will run only the {@link test_two} test method. The
specifier can refer to modules and packages which have not been
imported; they will be imported as a side-effect.

<p>The method optionally resolves {@var name} relative to a given
module.

@@method TestLoader.loadTestsFromNames(names[, module])

<p>Similar to {@link loadTestsFromName}, but takes a sequence of names
rather than a single name. The return value is a test suite which
supports all the tests defined for each name.

@@method TestLoader.getTestCaseNames(testCaseClass)

<p>Return a sorted sequence of method names found within {@var
testCaseClass}.

@@text 

<p>The following attributes of a {@link TestLoader} can be configured
either by subclassing or assignment on an instance:

@@attribute TestLoader.testMethodPrefix

<p>String giving the prefix of method names which will be interpreted as
test methods. The default value is {@code 'test'}.

@@attribute TestLoader.sortTestMethodsUsing

<p>Function to be used to compare method names when sorting them in
{@link getTestCaseNames}. The default value is the built-in {@link cmp}
function; it can be set to {@code None} to disable the sort.

@@attribute TestLoader.suiteClass

<p>Callable object that constructs a test suite from a list of tests. No
methods on the resulting object are needed. The default value is the
{@link TestSuite} class.
