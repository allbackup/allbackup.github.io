<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>Brief Tour of the Standard Library - Part&nbsp;II</title> <script type="text/javascript">effbot_page_id=1902;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> <!--
<p style='color: #8f8f8f; background: #fff5bf; padding: 5px 10px;'> <b>2008-07-15:</b> Selected articles

now have experimental "comment" links in the left column and at the bottom.
You're welcome to use them for commenting and voting on articles.
For a bit more on this, see <a
href="http://effbot.slinkset.com/links/Welcome_to_discuss_effbot_org">this
page</a>. /F
</p>
--> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <h1 class="maintitle">Brief Tour of the Standard Library - Part&nbsp;II</h1> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p>COMMENT: <a href="http://docs.python.org/tut/node13.html">Original Source</a></p><p>This second tour covers more advanced modules that support professional programming needs. These modules rarely occur in small scripts.</p><h2 id="output-formatting">Output Formatting&#160;<a class="nav" href="#output-formatting" title="bookmark!">#</a></h2><p>The <a href="/pyref/repr.htm"><strong>repr</strong></a> module provides an version of <a href="/pyref/repr.htm"><strong>repr</strong></a> for abbreviated displays of large or deeply nested containers:</p><pre><code>    &gt;&gt;&gt; import repr   
    &gt;&gt;&gt; repr.repr(set('supercalifragilisticexpialidocious'))
    "set(['a', 'c', 'd', 'e', 'f', 'g', ...])"
</code></pre><p>The <a href="/pyref/pprint.htm"><strong>pprint</strong></a> module offers more sophisticated control over printing both built-in and user defined objects in a way that is readable by the interpreter. When the result is longer than one line, the <q>pretty printer</q> adds line breaks and indentation to more clearly reveal data structure:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    &gt;&gt;&gt; import pprint
    &gt;&gt;&gt; t = [[[['black', 'cyan'], 'white', ['green', 'red']], [ ['magenta',
    ...     'yellow'], 'blue']]]
    ...
    &gt;&gt;&gt; pprint.pprint(t, width=30)
    [[[['black', 'cyan'],
       'white',
       ['green', 'red']],
      [['magenta', 'yellow'],
       'blue']]]
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>The <a href="/pyref/textwrap.htm"><strong>textwrap</strong></a> module formats paragraphs of text to fit a given screen width:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    &gt;&gt;&gt; import textwrap
    &gt;&gt;&gt; doc = """The wrap() method is just like fill() except that it returns
    ... a list of strings instead of one big string with newlines to separate
    ... the wrapped lines."""
    ...
    &gt;&gt;&gt; print textwrap.fill(doc, width=40)
    The wrap() method is just like fill()
    except that it returns a list of strings
    instead of one big string with newlines
    to separate the wrapped lines.
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>The <a href="/pyref/locale.htm"><strong>locale</strong></a> module accesses a database of culture specific data formats. The grouping attribute of locale&#8217;s format function provides a direct way of formatting numbers with group separators:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    &gt;&gt;&gt; import locale
    &gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'English_United States.1252')
    'English_United States.1252'
    &gt;&gt;&gt; conv = locale.localeconv()          # get a mapping of conventions
    &gt;&gt;&gt; x = 1234567.8
    &gt;&gt;&gt; locale.format("%d", x, grouping=True)
    '1,234,567'
    &gt;&gt;&gt; locale.format("%s%.*f", (conv['currency_symbol'],
    ...       conv['frac_digits'], x), grouping=True)
    '$1,234,567.80'
</code></pre></div><div class="yui-ge"><div class="yui-u first"><h2 id="templating">Templating&#160;<a class="nav" href="#templating" title="bookmark!">#</a></h2><p>The <a href="/pyref/string.htm"><strong>string</strong></a> module includes a versatile Template class with a simplified syntax suitable for editing by end-users. This allows users to customize their applications without having to alter the application.</p><p>The format uses placeholder names formed by &#8220;$&#8221; with valid Python identifiers (alphanumeric characters and underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces. Writing &#8220;$$&#8221; creates a single escaped &#8220;$&#8221;:</p><pre class="python">&gt;&gt;&gt; <span class="pykeyword">from</span> string <span class="pykeyword">import</span> Template
&gt;&gt;&gt; t = Template(<span class="pystring">'${village}folk send $$10 to $cause.'</span>)
&gt;&gt;&gt; t.substitute(village=<span class="pystring">'Nottingham'</span>, cause=<span class="pystring">'the ditch fund'</span>)
<span class="pystring">'Nottinghamfolk send $10 to the ditch fund.'</span></pre><p>The substitute method raises a <a href="/pyref/KeyError.htm"><strong>KeyError</strong></a> when a placeholder is not supplied in a dictionary or a keyword argument. For mail-merge style applications, user supplied data may be incomplete and the safe_substitute method may be more appropriate &#8212; it will leave placeholders unchanged if data is missing:</p><pre class="python">&gt;&gt;&gt; t = Template(<span class="pystring">'Return the $item to $owner.'</span>)
&gt;&gt;&gt; d = dict(item=<span class="pystring">'unladen swallow'</span>)
&gt;&gt;&gt; t.substitute(d)
Traceback (most recent call last):
  . . .
KeyError: <span class="pystring">'owner'</span>
&gt;&gt;&gt; t.safe_substitute(d)
<span class="pystring">'Return the unladen swallow to $owner.'</span></pre><p>Template subclasses can specify a custom delimiter. For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>&gt;&gt;&gt; import time, os.path
&gt;&gt;&gt; photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
&gt;&gt;&gt; class BatchRename(Template):
...     delimiter = '%'
&gt;&gt;&gt; fmt = raw_input('Enter rename style (%d-date %n-seqnum %f-format):  ')
Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f

&gt;&gt;&gt; t = BatchRename(fmt)
&gt;&gt;&gt; date = time.strftime('%d%b%y')
&gt;&gt;&gt; for i, filename in enumerate(photofiles):
...     base, ext = os.path.splitext(filename)
...     newname = t.substitute(d=date, n=i, f=ext)
...     print '%s --&gt; %s' % (filename, newname)

img_1074.jpg --&gt; Ashley_0.jpg
img_1076.jpg --&gt; Ashley_1.jpg
img_1077.jpg --&gt; Ashley_2.jpg
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>Another application for templating is separating program logic from the details of multiple output formats. This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports.</p><h2 id="working-with-binary-data-record-layouts">Working with Binary Data Record Layouts&#160;<a class="nav" href="#working-with-binary-data-record-layouts" title="bookmark!">#</a></h2><p>The <a href="/pyref/struct.htm"><strong>struct</strong></a> module provides pack() and unpack() functions for working with variable length binary record formats. The following example shows how to loop through header information in a ZIP file (with pack codes <code>"H"</code> and <code>"L"</code> representing two and four byte unsigned numbers respectively):</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    import struct

    data = open('myfile.zip', 'rb').read()
    start = 0
    for i in range(3):                      # show the first 3 file headers
        start += 14
        fields = struct.unpack('LLLHH', data[start:start+16])
        crc32, comp_size, uncomp_size, filenamesize, extra_size = fields

        start += 16
        filename = data[start:start+filenamesize]
        start += filenamesize
        extra = data[start:start+extra_size]
        print filename, hex(crc32), comp_size, uncomp_size

        start += extra_size + comp_size     # skip to the next header
</code></pre></div><div class="yui-ge"><div class="yui-u first"><h2 id="multi-threading">Multi-threading&#160;<a class="nav" href="#multi-threading" title="bookmark!">#</a></h2><p>Threading is a technique for decoupling tasks which are not sequentially dependent. Threads can be used to improve the responsiveness of applications that accept user input while other tasks run in the background. A related use case is running I/O in parallel with computations in another thread.</p><p>The following code shows how the high level <a href="/pyref/threading.htm"><strong>threading</strong></a> module can run tasks in background while the main program continues to run:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    import threading, zipfile

    class AsyncZip(threading.Thread):
        def __init__(self, infile, outfile):
            threading.Thread.__init__(self)        
            self.infile = infile
            self.outfile = outfile
        def run(self):
            f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)
            f.write(self.infile)
            f.close()
            print 'Finished background zip of: ', self.infile

    background = AsyncZip('mydata.txt', 'myarchive.zip')
    background.start()
    print 'The main program continues to run in foreground.'

    background.join()    # Wait for the background task to finish
    print 'Main program waited until background was done.'
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>The principal challenge of multi-threaded applications is coordinating threads that share data or other resources. To that end, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores.</p><p>While those tools are powerful, minor design errors can result in problems that are difficult to reproduce. So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread and then use the <a href="/pyref/Queue.htm"><strong>Queue</strong></a> module to feed that thread with requests from other threads. Applications using Queue objects for inter-thread communication and coordination are easier to design, more readable, and more reliable.</p><h2 id="queue">Queue&#160;<a class="nav" href="#queue" title="bookmark!">#</a></h2><p>As mentioned above, the Queue module is often used for inter-thread communication. This small example shows a single Queue being created, as well as a Receiver object and a Sender object. The Sender puts messages into the Queue, which the Receiver receives and prints out.:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide"><span class="pykeyword">import</span> threading
<span class="pykeyword">from</span> Queue <span class="pykeyword">import</span> Queue

<span class="pykeyword">class</span> <span class="pyclass">Receiver</span>(threading.Thread):
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue
    <span class="pykeyword">def</span> <span class="pyfunction">run</span>(self):
        <span class="pykeyword">while</span> True:
            x = self.queue.get() <span class="pycomment">#blocks</span>
            <span class="pykeyword">print</span> x


<span class="pykeyword">class</span> <span class="pyclass">Sender</span>(threading.Thread):
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue
    <span class="pykeyword">def</span> <span class="pyfunction">run</span>(self):
        <span class="pykeyword">while</span> True:
            self.queue.put(<span class="pystring">"Hello"</span>)
            self.queue.put(<span class="pystring">"from"</span>)
            self.queue.put(<span class="pystring">"the"</span>)
            self.queue.put(<span class="pystring">"sender!"</span>)
            <span class="pykeyword">break</span>


q = Queue()
r = Receiver(q) <span class="pycomment">#pass in the Queue</span>
s = Sender(q) <span class="pycomment">#pass in the same Queue</span>
r.start()
s.start() <span class="pycomment"># causes messages to get sent, which Receiver will print</span>
s.join() <span class="pycomment">#Only wait for s to end</span></pre></div><div class="yui-ge"><div class="yui-u first"><h2 id="logging">Logging&#160;<a class="nav" href="#logging" title="bookmark!">#</a></h2><p>The <a href="/pyref/logging.htm"><strong>logging</strong></a> module offers a full featured and flexible logging system. At its simplest, log messages are sent to a file or to <code>sys.stderr</code>:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    import logging
    logging.debug('Debugging information')
    logging.info('Informational message')
    logging.warning('Warning:config file %s not found', 'server.conf')
    logging.error('Error occurred')
    logging.critical('Critical error -- shutting down')
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>This produces the following output:</p><pre><code>    WARNING:root:Warning:config file server.conf not found
    ERROR:root:Error occurred
    CRITICAL:root:Critical error -- shutting down
</code></pre><p>By default, informational and debugging messages are suppressed and the output is sent to standard error. Other output options include routing messages through email, datagrams, sockets, or to an HTTP Server. New filters can select different routing based on message priority: DEBUG, INFO, WARNING, ERROR, and CRITICAL.</p><p>The logging system can be configured directly from Python or can be loaded from a user editable configuration file for customized logging without altering the application.</p><h2 id="weak-references">Weak References&#160;<a class="nav" href="#weak-references" title="bookmark!">#</a></h2><p>Python does automatic memory management (reference counting for most objects and garbage collection to eliminate cycles). The memory is freed shortly after the last reference to it has been eliminated.</p><p>This approach works fine for most applications but occasionally there is a need to track objects only as long as they are being used by something else. Unfortunately, just tracking them creates a reference that makes them permanent. The <a href="/pyref/weakref.htm"><strong>weakref</strong></a> module provides tools for tracking objects without creating a reference. When the object is no longer needed, it is automatically removed from a weakref table and a callback is triggered for weakref objects. Typical applications include caching objects that are expensive to create:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    &gt;&gt;&gt; import weakref, gc
    &gt;&gt;&gt; class A:
    ...     def __init__(self, value):
    ...             self.value = value
    ...     def __repr__(self):
    ...             return str(self.value)
    ...
    &gt;&gt;&gt; a = A(10)                   # create a reference
    &gt;&gt;&gt; d = weakref.WeakValueDictionary()
    &gt;&gt;&gt; d['primary'] = a            # does not create a reference
    &gt;&gt;&gt; d['primary']                # fetch the object if it is still alive
    10
    &gt;&gt;&gt; del a                       # remove the one reference
    &gt;&gt;&gt; gc.collect()                # run garbage collection right away
    0
    &gt;&gt;&gt; d['primary']                # entry was automatically removed
    Traceback (most recent call last):
      File "&lt;pyshell#108&gt;", line 1, in -toplevel-
        d['primary']                # entry was automatically removed
      File "C:/PY24/lib/weakref.py", line 46, in __getitem__
        o = self.data[key]()
    KeyError: 'primary'
</code></pre></div><div class="yui-ge"><div class="yui-u first"><h2 id="tools-for-working-with-lists">Tools for Working with Lists&#160;<a class="nav" href="#tools-for-working-with-lists" title="bookmark!">#</a></h2><p>Many data structure needs can be met with the built-in list type. However, sometimes there is a need for alternative implementations with different performance trade-offs.</p><p>The <a href="/pyref/array.htm"><strong>array</strong></a> module provides an array() object that is like a list that stores only homogenous data but stores it more compactly. The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode <code>"H"</code>) rather than the usual 16 bytes per entry for regular lists of python int objects:</p><pre><code>    &gt;&gt;&gt; from array import array
    &gt;&gt;&gt; a = array('H', [4000, 10, 700, 22222])
    &gt;&gt;&gt; sum(a)
    26932
    &gt;&gt;&gt; a[1:3]
    array('H', [10, 700])
</code></pre><p>The <a href="/pyref/collections.htm"><strong>collections</strong></a> module provides a [@link collections.deque deque]] type that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth first tree searches:</p><pre><code>    &gt;&gt;&gt; from collections import deque
    &gt;&gt;&gt; d = deque(["task1", "task2", "task3"])
    &gt;&gt;&gt; d.append("task4")
    &gt;&gt;&gt; print "Handling", d.popleft()
    Handling task1

    unsearched = deque([starting_node])
    def breadth_first_search(unsearched):
        node = unsearched.popleft()
        for m in gen_moves(node):
            if is_goal(m):
                return m
            unsearched.append(m)
</code></pre><p>In addition to alternative list implementations, the library also offers other tools such as the <a href="/pyref/bisect.htm"><strong>bisect</strong></a> module with functions for manipulating sorted lists:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    &gt;&gt;&gt; import bisect
    &gt;&gt;&gt; scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
    &gt;&gt;&gt; bisect.insort(scores, (300, 'ruby'))
    &gt;&gt;&gt; scores
    [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]
</code></pre></div><div class="yui-ge"><div class="yui-u first"><p>The <a href="/pyref/heapq.htm"><strong>heapq</strong></a> module provides functions for implementing heaps based on regular lists. The lowest valued entry is always kept at position zero. This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide"><code>    &gt;&gt;&gt; from heapq import heapify, heappop, heappush
    &gt;&gt;&gt; data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
    &gt;&gt;&gt; heapify(data)                      # rearrange the list into heap order
    &gt;&gt;&gt; heappush(data, -5)                 # add a new entry
    &gt;&gt;&gt; [heappop(data) for i in range(3)]  # fetch the three smallest entries
    [-5, 0, 1]
</code></pre></div><div class="yui-ge"><div class="yui-u first"><h2 id="decimal-floating-point-arithmetic">Decimal Floating Point Arithmetic&#160;<a class="nav" href="#decimal-floating-point-arithmetic" title="bookmark!">#</a></h2><p>The <a href="/pyref/decimal.htm"><strong>decimal</strong></a> module offers a Decimal datatype for decimal floating point arithmetic. Compared to the built-in float implementation of binary floating point, the new class is especially helpful for financial applications and other uses which require exact decimal representation, control over precision, control over rounding to meet legal or regulatory requirements, tracking of significant decimal places, or for applications where the user expects the results to match calculations done by hand.</p><p>For example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and binary floating point. The difference becomes significant if the results are rounded to the nearest cent:</p><pre class="python">&gt;&gt;&gt; <span class="pykeyword">from</span> decimal <span class="pykeyword">import</span> *
&gt;&gt;&gt; Decimal(<span class="pystring">'0.70'</span>) * Decimal(<span class="pystring">'1.05'</span>)
Decimal(<span class="pystring">"0.7350"</span>)
&gt;&gt;&gt; .70 * 1.05
0.73499999999999999</pre><p>The Decimal result keeps a trailing zero, automatically inferring four place significance from multiplicands with two place significance. Decimal reproduces mathematics as done by hand and avoids issues that can arise when binary floating point cannot exactly represent decimal quantities.</p><p>Exact representation enables the Decimal class to perform modulo calculations and equality tests that are unsuitable for binary floating point:</p><pre class="python">&gt;&gt;&gt; Decimal(<span class="pystring">'1.00'</span>) % Decimal(<span class="pystring">'.10'</span>)
Decimal(<span class="pystring">"0.00"</span>)
&gt;&gt;&gt; 1.00 % 0.10
0.09999999999999995

&gt;&gt;&gt; sum([Decimal(<span class="pystring">'0.1'</span>)]*10) == Decimal(<span class="pystring">'1.0'</span>)
True
&gt;&gt;&gt; sum([0.1]*10) == 1.0
False</pre><p>The decimal module provides arithmetic with as much precision as needed:</p><pre class="python">&gt;&gt;&gt; getcontext().prec = 36
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal(<span class="pystring">"0.142857142857142857142857142857142857"</span>)</pre></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class='comment'>
<p><b>Comment:</b></p>
<p>
Under locale:

Tell the users that they must do:
locale.setlocale(locale.LC_ALL, 'English_United States.1252')
or else they will get the C locale.  This doesn't matter if you want English_United States, but
matters a lot when you don't.  The interactive interpreter already does this, so you end up in
the frustrating situation where something works in the interactive interpreter and fails in
your app.</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node13.html/_comments/4dkr'>infogami</a></b></p>
</div>

<div class='comment'>
<p><b>Comment:</b></p>
<p>
I think the manual should mention strptime.  Put it in here or in the previous section?  Does it make sense
to have 2 sections for introducing the standard library?</p>
<p>Posted by <b class='author'><a href='http://pytut.infogami.com/node13.html/_comments/4dku'>infogami</a></b></p>
</div>
</div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li> <li><b><a href="." title="Go to pytut index page.">::: pytut :::</a></b></li> </ul> <ul><li><b>::: contents</b></li></ul> <ul><li><ul><li><a href="#output-formatting">Output Formatting</a></li><li><a href="#templating">Templating</a></li><li><a href="#working-with-binary-data-record-layouts">Working with Binary Data Record Layouts</a></li><li><a href="#multi-threading">Multi-threading</a></li><li><a href="#queue">Queue</a></li><li><a href="#logging">Logging</a></li><li><a href="#weak-references">Weak References</a></li><li><a href="#tools-for-working-with-lists">Tools for Working with Lists</a></li><li><a href="#decimal-floating-point-arithmetic">Decimal Floating Point Arithmetic</a></li></ul></li></ul> </div> <!-- menu --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15_grey.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.05s 2009-06-10 04:29:33.616397.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
