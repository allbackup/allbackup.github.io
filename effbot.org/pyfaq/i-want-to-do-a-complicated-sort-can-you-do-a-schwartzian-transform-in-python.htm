<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>I want to do a complicated sort: can you do a Schwartzian Transform in&nbsp;Python?</title></head><body data-page-id="847"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">I want to do a complicated sort: can you do a Schwartzian Transform in&nbsp;Python?</h1></div><div class="yui-ge"><div class="yui-u first"><p>The technique, attributed to Randal Schwartz of the Perl community, sorts the elements of a list by first prepending a &#8220;sort key&#8221; to each element, and then sorting everything using the default sort comparision method, at full speed.</p><p>In Python literature, this technique is often referred to as Decorate-Sort-Undecorate (DSU).</p><p>To implement DSU in Python 2.4 and newer, you can simply pass in a key transform to the <a href="/pyref/sorted.htm"><strong>sorted</strong></a> function or the <a href="/pyref/list.sort.htm"><strong>sort</strong></a> method:</p><pre class="python">Usorted = sorted(L, key=<span class="pykeyword">lambda</span> s: s.upper())

L.sort(key=<span class="pykeyword">lambda</span> s: s.upper())</pre><p>In earlier versions, you can use list comprehensions instead.  To sort a list of strings by their uppercase values:</p><pre class="python">tmp1 = [ (x.upper(), x) <span class="pykeyword">for</span> x <span class="pykeyword">in</span> L ] <span class="pycomment"># decorate</span>
tmp1.sort()
Usorted = [ x[1] <span class="pykeyword">for</span> x <span class="pykeyword">in</span> tmp1 ] <span class="pycomment"># undecorate</span></pre><p>To sort by the integer value of a subfield extending from positions 10-15 in each string:</p><pre class="python">tmp2 = [ (int(s[10:15]), s) <span class="pykeyword">for</span> s <span class="pykeyword">in</span> L ] <span class="pycomment"># decorate</span>
tmp2.sort()
Isorted = [ x[1] <span class="pykeyword">for</span> x <span class="pykeyword">in</span> tmp2 ] <span class="pycomment"># undecorate</span></pre><p>Note that Isorted may also be computed by</p><pre class="python"><span class="pykeyword">def</span> <span class="pyfunction">intfield</span>(s):
    <span class="pykeyword">return</span> int(s[10:15])

<span class="pykeyword">def</span> <span class="pyfunction">Icmp</span>(s1, s2):
    <span class="pykeyword">return</span> cmp(intfield(s1), intfield(s2))

Isorted = L[:]
Isorted.sort(Icmp)</pre><p>but since this method calls intfield() many times for each element of L, instead of just once per element, it can be a lot slower than the DSU approach.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
