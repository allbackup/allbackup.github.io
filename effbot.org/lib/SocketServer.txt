
@@module SocketServer

<h1>SocketServer&#8212;A framework for network servers</h1>

<p>The {@link SocketServer} module simplifies the task of writing
network servers.

<p>There are four basic server classes: {@link TCPServer} uses the
Internet TCP protocol, which provides for continuous streams of data
between the client and server. {@link UDPServer} uses datagrams, which
are discrete packets of information that may arrive out of order or be
lost while in transit. The more infrequently used {@link
UnixStreamServer} and {@link UnixDatagramServer} classes are similar,
but use Unix domain sockets; they're not available on non-Unix
platforms. For more details on network programming, consult a book such
as W. Richard Steven's {@em UNIX Network Programming} or Ralph Davis's
{@em Win32 Network Programming}.

<p>These four classes process requests synchronously; each request must
be completed before the next request can be started. This isn't suitable
if each request takes a long time to complete, because it requires a lot
of computation, or because it returns a lot of data which the client is
slow to process. The solution is to create a separate process or thread
to handle each request; the {@link ForkingMixIn} and {@link
ThreadingMixIn} mix-in classes can be used to support asynchronous
behaviour.

<p>Creating a server requires several steps. First, you must create a
request handler class by subclassing the {@link BaseRequestHandler}
class and overriding its {@link handle} method; this method will process
incoming requests. Second, you must instantiate one of the server
classes, passing it the server's address and the request handler class.
Finally, call the {@link handle_request} or {@link serve_forever} method
of the server object to process one or many requests.

<p>When inheriting from {@link ThreadingMixIn} for threaded connection
behavior, you should explicitly declare how you want your threads to
behave on an abrupt shutdown. The {@link ThreadingMixIn} class defines
an attribute {@var daemon_threads}, which indicates whether or not the
server should wait for thread termination. You should set the flag
explicitly if you would like threads to behave autonomously; the default
is {@code False}, meaning that Python will not exit until all threads
created by {@link ThreadingMixIn} have exited.

<p>Server classes have the same external methods and attributes, no
matter what network protocol they use:

<h2>Server Creation Notes</h2>

<p>There are five classes in an inheritance diagram, four of which
represent synchronous servers of four types:

<pre>
        +------------+
        | BaseServer |
        +------------+
              |
              v
        +-----------+        +------------------+
        | TCPServer |-------&gt;| UnixStreamServer |
        +-----------+        +------------------+
              |
              v
        +-----------+        +--------------------+
        | UDPServer |-------&gt;| UnixDatagramServer |
        +-----------+        +--------------------+
</pre>


<p>Note that {@link UnixDatagramServer} derives from {@link UDPServer},
not from {@link UnixStreamServer} - the only difference between an IP
and a Unix stream server is the address family, which is simply repeated
in both unix server classes.

<p>Forking and threading versions of each type of server can be created
using the {@link ForkingMixIn} and {@link ThreadingMixIn} mix-in
classes. For instance, a threading UDP server class is created as
follows:

<pre>
    class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass
</pre>


<p>The mix-in class must come first, since it overrides a method defined
in {@link UDPServer}. Setting the various member variables also changes
the behavior of the underlying server mechanism.

<p>To implement a service, you must derive a class from {@link
BaseRequestHandler} and redefine its {@link handle} method. You can then
run various versions of the service by combining one of the server
classes with your request handler class. The request handler class must
be different for datagram or stream services. This can be hidden by
using the handler subclasses {@link StreamRequestHandler} or {@link
DatagramRequestHandler}.

<p>Of course, you still have to use your head! For instance, it makes no
sense to use a forking server if the service contains state in memory
that can be modified by different requests, since the modifications in
the child process would never reach the initial state kept in the parent
process and passed to each child. In this case, you can use a threading
server, but you will probably have to use locks to protect the integrity
of the shared data.

<p>On the other hand, if you are building an HTTP server where all data
is stored externally (for instance, in the file system), a synchronous
class will essentially render the service "deaf" while one request is
being handled - which may be for a very long time if a client is slow to
receive all the data it has requested. Here a threading or forking
server is appropriate.

<p>In some cases, it may be appropriate to process part of a request
synchronously, but to finish processing in a forked child depending on
the request data. This can be implemented by using a synchronous server
and doing an explicit fork in the request handler class {@link handle}
method.

<p>Another approach to handling multiple simultaneous requests in an
environment that supports neither threads nor {@link fork} (or where
these are too expensive or inappropriate for the service) is to maintain
an explicit table of partially finished requests and to use {@link
select} to decide which request to work on next (or whether to handle a
new incoming request). This is particularly important for stream
services where each client can potentially be connected for a long time
(if threads or subprocesses cannot be used).

<h2>Server Objects</h2>

@@function fileno()

<p>Return an integer file descriptor for the socket on which the server
is listening. This function is most commonly passed to {@link
select.select}, to allow monitoring multiple servers in the same
process.

@@function handle_request()

<p>Process a single request. This function calls the following methods
in order: {@link get_request}, {@link verify_request}, and {@link
process_request}. If the user-provided {@link handle} method of the
handler class raises an exception, the server's {@link handle_error}
method will be called.

@@function serve_forever()

<p>Handle an infinite number of requests. This simply calls {@link
handle_request} inside an infinite loop.

@@variable address_family

<p>The family of protocols to which the server's socket belongs. {@code
socket.AF_INET} and {@code socket.AF_UNIX} are two possible values.

@@variable RequestHandlerClass

<p>The user-provided request handler class; an instance of this class is
created for each request.

@@variable server_address

<p>The address on which the server is listening. The format of addresses
varies depending on the protocol family; see the documentation for the
socket module for details. For Internet protocols, this is a tuple
containing a string giving the address, and an integer port number:
{@code ('127.0.0.1', 80)}, for example.

@@variable socket

<p>The socket object on which the server will listen for incoming
requests.

@@text 

<p>The server classes support the following class variables:

@@variable allow_reuse_address

<p>Whether the server will allow the reuse of an address. This defaults
to {@code False}, and can be set in subclasses to change the policy.

@@variable request_queue_size

<p>The size of the request queue. If it takes a long time to process a
single request, any requests that arrive while the server is busy are
placed into a queue, up to {@link request_queue_size} requests. Once the
queue is full, further requests from clients will get a
&#8220;Connection denied&#8221; error. The default value is usually 5,
but this can be overridden by subclasses.

@@variable socket_type

<p>The type of socket used by the server; {@code socket.SOCK_STREAM} and
{@code socket.SOCK_DGRAM} are two possible values.

@@text 

<p>There are various server methods that can be overridden by subclasses
of base server classes like {@link TCPServer}; these methods aren't
useful to external users of the server object.

@@function finish_request()

<p>Actually processes the request by instantiating {@link
RequestHandlerClass} and calling its {@link handle} method.

@@function get_request()

<p>Must accept a request from the socket, and return a 2-tuple
containing the {@em new} socket object to be used to communicate with
the client, and the client's address.

@@function handle_error(request, client_address)

<p>This function is called if the {@link RequestHandlerClass}'s {@link
handle} method raises an exception. The default action is to print the
traceback to standard output and continue handling further requests.

@@function process_request(request, client_address)

<p>Calls {@link finish_request} to create an instance of the {@link
RequestHandlerClass}. If desired, this function can create a new process
or thread to handle the request; the {@link ForkingMixIn} and {@link
ThreadingMixIn} classes do this.

@@function server_activate()

<p>Called by the server's constructor to activate the server. The
default behavior just {@link listen}s to the server's socket. May be
overridden.

@@function server_bind()

<p>Called by the server's constructor to bind the socket to the desired
address. May be overridden.

@@function verify_request(request, client_address)

<p>Must return a Boolean value; if the value is {@code True}, the
request will be processed, and if it's {@code False}, the request will
be denied. This function can be overridden to implement access controls
for a server. The default implementation always returns {@code True}.

@@text 

<h2>RequestHandler Objects</h2>

<p>The request handler class must define a new {@link handle} method,
and can override any of the following methods. A new instance is created
for each request.

@@function finish()

<p>Called after the {@link handle} method to perform any clean-up
actions required. The default implementation does nothing. If {@link
setup} or {@link handle} raise an exception, this function will not be
called.

@@function handle()

<p>This function must do all the work required to service a request. The
default implementation does nothing. Several instance attributes are
available to it; the request is available as {@link self.request}; the
client address as {@link self.client_address}; and the server instance
as {@link self.server}, in case it needs access to per-server
information.

<p>The type of {@link self.request} is different for datagram or stream
services. For stream services, {@link self.request} is a socket object;
for datagram services, {@link self.request} is a string. However, this
can be hidden by using the request handler subclasses {@link
StreamRequestHandler} or {@link DatagramRequestHandler}, which override
the {@link setup} and {@link finish} methods, and provide {@link
self.rfile} and {@link self.wfile} attributes. {@link self.rfile} and
{@link self.wfile} can be read or written, respectively, to get the
request data or return data to the client.

@@function setup()

<p>Called before the {@link handle} method to perform any initialization
actions required. The default implementation does nothing.
