<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>How do I parcel out work among a bunch of worker&nbsp;threads?</title></head><body data-page-id="812"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">How do I parcel out work among a bunch of worker&nbsp;threads?</h1></div><div class="yui-ge"><div class="yui-u first"><p>Use the <a href="/pyref/Queue.htm"><strong>Queue</strong></a> module to create a queue containing a list of jobs. The <a href="/pyref/Queue.Queue.htm"><strong>Queue</strong></a> class maintains a list of objects with <a href="/pyref/Queue.Queue.put.htm"><strong>put(obj)</strong></a> to add an item to the queue and <a href="/pyref/Queue.Queue.get.htm"><strong>get()</strong></a> to return an item. The class will take care of the locking necessary to ensure that each job is handed out exactly once.</p><p>Here&#8217;s a trivial example:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide"><span class="pykeyword">import</span> threading, Queue, time

<span class="pycomment"># The worker thread gets jobs off the queue.  When the queue is empty, it </span>
<span class="pycomment"># assumes there will be no more work and exits.  </span>
<span class="pycomment"># (Realistically workers will run until terminated.)</span>
<span class="pykeyword">def</span> <span class="pyfunction">worker</span> ():
    <span class="pykeyword">print</span> <span class="pystring">'Running worker'</span>
    time.sleep(0.1)
    <span class="pykeyword">while</span> True:
        <span class="pykeyword">try</span>:
            arg = q.get(block=False)
        <span class="pykeyword">except</span> Queue.Empty:
            <span class="pykeyword">print</span> <span class="pystring">'Worker'</span>, threading.currentThread(),
            <span class="pykeyword">print</span> <span class="pystring">'queue empty'</span>
            <span class="pykeyword">break</span>
        <span class="pykeyword">else</span>:
            <span class="pykeyword">print</span> <span class="pystring">'Worker'</span>, threading.currentThread(),
            <span class="pykeyword">print</span> <span class="pystring">'running with argument'</span>, arg
            time.sleep(0.5)

<span class="pycomment"># Create queue</span>
q = Queue.Queue()

<span class="pycomment"># Start a pool of 5 workers</span>
<span class="pykeyword">for</span> i <span class="pykeyword">in</span> range(5):
    t = threading.Thread(target=worker, name=<span class="pystring">'worker %i'</span> % (i+1))
    t.start()

<span class="pycomment"># Begin adding work to the queue</span>
<span class="pykeyword">for</span> i <span class="pykeyword">in</span> range(50):
    q.put(i)

<span class="pycomment"># Give threads time to run</span>
<span class="pykeyword">print</span> <span class="pystring">'Main thread sleeping'</span>
time.sleep(5)</pre></div><div class="yui-ge"><div class="yui-u first"><p>When run, this will produce the following output:</p><blockquote><p>Running worker Running worker Running worker Running worker Running worker Main thread sleeping Worker &lt;Thread(worker 1, started)&gt; running with argument 0 Worker &lt;Thread(worker 2, started)&gt; running with argument 1 Worker &lt;Thread(worker 3, started)&gt; running with argument 2 Worker &lt;Thread(worker 4, started)&gt; running with argument 3 Worker &lt;Thread(worker 5, started)&gt; running with argument 4 Worker &lt;Thread(worker 1, started)&gt; running with argument 5 &#8230;</p></blockquote><p>Consult the module&#8217;s documentation for more details; the Queue class provides a featureful interface.</p><p>CATEGORY: library</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
