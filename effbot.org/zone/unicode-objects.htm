<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Python Unicode&nbsp;Objects</title></head><body data-page-id="341"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Python Unicode&nbsp;Objects</h1></div><div class="yui-ge"><div class="yui-u first"><h2>Some Observations on Working With Non-ASCII Character Sets</h2><p><i>This note provides some brief information on best practices for
working with non-ASCII data in Python 2.0 and later.  As everything
else on this site, this is a work in progress.</i></p><p class="info">Updated June 21, 2004 | February 11, 2002 | Fredrik Lundh</p><p>Python&#8217;s Unicode string type stores characters from the Unicode
character set.  In this set, each distinct character has its own
number, the <i>code point</i>.  Unicode supports more than one million
code points.  Unicode characters don&#8217;t have an encoding; each character
is represented by its code.  The Unicode string type uses some unknown
mechanism to store the characters; in your Python code, Unicode strings
simply appear as sequences of characters, just like 8-bit strings appear
as sequences of bytes.

</p><p>Observations:</p><ol><li><p>Text files always contain <i>encoded</i> text, not characters.
Each character in the text is encoded as one or more bytes in the file.</p></li><li><p>Most popular encodings (UTF-8, ISO-8859-X, etc) are supersets of
ASCII.  This means that the first 128 characters have the usual meaning,
and that the usual characters are used for line endings.  In other words,
<b>readline()</b> will work just fine.</p></li><li><p>You can mix Python Unicode strings with 8-bit Python strings, as
long as the 8-bit string only contains ASCII characters.  A Unicode-aware
library may chose to use 8-bit strings for text that only contains ASCII,
to save space and time.</p></li><li><p>If you read a line of text from a file, you get bytes, not characters.</p></li><li><p>To decode an encoded string into a string of well-defined
characters, you have to know what encoding it uses.</p></li><li><p>To decode a string, use the <b>decode()</b> method on the input
string, and pass it the name of the encoding:</p><pre class="python">
    fileencoding = <span class="pystring">"iso-8859-1"</span>

    raw = file.readline()
    txt = raw.decode(fileencoding)</pre><p>(the result is a Python Unicode string).</p><p>The <b>decode</b> method was added in Python 2.2.  In earlier
versions (or if you think it reads better), use the <b>unicode</b>
constructor instead:</p><pre class="python">
   txt = unicode(raw, fileencoding)</pre></li><li><p>Python&#8217;s regular expression engine supports Unicode.  You can
apply the same pattern to either 8-bit (encoded) or Unicode strings.
To create a regular expression pattern that uses Unicode character
classes for <b>\w</b> (and \s, and \b), use the &#8220;(?u)&#8221; flag prefix, or
the <b>re.UNICODE</b> flag:</p><pre class="python">
    pattern = re.compile(<span class="pystring">"(?u)pattern"</span>)

    pattern = re.compile(<span class="pystring">"pattern"</span>, re.UNICODE)</pre></li><li><p>To write a Unicode string to a file or other device, you have to
convert it to the encoding used by the file.  The <b>encode</b> method
converts from Unicode to an encoded string.

<pre class="python">
    out = txt.encode(encoding)</pre></p><p>If the string contains characters that cannot be represented in the
given encoding, Python raises an exception.  You can change this by
passing in a second argument to <b>encode</b>:

<pre class="python">
    <span class="pycomment"># skip bad chars</span>
    out = txt.encode(encoding, <span class="pystring">"ignore"</span>)

    <span class="pycomment"># replace bad chars with "?"</span>
    out = txt.encode(encoding, <span class="pystring">"replace"</span>)</pre></p><p>For more on string encoding, see <a href="unicode-convert.htm"><cite>Converting Unicode Strings to 8-bit Strings</cite></a>.

</p></li><li>To print a Unicode string to your output device, you have to
convert it to the encoding used by your terminal.  The <b>encode()</b>
method converts from Unicode back to an encoded string.  You can use
the <b>locale.getdefaultlocale()</b> function to get the current
output encoding.

<pre class="python">
    <span class="pykeyword">import</span> locale
    language, output_encoding = locale.getdefaultlocale()

    <span class="pykeyword">print</span> txt.encode(output_encoding)</pre></li></ol><p><i>There are lots of shortcuts in Python, including coded streams,
using default locales for pattern matching, ISO-8859-1 as a subset of
Unicode, etc, but that&#8217;s outside the scope of this note.  At least for
the moment.</i></p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
