<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>You Can Never Have Too Many Stock&nbsp;Tickers!</title></head><body data-page-id="121"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">You Can Never Have Too Many Stock&nbsp;Tickers!</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">Updated July 17, 2002 | July 13, 2002 | Fredrik Lundh</p><p>Any site containing material on <s><a href="http://effbot.org/rpc">web
services</a></s> (dead link) isn&#8217;t really complete without a stock ticker example.  So
here&#8217;s a really simple one, using a SOAP service provided by
<b>xmethods.com</b> and my little
<a href="http-xml.htm">XML-over-HTTP helper class</a>.</p><p>Let&#8217;s start with the code:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b>Example: Yet another stock ticker, sort of</b>
<pre class="python wide">
<span class="pykeyword">from</span> xmltoys <span class="pykeyword">import</span> HTTPClient

<span class="pycomment"># "Delayed Stock Quote" service from</span>
<span class="pycomment"># http://www.xmethods.com/</span>

service_uri = <span class="pystring">"http://66.28.98.121:9090/soap"</span>

action = <span class="pystring">"urn:xmethods-delayed-quotes#getQuote"</span>

request = <span class="pystring">"""\</span>
&lt;env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/1999/XMLSchema"&gt;
&lt;env:Body&gt;
&lt;ns1:getQuote xmlns:ns1="urn:xmethods-delayed-quotes"
  env:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
&lt;symbol xsi:type="xsd:string"&gt;%s&lt;/symbol&gt;
&lt;/ns1:getQuote&gt;
&lt;/env:Body&gt;
&lt;/env:Envelope&gt;
"""

ticker_symbol = <span class="pystring">"LNUX"</span>

client = HTTPClient.HTTPClient(service_uri)

response = client.do_request(
    request % ticker_symbol,
    extra_headers=[(<span class="pystring">"SOAPAction"</span>, action)]
    )

<span class="pykeyword">if</span> 0:
    <span class="pykeyword">from</span> xmltoys <span class="pykeyword">import</span> ElementTree
    ElementTree.dump(response)

<span class="pykeyword">for</span> elem <span class="pykeyword">in</span> response.getiterator(<span class="pystring">"Result"</span>):
    <span class="pykeyword">print</span> elem.text
    <span class="pykeyword">break</span></pre></div></div><div class="yui-ge"><div class="yui-u first"><p>I&#8217;ve copied the SOAP action, a sample response body, and the host
identifier directly from the method description available from the
service provider (see their site for details).</p><p>You&#8217;ll need the <a href="xmltoys.htm">xmltoys</a> library and
the <a href="http-xml.htm">http_xml</a> helper to use this script.
If you have, just run the script to see what it does.</p><p>Turning this into a real ticker is left as an exercise.</p><p align="center" class="mark">:::</p><p>The SOAP request body contains an <b>Envelope</b> element,
which contains a <b>Body</b> subelement holding the request.
This is similar to XML-RPC&#8217;s <b>methodCall</b> and <b>params</b>
elements.</p><p>To see what the server returns, change the if-statement before
the <b>ElementTree.dump</b> call to &#8220;if 1:&#8221;, and run the script.
This time, it will produce something like (slightly edited, for
readability):</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="wide wide">
&lt;ns0:Envelope
  ns0:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:ns0="http://schemas.xmlsoap.org/soap/envelope/"&gt;
&lt;ns0:Body&gt;
&lt;ns1:getQuoteResponse
  xmlns:ns1="urn:xmethods-delayed-quotes"&gt;
&lt;Result
  ns2:type="xsd:float"
  xmlns:ns2="http://www.w3.org/1999/XMLSchema-instance"&gt;
0.85
&lt;/Result&gt;
&lt;/ns1:getQuoteResponse&gt;
&lt;/ns0:Body&gt;
&lt;/ns0:Envelope&gt;
</pre></div><div class="yui-ge"><div class="yui-u first"><p>In this case, we can ignore the namespace stuff (ns prefixes
and xmlns attributes) and the <b>Element</b> and Body
elements as well; the return value we&#8217;re looking for is returned
as the text content of an undecorated element called <b>Result</b>.
The <b>getiterator</b> method returns an iterator matching all
such elements, and we print the <b>text</b> attribute for the
first one.</p><p class="small">Note that you don&#8217;t really need to parse XML to find
the response in this case.  If you remove all tags, all that&#8217;s left is
whitespace and the value we&#8217;re looking for.  If we get the raw response
instead of a tree, we can get rid of the junk with a simple RE substitution:
<tt>re.sub(&#8220;&lt;[^&gt;]*&gt;|\s+&#8221;, &#8220;&#8221;, response)</tt>.
Makes you wonder why they didn&#8217;t just put up a service that accepted a
HTTP GET request, and returned the value as a text/plain response&#8230;</p><p>By the way, when I write this, the script prints <b>0.85</b>.
Your mileage may vary.</p><hr /></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="small wide"><p class="mark"><b>Notes:</b></p><p>Today, it prints 0.66.</p><p>This example will be added to the next xmltoys release, as
<b>demostockticker.py</b>.</p><p>The upcoming version of xmltoys can be used to build the
SOAP request envelope.  Here&#8217;s an outline (untested):</p><pre class="python wide">
<span class="pykeyword">class</span> <span class="pyclass">NS</span>:
    <span class="pycomment"># helper to manufacture decorated tags</span>
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, uri):
        self.uri = uri
    <span class="pykeyword">def</span> <span class="pyfunction">__call__</span>(self, tag):
        <span class="pykeyword">return</span> <span class="pystring">"{%s}%s"</span> % (self.uri, tag)

<span class="pycomment"># standard namespaces and stuff</span>
ns_env = NS(<span class="pystring">"http://schemas.xmlsoap.org/soap/envelope/"</span>)
schema_instance = NS(<span class="pystring">"http://www.w3.org/1999/XMLSchema-instance"</span>)
schema_data = NS(<span class="pystring">"http://www.w3.org/1999/XMLSchema"</span>)
soap_encoding_uri = <span class="pystring">"http://schemas.xmlsoap.org/soap/encoding/"</span>

<span class="pykeyword">def</span> <span class="pyfunction">marshal_request</span>(method_uri, method_tag, params,
                    encoding_uri=soap_encoding_uri):
    envelope = Element(ns_env(<span class="pystring">"Envelope"</span>))
    body = SubElement(envelope, ns_env(<span class="pystring">"Body"</span>))
    method = SubElement(
        body, NS(method_uri)(method_tag),
        **{ns_env(<span class="pystring">"encodingStyle"</span>): encoding_uri}
    )
    <span class="pykeyword">for</span> param <span class="pykeyword">in</span> params:
        method.append(param)
    <span class="pykeyword">return</span> envelope

params = Element(<span class="pystring">""</span>) <span class="pycomment"># container element</span>

<span class="pycomment"># FIXME: add type annotations (not required by this service)</span>
SubElement(params, <span class="pystring">"symbol"</span>).text = ticker_symbol

request = marshal_request(method_uri, method_tag, params)</pre><p><i>Move this to <a href="element-soap.htm">element-soap</a>!</i></p></div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
