
@@module cd

<h1>cd&#8212;CD-ROM access on SGI systems</h1>

<p>Availability: IRIX.

<p>This module provides an interface to the Silicon Graphics CD library.
It is available only on Silicon Graphics systems.

<p>The way the library works is as follows. A program opens the CD-ROM
device with {@link open} and creates a parser to parse the data from the
CD with {@link createparser}. The object returned by {@link open} can be
used to read data from the CD, but also to get status information for
the CD-ROM device, and to get information about the CD, such as the
table of contents. Data from the CD is passed to the parser, which
parses the frames, and calls any callback functions that have previously
been added.

<p>An audio CD is divided into tracks or programs (the terms are used
interchangeably). Tracks can be subdivided into indices. An audio CD
contains a table of contents which gives the starts of the tracks on the
CD. Index 0 is usually the pause before the start of a track. The start
of the track as given by the table of contents is normally the start of
index 1.

<p>Positions on a CD can be represented in two ways. Either a frame
number or a tuple of three values, minutes, seconds and frames. Most
functions use the latter representation. Positions can be both relative
to the beginning of the CD, and to the beginning of the track.

<p>Module {@link cd} defines the following functions and constants:

@@function createparser()

<p>Create and return an opaque parser object. The methods of the parser
object are described below.

@@function msftoframe(minutes, seconds, frames)

<p>Converts a {@code (}{@var minutes}, {@var seconds}, {@var frames})
triple representing time in absolute time code into the corresponding CD
frame number.

@@function open([device[, mode]])

<p>Open the CD-ROM device. The return value is an opaque player object;
methods of the player object are described below. The device is the name
of the SCSI device file, e.g. {@code '/dev/scsi/sc0d4l0'}, or {@link
None}. If omitted or {@link None}, the hardware inventory is consulted
to locate a CD-ROM drive. The {@var mode}, if not omitted, should be the
string {@code 'r'}.

@@text 

<p>The module defines the following variables:

@@exception error

<p>Exception raised on various errors.

@@variable DATASIZE

<p>The size of one frame's worth of audio data. This is the size of the
audio data as passed to the callback of type {@code audio}.

@@variable BLOCKSIZE

<p>The size of one uninterpreted frame of audio data.

@@text 

<p>The following variables are states as returned by {@link getstatus}:

@@variable READY

<p>The drive is ready for operation loaded with an audio CD.

@@variable NODISC

<p>The drive does not have a CD loaded.

@@variable CDROM

<p>The drive is loaded with a CD-ROM. Subsequent play or read operations
will return I/O errors.

@@variable ERROR

<p>An error occurred while trying to read the disc or its table of
contents.

@@variable PLAYING

<p>The drive is in CD player mode playing an audio CD through its audio
jacks.

@@variable PAUSED

<p>The drive is in CD layer mode with play paused.

@@variable STILL

<p>The equivalent of {@code PAUSED} on older (non 3301) model Toshiba
CD-ROM drives. Such drives have never been shipped by SGI.

@@variable audio
@@variable pnum
@@variable index
@@variable ptime
@@variable atime
@@variable catalog
@@variable ident
@@variable control

<p>Integer constants describing the various types of parser callbacks
that can be set by the {@link addcallback} method of CD parser objects
(see below).

@@text 

<h2>Player Objects</h2>

<p>Player objects (returned by {@link open}) have the following methods:

@@method Player.allowremoval()

<p>Unlocks the eject button on the CD-ROM drive permitting the user to
eject the caddy if desired.

@@method Player.bestreadsize()

<p>Returns the best value to use for the {@var num_frames} parameter of
the {@link readda} method. Best is defined as the value that permits a
continuous flow of data from the CD-ROM drive.

@@method Player.close()

<p>Frees the resources associated with the player object. After calling
{@link close}, the methods of the object should no longer be used.

@@method Player.eject()

<p>Ejects the caddy from the CD-ROM drive.

@@method Player.getstatus()

<p>Returns information pertaining to the current state of the CD-ROM
drive. The returned information is a tuple with the following values:
{@var state}, {@var track}, {@var rtime}, {@var atime}, {@var ttime},
{@var first}, {@var last}, {@var scsi_audio}, {@var cur_block}. {@var
rtime} is the time relative to the start of the current track; {@var
atime} is the time relative to the beginning of the disc; {@var ttime}
is the total time on the disc. For more information on the meaning of
the values, see the man page CDgetstatus(3dm). The value of {@var state}
is one of the following: {@code ERROR}, {@code NODISC}, {@code READY},
{@code PLAYING}, {@code PAUSED}, {@code STILL}, or {@code CDROM}.

@@method Player.gettrackinfo(track)

<p>Returns information about the specified track. The returned
information is a tuple consisting of two elements, the start time of the
track and the duration of the track.

@@method Player.msftoblock(min, sec, frame)

<p>Converts a minutes, seconds, frames triple representing a time in
absolute time code into the corresponding logical block number for the
given CD-ROM drive. You should use {@link msftoframe} rather than {@link
msftoblock} for comparing times. The logical block number differs from
the frame number by an offset required by certain CD-ROM drives.

@@method Player.play(start, play)

<p>Starts playback of an audio CD in the CD-ROM drive at the specified
track. The audio output appears on the CD-ROM drive's headphone and
audio jacks (if fitted). Play stops at the end of the disc. {@var start}
is the number of the track at which to start playing the CD; if {@var
play} is 0, the CD will be set to an initial paused state. The method
{@link togglepause} can then be used to commence play.

@@method Player.playabs(minutes, seconds, frames, play)

<p>Like {@link play}, except that the start is given in minutes,
seconds, and frames instead of a track number.

@@method Player.playtrack(start, play)

<p>Like {@link play}, except that playing stops at the end of the track.

@@method Player.playtrackabs(track, minutes, seconds, frames, play)

<p>Like {@link play}, except that playing begins at the specified
absolute time and ends at the end of the specified track.

@@method Player.preventremoval()

<p>Locks the eject button on the CD-ROM drive thus preventing the user
from arbitrarily ejecting the caddy.

@@method Player.readda(num_frames)

<p>Reads the specified number of frames from an audio CD mounted in the
CD-ROM drive. The return value is a string representing the audio
frames. This string can be passed unaltered to the {@link parseframe}
method of the parser object.

@@method Player.seek(minutes, seconds, frames)

<p>Sets the pointer that indicates the starting point of the next read
of digital audio data from a CD-ROM. The pointer is set to an absolute
time code location specified in {@var minutes}, {@var seconds}, and
{@var frames}. The return value is the logical block number to which the
pointer has been set.

@@method Player.seekblock(block)

<p>Sets the pointer that indicates the starting point of the next read
of digital audio data from a CD-ROM. The pointer is set to the specified
logical block number. The return value is the logical block number to
which the pointer has been set.

@@method Player.seektrack(track)

<p>Sets the pointer that indicates the starting point of the next read
of digital audio data from a CD-ROM. The pointer is set to the specified
track. The return value is the logical block number to which the pointer
has been set.

@@method Player.stop()

<p>Stops the current playing operation.

@@method Player.togglepause()

<p>Pauses the CD if it is playing, and makes it play if it is paused.

@@text 

<h2>Parser Objects</h2>

<p>Parser objects (returned by {@link createparser}) have the following
methods:

@@method Parser.addcallback(type, func, arg)

<p>Adds a callback for the parser. The parser has callbacks for eight
different types of data in the digital audio data stream. Constants for
these types are defined at the {@link cd} module level (see above). The
callback is called as follows: {@var func}({@var arg}, type, data),
where {@var arg} is the user supplied argument, {@var type} is the
particular type of callback, and {@var data} is the data returned for
this {@var type} of callback. The type of the data depends on the {@var
type} of callback as follows:

<p><table border=1>
<tr> <th>
<p>Type
<th>
<p>Value
<tr> <td>
<p>{@code audio}
<td>
<p>String which can be passed unmodified to {@link al.writesamps}.
<tr> <td>
<p>{@code pnum}
<td>
<p>Integer giving the program (track) number.
<tr> <td>
<p>{@code index}
<td>
<p>Integer giving the index number.
<tr> <td>
<p>{@code ptime}
<td>
<p>Tuple consisting of the program time in minutes, seconds, and frames.
<tr> <td>
<p>{@code atime}
<td>
<p>Tuple consisting of the absolute time in minutes, seconds, and
frames.
<tr> <td>
<p>{@code catalog}
<td>
<p>String of 13 characters, giving the catalog number of the CD.
<tr> <td>
<p>{@code ident}
<td>
<p>String of 12 characters, giving the ISRC identification number of the
recording. The string consists of two characters country code, three
characters owner code, two characters giving the year, and five
characters giving a serial number.
<tr> <td>
<p>{@code control}
<td>
<p>Integer giving the control bits from the CD subcode data
</table></p>

@@method Parser.deleteparser()

<p>Deletes the parser and frees the memory it was using. The object
should not be used after this call. This call is done automatically when
the last reference to the object is removed.

@@method Parser.parseframe(frame)

<p>Parses one or more frames of digital audio data from a CD such as
returned by {@link readda}. It determines which subcodes are present in
the data. If these subcodes have changed since the last frame, then
{@link parseframe} executes a callback of the appropriate type passing
to it the subcode data found in the frame. Unlike the C function, more
than one frame of digital audio data can be passed to this method.

@@method Parser.removecallback(type)

<p>Removes the callback for the given {@var type}.

@@method Parser.resetparser()

<p>Resets the fields of the parser used for tracking subcodes to an
initial state. {@link resetparser} should be called after the disc has
been changed.
