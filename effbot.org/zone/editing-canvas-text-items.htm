<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Editing Canvas Text&nbsp;Items</title></head><body data-page-id="51"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Editing Canvas Text&nbsp;Items</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">December 08, 1998 | Fredrik Lundh</p><h2>Introduction</h2><p>The Tkinter <i>Canvas</i> widget provides some basic editing
support for text items, but no bindings. This guide briefly
describes these editing functions, and shows how to use them.</p><h2 id="focus">Focus&#160;<a class="nav" href="#focus" title="bookmark!">#</a></h2><p>The canvas widget can redirect keyboard focus to any given
canvas item that supports the internal text editing protocol. In
the standard implementation, <i>text</i> is the only item type that
supports this interface.</p><p>To change the focus, use the <i>focus</i> method:</p><p><b>focus(</b><i>item</i><b>)</b> moves focus to the given canvas
item. If the item has keyboard bindings, it will receive all
further keyboard events, given that the canvas itself also has
focus. It&#8217;s usually best to call <i>focus_set</i> on the canvas
whenever you set focus to a canvas item.</p><p>To remove focus from the item, call this method with an empty
string.</p><p><b>focus()</b> returns the item that currently has the focus, or
<i>None</i> if no item has focus.</p><h2 id="editing">Editing&#160;<a class="nav" href="#editing" title="bookmark!">#</a></h2>

The canvas also keeps track of an insertion cursor for each item
that supports text editing. Each item keeps track of it&#8217;s own
cursor position, but the cursor is only display for the item that
has focus. 

<p>To manipulate the cursor, and the text displayed by the text
item, you use methods similar to those provided by the <i>Edit</i>
widget:</p><p><b>index(</b><i>item, index</i><b>)</b> returns the numerical
index (an integer) corresponding to the given index. Numerical
indexes work like Python&#8217;s sequence indexes; 0 is just to the left
of the first character, and len(text) is just to the right of the
last character.</p><p>The index argument can be <i>INSERT</i> (the current insertion
cursor), <i>END</i> (the length of the text), or <i>SEL_FIRST</i>
and <i>SEL_LAST</i> (the selection start and end). You can also use
the form &#8220;@x,y&#8221; where <i>x</i> and <i>y</i> are canvas coordinates,
to get the index closest to the given coordinate.</p><p><b>icursor(</b><i>item, index</i><b>)</b> moves the insertion
cursor to the given position. You can either use a numerical index,
or one of the special indexes described above.</p><p><b>insert(</b><i>item, index, text</i><b>)</b> inserts <i>
text</i> at the given position. If you insert text at the <i>
INSERT</i> index, the cursor is moved along with the text.</p><p><b>dchars(</b><i>item, index</i><b>)</b> deletes the character
at the given index. <b>dchars(</b><i>item, from, to</i><b>)</b>
removes the characters in the given range.</p><h2 id="selections">Selections&#160;<a class="nav" href="#selections" title="bookmark!">#</a></h2>

Finally, the canvas widget maintains a current text selection. Note
that the selection is handled by the widget, so only one item per
canvas widget can have an active selection. 

<p><b>select_item()</b> returns the item that owns the text
selection for this canvas widget. If there&#8217;s no selection, this
method returns <i>None</i>.</p><p class="note"><b>Note!</b>
In Tkinter.py as shipped with 1.5.1 (and possibly also with later
versions), this method always returns <i> None</i>. For a workaround,
see the <i>has_selection</i> method in the code sample below.</p><p><b>select_adjust(</b><i>item, index</i><b>)</b> adjusts the
selection (if any), so that it includes the given index. It also
sets the selection anchor to this position. This is typically used
by mouse bindings.</p><p><b>select_clear()</b> remove the selection if it&#8217;s in this
canvas widget.</p><p><b>select_from(</b><i>item, index</i><b>)</b> sets the selection
anchor point to the given index. Use <i>select_adjust</i> or <i>
select_to</i> extend the selection.</p><p><b>select_to(</b><i>item, index</i><b>)</b> modifies the
selection so it includes the region between the current selection
anchor (as set by <i>select_from</i> or <i>select_adjust</i>) and
the given index.</p><h2 id="example">Example&#160;<a class="nav" href="#example" title="bookmark!">#</a></h2><p>This example provides a partial implementation for canvas text
editing. Note that it uses widget-wide bindings for the keyboard
events; if you prefer, you can use item-specific bindings instead.
</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide"><pre class="python wide">
<span class="pycomment"># File: canvas-editing-example-1.py</span>
<span class="pycomment">#</span>
<span class="pycomment"># editing canvas items</span>
<span class="pycomment">#</span>
<span class="pycomment"># fredrik lundh, december 1998</span>
<span class="pycomment">#</span>
<span class="pycomment"># fredrik@pythonware.com</span>
<span class="pycomment"># http://www.pythonware.com</span>
<span class="pycomment">#</span>

<span class="pykeyword">from</span> Tkinter <span class="pykeyword">import</span> *

<span class="pykeyword">class</span> <span class="pyclass">MyCanvas</span>(Frame):

    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, root):
        Frame.__init__(self, root)

        self.canvas = Canvas(self)
        self.canvas.pack(fill=BOTH, expand=1)

        <span class="pycomment"># standard bindings</span>
        self.canvas.bind(<span class="pystring">"&lt;Double-Button-1&gt;"</span>, self.set_focus)
        self.canvas.bind(<span class="pystring">"&lt;Button-1&gt;"</span>, self.set_cursor)
        self.canvas.bind(<span class="pystring">"&lt;Key&gt;"</span>, self.handle_key)

        <span class="pycomment"># add a few items to the canvas</span>
        self.canvas.create_text(50, 50, text=<span class="pystring">"hello"</span>)
        self.canvas.create_text(50, 100, text=<span class="pystring">"world"</span>)

    <span class="pykeyword">def</span> <span class="pyfunction">highlight</span>(self, item):
        <span class="pycomment"># mark focused item.  note that this code recreates the</span>
        <span class="pycomment"># rectangle for each update, but that's fast enough for</span>
        <span class="pycomment"># this case.</span>
        bbox = self.canvas.bbox(item)
        self.canvas.delete(<span class="pystring">"highlight"</span>)
        <span class="pykeyword">if</span> bbox:
            i = self.canvas.create_rectangle(
                bbox, fill=<span class="pystring">"white"</span>,
                tag=<span class="pystring">"highlight"</span>
                )
            self.canvas.lower(i, item)

    <span class="pykeyword">def</span> <span class="pyfunction">has_focus</span>(self):
        <span class="pykeyword">return</span> self.canvas.focus()

    <span class="pykeyword">def</span> <span class="pyfunction">has_selection</span>(self):
        <span class="pycomment"># hack to work around bug in Tkinter 1.101 (Python 1.5.1)</span>
        <span class="pykeyword">return</span> self.canvas.tk.call(self.canvas._w, <span class="pystring">'select'</span>, <span class="pystring">'item'</span>)

    <span class="pykeyword">def</span> <span class="pyfunction">set_focus</span>(self, event):
        <span class="pykeyword">if</span> self.canvas.type(CURRENT) != <span class="pystring">"text"</span>:
            <span class="pykeyword">return</span>

        self.highlight(CURRENT)

        <span class="pycomment"># move focus to item</span>
        self.canvas.focus_set() <span class="pycomment"># move focus to canvas</span>
        self.canvas.focus(CURRENT) <span class="pycomment"># set focus to text item</span>
        self.canvas.select_from(CURRENT, 0)
        self.canvas.select_to(CURRENT, END)

    <span class="pykeyword">def</span> <span class="pyfunction">set_cursor</span>(self, event):
        <span class="pycomment"># move insertion cursor</span>
        item = self.has_focus()
        <span class="pykeyword">if</span> <span class="pykeyword">not</span> item:
            <span class="pykeyword">return</span> <span class="pycomment"># or do something else</span>

        <span class="pycomment"># translate to the canvas coordinate system</span>
        x = self.canvas.canvasx(event.x)
        y = self.canvas.canvasy(event.y)

        self.canvas.icursor(item, <span class="pystring">"@%d,%d"</span> % (x, y))
        self.canvas.select_clear()

    <span class="pykeyword">def</span> <span class="pyfunction">handle_key</span>(self, event):
        <span class="pycomment"># widget-wide key dispatcher</span>
        item = self.has_focus()
        <span class="pykeyword">if</span> <span class="pykeyword">not</span> item:
            <span class="pykeyword">return</span>

        insert = self.canvas.index(item, INSERT)

        <span class="pykeyword">if</span> event.char &gt;= <span class="pystring">" "</span>:
            <span class="pycomment"># printable character</span>
            <span class="pykeyword">if</span> self.has_selection():
                self.canvas.dchars(item, SEL_FIRST, SEL_LAST)
                self.canvas.select_clear()
            self.canvas.insert(item, <span class="pystring">"insert"</span>, event.char)
            self.highlight(item)

        <span class="pykeyword">elif</span> event.keysym == <span class="pystring">"BackSpace"</span>:
            <span class="pykeyword">if</span> self.has_selection():
                self.canvas.dchars(item, SEL_FIRST, SEL_LAST)
                self.canvas.select_clear()
            <span class="pykeyword">else</span>:
                <span class="pykeyword">if</span> insert &gt; 0:
                    self.canvas.dchars(item, insert-1, insert)
            self.highlight(item)

        <span class="pycomment"># navigation</span>
        <span class="pykeyword">elif</span> event.keysym == <span class="pystring">"Home"</span>:
            self.canvas.icursor(item, 0)
            self.canvas.select_clear()
        <span class="pykeyword">elif</span> event.keysym == <span class="pystring">"End"</span>:
            self.canvas.icursor(item, END)
            self.canvas.select_clear()
        <span class="pykeyword">elif</span> event.keysym == <span class="pystring">"Right"</span>:
            self.canvas.icursor(item, insert+1)
            self.canvas.select_clear()
        <span class="pykeyword">elif</span> event.keysym == <span class="pystring">"Left"</span>:
            self.canvas.icursor(item, insert-1)
            self.canvas.select_clear()

        <span class="pykeyword">else</span>:
            <span class="pykeyword">pass</span> <span class="pycomment"># print event.keysym</span>

<span class="pycomment"># try it out (double-click on a text to enable editing)</span>
c = MyCanvas(Tk())
c.pack()

mainloop()</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>Copyright &#169; 1998 by Fredrik Lundh</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><a href="#focus">Focus</a></li><li><a href="#editing">Editing</a></li><li><a href="#selections">Selections</a></li><li><a href="#example">Example</a></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
