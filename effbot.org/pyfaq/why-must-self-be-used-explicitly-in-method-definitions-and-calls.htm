<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Why must 'self' be used explicitly in method definitions and&nbsp;calls?</title></head><body data-page-id="954"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><p class="note" style="text-align: center"><strong>
This is an old copy of the Python FAQ.  The information here may be
outdated.
</strong></p><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Why must 'self' be used explicitly in method definitions and&nbsp;calls?</h1></div><div class="yui-ge"><div class="yui-u first"><p>The idea was borrowed from Modula-3. It turns out to be very useful, for a variety of reasons.</p><p>First, it&#8217;s more obvious that you are using a method or instance attribute instead of a local variable. Reading self.x or  self.meth() makes it absolutely clear that an instance variable or method is used even if you don&#8217;t know the class definition by heart. In C++, you can sort of tell by the lack of a local variable declaration (assuming globals are rare or easily recognizable) &#8212; but in Python, there are no local variable declarations, so you&#8217;d have to look up the class definition to be sure.
Some C++ and Java coding standards call for instance attributes to have an <q>m_</q> prefix, or for such attributes to be referenced through the special <q>this</q> variable, so this explicitness is still useful in those languages, too.</p><p>Second, it means that no special syntax is necessary if you want to explicitly reference or call the method from a particular class. In C++, if you want to use a method from a base class which is overridden in a derived class, you have to use the :: operator &#8212; in Python you can write baseclass.methodname(self, &lt;argument list&gt;). This is particularly useful for <a href="/pyref/__init__.htm"><strong>__init__</strong></a> methods, and in general in cases where a derived class method wants to extend the base class method of the same name and thus has to call the base class method somehow.</p><p>Finally, for instance variables it solves a syntactic problem with assignment: since local variables in Python are (by definition!) those variables to which a value assigned in a function body (and that aren&#8217;t explicitly declared global), there has to be some way to tell the interpreter that an assignment was meant to assign to an instance variable instead of to a local variable, and it should preferably be syntactic (for efficiency reasons). C++ does this through declarations, but Python doesn&#8217;t have declarations and it would be a pity having to introduce them just for this purpose. Using the explicit <q>self.var</q> solves this nicely. Similarly, for using instance variables, having to write <q>self.var</q> means that references to unqualified names inside a method don&#8217;t have to search the instance&#8217;s directories. To put it another way, local variables and instance variables live in two different namespaces, and you need to tell Python which namespace to use.</p><p>CATEGORY: general</p><p>CATEGORY: design</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to pyfaq index page.">::: pyfaq :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
