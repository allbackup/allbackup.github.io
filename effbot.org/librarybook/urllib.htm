<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The urllib&nbsp;module</title></head><body data-page-id="704"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The urllib&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><p>This module provides a unified client interface for HTTP, FTP,
and gopher. It automatically picks the right protocol handler based
on the uniform resource locator (URL) passed to the library.</p><p>Fetching data from an URL is extremely easy. Just call the
<b>urlopen</b> method, and read from the returned stream
object.</p><div class="example">
<b style="example">Example: Using the urllib
module to fetch a remote resource</b>
<pre>
# File: <a href="urllib/urllib-example-1.py">urllib-example-1.py</a>

import urllib

fp = urllib.urlopen("http://www.python.org")

op = open("out.html", "wb")

n = 0

while 1:
    s = fp.read(8192)
    if not s:
        break
    op.write(s)
    n = n + len(s)

fp.close()
op.close()

for k, v in fp.headers.items():
    print k, "=", v

print "copied", n, "bytes from", fp.url

</pre><pre class="computeroutput" moreinfo="NONE">
server = Apache/1.3.6 (Unix)
content-type = text/html
accept-ranges = bytes
date = Mon, 11 Oct 1999 20:11:40 GMT
connection = close
etag = "741e9-7870-37f356bf"
content-length = 30832
last-modified = Thu, 30 Sep 1999 12:25:35 GMT
copied 30832 bytes from http://www.python.org
</pre></div><p>Note that stream object provides some non-standard attributes.
<b>headers</b> is a <b>Message</b> object (as defined by the
<b>mimetools</b> module), and <b>url</b> contains the actual
URL. The latter is updated if the server redirects the client to a
new URL.</p><p>The <b>urlopen</b> function is actually a helper function,
which creates an instance of the <b>FancyURLopener</b> class, and
calls its <b>open</b> method. To get special behavior, you can
subclass that class. For example, the following class automatically
logs in to the server, when necessary:</p><div class="example">
<b style="example">Example: Using the urllib
module with automatic authentication</b>
<pre>
# File: <a href="urllib/urllib-example-3.py">urllib-example-3.py</a>

import urllib

class myURLOpener(urllib.FancyURLopener):
    # read an URL, with automatic HTTP authentication

    def setpasswd(self, user, passwd):
        self.__user = user
        self.__passwd = passwd

    def prompt_user_passwd(self, host, realm):
        return self.__user, self.__passwd

urlopener = myURLOpener()
urlopener.setpasswd("mulder", "trustno1")

fp = urlopener.open("http://www.secretlabs.com")
print fp.read()
</pre></div></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
