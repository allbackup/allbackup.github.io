<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The ImageMath&nbsp;Module</title></head><body data-page-id="444"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><p><a href="imagegrab.htm">back</a>&#160;<a href="imageops.htm">next</a></p><h1 class="maintitle">The ImageMath&nbsp;Module</h1></div><div class="yui-ge"><div class="yui-u first"><p>(New in 1.1.6)
The <b>ImageMath</b> module can be used to evaluate &#8220;image
expressions&#8221;.  The module provides a single <b>eval</b> function,
which takes an expression string and one or more images.</p><h2 id="examples">Examples&#160;<a class="nav" href="#examples" title="bookmark!">#</a></h2></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b>Using the ImageMath module</b>
<pre class="python wide">
<span class="pykeyword">import</span> Image, ImageMath

im1 = Image.open(<span class="pystring">"image1.jpg"</span>)
im2 = Image.open(<span class="pystring">"image2.jpg"</span>)

out = ImageMath.eval(<span class="pystring">"convert(min(a, b), 'L')"</span>, a=im1, b=im2)
out.save(<span class="pystring">"result.png"</span>)</pre></div></div><div class="yui-ge"><div class="yui-u first"><h2 id="functions">Functions&#160;<a class="nav" href="#functions" title="bookmark!">#</a></h2><h3 id="tag-ImageMath.eval">eval&#160;<a class="nav" href="#tag-ImageMath.eval" title="bookmark!">#</a></h3><div class="function"><p><b>eval(expression, environment)</b> &#8658; image or value</p><p>Evaluate <i>expression</i> in the given <i>environment</i>.

</p><p>The <i>expression</i> argument is a string which uses the standard
Python expression syntax.  In addition to the standard operators, you
can also use the functions described below.</p><p>The <i>environment</i> argument is a dictionary that maps image
names to <b>Image</b> instances.  You can use one or more keyword
arguments instead of a dictionary, as shown in the above example.
Note that the names must be valid Python identifiers.</p><p>In the current version, <b>ImageMath</b> only supports single-layer
images. To process multi-band images, use the <b>split</b> and
<b>merge</b> functions.</p><p>This function returns an image, an integer value, a floating point
value, or a pixel tuple, depending on the expression.</p></div><h2 id="expression-syntax">Expression Syntax&#160;<a class="nav" href="#expression-syntax" title="bookmark!">#</a></h2><p>Expressions are standard Python expressions, but they&#8217;re evaluated
in a non-standard environment.  You can use PIL methods as usual, plus
the following set of operators and functions:</p><h3 id="standard-operators">Standard Operators&#160;<a class="nav" href="#standard-operators" title="bookmark!">#</a></h3><p>You can use standard arithmetical operators for addition (+),
subtraction (-), multiplication (*), and division (/).</p><p>The module also supports unary minus (-), modulo (%), and power
(**) operators.</p><p>Note that all operations are done with 32-bit integers or 32-bit
floating point values, as necessary.  For example, if you add two
8-bit images, the result will be a 32-bit integer image.  If you add a
floating point constant to an 8-bit image, the result will be a 32-bit
floating point image.</p><p>You can force conversion using the <b>convert</b>, <b>float</b>,
and <b>int</b> functions described below.</p><h3 id="bitwise-operators">Bitwise Operators&#160;<a class="nav" href="#bitwise-operators" title="bookmark!">#</a></h3><p>The module also provides operations that operate on individual
bits.  This includes and (&amp;), or (|), and exclusive or (^).  You can
also invert (~) all pixel bits.</p><p>Note that the operands are converted to 32-bit signed integers before
the bitwise operation is applied.  This means that you&#8217;ll get negative
values if you invert an ordinary greyscale image.  You can use the and
(&amp;) operator to mask off unwanted bits.</p><p>Bitwise operators don&#8217;t work on floating point images.</p><h3 id="logical-operators">Logical Operators&#160;<a class="nav" href="#logical-operators" title="bookmark!">#</a></h3><p>Logical operators like <b>and</b>, <b>or</b>, and <b>not</b> work
on entire images, rather than individual pixels.</p><p>An empty image (all pixels zero) is treated as false.  All other
images are treated as true.</p><p>Note that <b>and</b> and <b>or</b> return the last evaluated operand,
while <b>not</b> always returns a boolean value.</p><h3 id="built-in-functions">Built-in Functions&#160;<a class="nav" href="#built-in-functions" title="bookmark!">#</a></h3><p>These functions are applied to each individual pixel.</p><p><b>abs(image)</b> Absolute value.</p><p><b>convert(image, mode)</b> Convert image to the given mode.  The
mode must be given as a string constant.</p><p><b>float(image)</b> Convert image to 32-bit floating point.  This
is equivalent to <b>convert(image, &#8220;F&#8221;)</b>.</p><p><b>int(image)</b> Convert image to 32-bit integer.  This is
equivalent to <b>convert(image, &#8220;I&#8221;)</b>.</p><p>Note that 1-bit and 8-bit images are automatically converted to 32-bit
integers if necessary to get a correct result.
</p><p><b>max(image1, image2)</b> Maximum value.</p><p><b>min(image1, image2)</b> Minimum value.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><p><a href="imagegrab.htm">back</a>&#160;<a href="imageops.htm">next</a></p></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to imagingbook index page.">::: imagingbook :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><a href="#examples">Examples</a></li><li><a href="#functions">Functions</a></li><li><ul><li><a href="#tag-ImageMath.eval">eval</a></li></ul></li><li><a href="#expression-syntax">Expression Syntax</a></li><li><ul><li><a href="#standard-operators">Standard Operators</a></li><li><a href="#bitwise-operators">Bitwise Operators</a></li><li><a href="#logical-operators">Logical Operators</a></li><li><a href="#built-in-functions">Built-in Functions</a></li></ul></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
