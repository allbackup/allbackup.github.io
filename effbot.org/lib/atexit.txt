
@@module atexit

<h1>atexit&#8212;Exit handlers</h1>

<p>New in version 2.0.

<p>The {@link atexit} module defines a single function to register
cleanup functions. Functions thus registered are automatically executed
upon normal interpreter termination.

<p>Note: the functions registered via this module are not called when
the program is killed by a signal, when a Python fatal internal error is
detected, or when {@link os._exit} is called.

<p>This is an alternate interface to the functionality provided by the
{@code sys.exitfunc} variable.

<p>Note: This module is unlikely to work correctly when used with other
code that sets {@code sys.exitfunc}. In particular, other core Python
modules are free to use {@link atexit} without the programmer's
knowledge. Authors who use {@code sys.exitfunc} should convert their
code to use {@link atexit} instead. The simplest way to convert code
that sets {@code sys.exitfunc} is to import {@link atexit} and register
the function that had been bound to {@code sys.exitfunc}.

@@function register(func[, *args[, **kargs]])

<p>Register {@var func} as a function to be executed at termination. Any
optional arguments that are to be passed to {@var func} must be passed
as arguments to {@link register}.

<p>At normal program termination (for instance, if {@link sys.exit} is
called or the main module's execution completes), all functions
registered are called in last in, first out order. The assumption is
that lower level modules will normally be imported before higher level
modules and thus must be cleaned up later.

<p>If an exception is raised during execution of the exit handlers, a
traceback is printed (unless {@link exceptions.SystemExit} is raised)
and the exception information is saved. After all exit handlers have had
a chance to run the last exception to be raised is re-raised.

@@text 

@see 
{@link readline Module readline}

Useful example of atexit to read and write readline history files.

<h2>atexit Example</h2>

<p>The following simple example demonstrates how a module can initialize
a counter from a file when it is imported and save the counter's updated
value automatically when the program terminates without relying on the
application making an explicit call into this module at termination.

<pre>
try:
    _count = int(open("/tmp/counter").read())
except IOError:
    _count = 0

def incrcounter(n):
    global _count
    _count = _count + n

def savecounter():
    open("/tmp/counter", "w").write("%d" % _count)

import atexit
atexit.register(savecounter)
</pre>


<p>Positional and keyword arguments may also be passed to {@link
register} to be passed along to the registered function when it is
called:

<pre>
def goodbye(name, adjective):
    print 'Goodbye, %s, it was %s to meet you.' % (name, adjective)

import atexit
atexit.register(goodbye, 'Donny', 'nice')

# or:
atexit.register(goodbye, adjective='nice', name='Donny')
</pre>

