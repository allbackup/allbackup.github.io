<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The random&nbsp;module</title></head><body data-page-id="631"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The random&nbsp;module</h1></div><div class="yui-ge"><div class="yui-u first"><blockquote class="epigraph"><p><i><span>&#8220;Anyone who considers arithmetical methods of producing
random digits is, of course, in a state of sin.&#8221;</span></i></p><i>John von Neumann, 1951</i></blockquote><p>This module contains a number of random number generators.</p><p>The basic random number generator (after an algorithm by
Wichmann &amp; Hill, 1982) can be accessed in several ways:</p><div class="example">
<b style="example">Example: Using the random
module to get random numbers</b>
<pre>
# File: <a href="random/random-example-1.py">random-example-1.py</a>

import random

for i in range(5):

    # <i>random float: 0.0 &lt;= number &lt; 1.0</i>
    print random.random(),

    # <i>random float: 10 &lt;= number &lt; 20</i>
    print random.uniform(10, 20),

    # <i>random integer: 100 &lt;= number &lt;= 1000</i>
    print random.randint(100, 1000),

    # <i>random integer: even numbers in 100 &lt;= number &lt; 1000</i>
    print random.randrange(100, 1000, 2)

</pre><pre class="computeroutput" moreinfo="NONE">
$ python random-example-1.py
0.946842713956 19.5910069381 709 172
0.573613195398 16.2758417025 407 120
0.363241598013 16.8079747714 916 580
0.602115173978 18.386796935 531 774
0.526767588533 18.0783794596 223 344
</pre></div><p>Note that <b>randint</b> function can return the upper limit,
while the other functions always returns values smaller than the
upper limit.</p><p>The <b>choice</b> function picks a random item from a
sequence. It can be used with lists, tuples, or any other sequence
(provided it can be accessed in random order, of course):</p><div class="example">
<b style="example">Example: Using the random
module to chose random items from a sequence</b>
<pre>
# File: <a href="random/random-example-2.py">random-example-2.py</a>

import random

# <i>random choice from a list</i>
for i in range(5):
    print random.choice([1, 2, 3, 5, 9])

</pre><pre class="computeroutput" moreinfo="NONE">
$ python random-example-2.py
2
3
1
9
1
</pre></div><p>In 2.0 and later, the <b>shuffle</b> function can be used to
shuffle the contents of a list (that is, generate a random
permutation of a list in-place). The following example also shows
how to implement that function under 1.5.2 and earlier:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the random
module to shuffle a deck of cards</b>
<pre class="wide">
# File: <a href="random/random-example-4.py">random-example-4.py</a>

import random

try:
    # <i>available in Python 2.0 and later</i>
    shuffle = random.shuffle
except AttributeError:
    def shuffle(x):
        for i in xrange(len(x)-1, 0, -1):
            # <i>pick an element in x[:i+1] with which to exchange x[i]</i>
            j = int(random.random() * (i+1))
            x[i], x[j] = x[j], x[i]

cards = range(52)

shuffle(cards)

myhand = cards[:5]

print myhand
</pre><pre class="computeroutput wide" moreinfo="NONE">
$ python random-example-3.py
[4, 8, 40, 12, 30]
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>This module also contains a number of random generators with
non-uniform distribution. For example, the <b>gauss</b> function
generates random numbers with a gaussian distribution:</p><div class="example">
<b style="example">Example: Using the random
module to generate gaussian random numbers</b>
<pre>
# File: <a href="random/random-example-3.py">random-example-3.py</a>

import random

histogram = [0] * 20

# <i>calculate histogram for gaussian</i>
# <i>noise, using average=5, stddev=1</i>
for i in range(1000):
    i = int(random.gauss(5, 1) * 2)
    histogram[i] = histogram[i] + 1

# <i>print the histogram</i>
m = max(histogram)
for v in histogram:
    print "*" * (v * 50 / m)

</pre><pre class="computeroutput" moreinfo="NONE">
$ python random-example-3.py

****
**********
*************************
***********************************
************************************************
**************************************************
*************************************
***************************
*************
***
*
</pre></div><p>See the <i><a href="#python-library-reference-book">Python
Library Reference</a></i> for more information on the non-uniform
generators.</p><p class="note"><b>Warning:</b>
The random number generators provided in the standard library
are pseudo-random generators. While this might be good enough for
many purposes, including simulations, numerical analysis, and
games, but it&#8217;s definitely not good enough for cryptographic
use.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
