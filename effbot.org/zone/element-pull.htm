<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Using ElementTrees for Pull-Style&nbsp;Parsing</title></head><body data-page-id="85"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Using ElementTrees for Pull-Style&nbsp;Parsing</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">April 25, 2003 | Fredrik Lundh</p><p class="note"><b>Note:</b>
In recent versions of ElementTree, the <b>iterparse</b> interface provides
a more convenient (and faster) way to do this.  See
<a href="element-iterparse.htm"><cite>The ElementTree iterparse Function</cite></a> for more information and examples.</p><h3>&#8220;<i>
Do you need all data DOMmed at once?  You may be able to have
one DOM tree at a time, dropping and reloading everytime you switch
file.
</i>&#8220;</h3><p>An alternative is to use an incremental tree builder, and process
interesting subtrees as they arrive.</p><p>Here&#8217;s an example, using <a href="element-index.htm">the elementtree module</a>:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pykeyword">from</span> elementtree <span class="pykeyword">import</span> ElementTree

<span class="pykeyword">class</span> <span class="pyclass">MyBuilder</span>(ElementTree.TreeBuilder):

    <span class="pykeyword">def</span> <span class="pyfunction">end</span>(self, tag):
        elem = ElementTree.TreeBuilder.end(self, tag)
        <span class="pykeyword">if</span> elem.tag == <span class="pystring">"SCENE"</span>:
            <span class="pycomment"># process(elem) in some way, and write it out, e.g.</span>
            <span class="pycomment"># ElementTree.ElementTree(elem).write(sys.output)</span>
            elem.clear() <span class="pycomment"># we're done with it</span>

parser = ElementTree.XMLTreeBuilder()
parser._target = MyBuilder() <span class="pycomment"># plug in a custom builder!</span>

tree = ElementTree.parse(filename, parser)</pre></div><div class="yui-ge"><div class="yui-u first"><p>The above example overrides the tree builder&#8217;s <b>end</b> method,
looking for <b>SCENE</b> elements.</p><p>I&#8217;ve tested this with a 10 megabyte XML file created by concatenating
Jon Bosak&#8217;s Hamlet XML file over and over again, and wrapping it all in a
single document element.</p><p>The resulting file contains 720 scenes (about 15k each, in average).</p><p>The above script requires about 4.5 megabytes to run to completion, and
about 2 minutes processing time (on a really slow machine).</p><p>If I comment out the elem.clear() call, the script requires about 75
megabytes, and about 15 minutes (13 of which were spent on swapping; I
ran the test on a machine with 96 megabytes RAM and slow disks&#8230; ;-)</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
