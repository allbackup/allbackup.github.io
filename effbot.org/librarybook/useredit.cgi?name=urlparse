<html>
<head>
<title>urlparse ::: www.effbot.org</title>
<link rel='stylesheet' href='/effbot.css' type='text/css' media='screen' />
</head>
<body bgcolor='#ccffcc'>
<div>[<a href='urlparse.htm'>back</a>]</div>
<h3>Welcome to the effbot.org user editor!</h3>


<p><b>Note: This is not a contact form!  Support questions, spam, and
other off-topic stuff will be ignored.</b></p>

<p>To suggest changes, edit the HTML fragment in the text box below.
You can use the 'update preview' button to check your changes (the
preview is displayed beneath the text box).  When done, fill in the
name and address fields (optional) and click 'submit patch' to mail
the patch to me.  (I reserve the right to decide which patches to
include, of course.)  Thanks! /F</p>

<form method='post' id='useredit'>
<input type='hidden' name='name' value='urlparse'/>
<p>
<input type='submit' name='preview' value='update preview' style='background:#084; color:white; width:200px; font-weight:bold;' >
&nbsp;&nbsp;&nbsp;
<input type='submit' name='submit' value='submit patch'  style='background:#084; color:white; width:200px; font-weight:bold;' >
</p>
<textarea name='text' rows='30' cols='80'>The urlparse module

&lt;!-- ADSENSE --&gt;
&lt;p class='site'&gt;[&lt;a href='index.htm'&gt;contents&lt;/a&gt;]&lt;/p&gt;
&lt;p class='site'&gt;[&lt;a href='index.htm'&gt;contents&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;This module contains functions to process uniform resource
locators (URLs), and to convert between URLs and platform-specific
filenames.&lt;/p&gt;

&lt;div class="example"&gt;

&lt;b style="example"&gt;Example: Using the urlparse
module&lt;/b&gt;
&lt;pre&gt;
# File: &lt;a href="urlparse-example-1.py"&gt;urlparse-example-1.py&lt;/a&gt;

import urlparse

print urlparse.urlparse("http://host/path;params?query#fragment")

&lt;/pre&gt;

&lt;pre class="computeroutput" moreinfo="NONE"&gt;
('http', 'host', '/path', 'params', 'query', 'fragment')
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A common use is to split an HTTP URLs into host and path
components (an HTTP request involves asking the host to return data
identified by the path):&lt;/p&gt;

&lt;div class="example"&gt;

&lt;b style="example"&gt;Example: Using the urlparse
module to parse HTTP locators&lt;/b&gt;
&lt;pre&gt;
# File: &lt;a href="urlparse-example-2.py"&gt;urlparse-example-2.py&lt;/a&gt;

import urlparse

scheme, host, path, params, query, fragment =\
        urlparse.urlparse("http://host/path;params?query#fragment")

if scheme == "http":
    print "host", "=&amp;gt;", host
    if params:
        path = path + ";" + params
    if query:
        path = path + "?" + query
    print "path", "=&amp;gt;", path

&lt;/pre&gt;

&lt;pre class="computeroutput" moreinfo="NONE"&gt;
host =&amp;gt; host
path =&amp;gt; /path;params?query
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Alternatively, you can use the &lt;b&gt;urlunparse&lt;/b&gt; function to
put the URL back together again:&lt;/p&gt;

&lt;div class="example"&gt;

&lt;b style="example"&gt;Example: Using the urlparse
module to parse HTTP locators&lt;/b&gt;
&lt;pre&gt;
# File: &lt;a href="urlparse-example-3.py"&gt;urlparse-example-3.py&lt;/a&gt;

import urlparse

scheme, host, path, params, query, fragment =\
        urlparse.urlparse("http://host/path;params?query#fragment")

if scheme == "http":
    print "host", "=&amp;gt;", host
    print "path", "=&amp;gt;", urlparse.urlunparse((None, None, path, params, query, None))

&lt;/pre&gt;

&lt;pre class="computeroutput" moreinfo="NONE"&gt;
host =&amp;gt; host
path =&amp;gt; /path;params?query
&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;b&gt;urljoin&lt;/b&gt; function is used to combine an absolute URL
with a second, possibly relative URL:&lt;/p&gt;

&lt;div class="example"&gt;

&lt;b style="example"&gt;Example: Using the urlparse
module to combine relative locators&lt;/b&gt;
&lt;pre&gt;
# File: &lt;a href="urlparse-example-4.py"&gt;urlparse-example-4.py&lt;/a&gt;

import urlparse

base = "http://spam.egg/my/little/pony"

for path in "/index", "goldfish", "../black/cat":
    print path, "=&amp;gt;", urlparse.urljoin(base, path)

&lt;/pre&gt;

&lt;pre class="computeroutput" moreinfo="NONE"&gt;
/index =&amp;gt; http://spam.egg/index
goldfish =&amp;gt; http://spam.egg/my/little/goldfish
../black/cat =&amp;gt; http://spam.egg/my/black/cat
&lt;/pre&gt;

&lt;/div&gt;</textarea>
<table>
<tr><td><label for='author'>Name:</label></td><td>
<div><input name='author' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='email'>Mail:</label></td><td>
<div><input name='email' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='note'>Comment:</label></td><td>
<div><input name='note' value="" size=40></div>
</td><td>(Optional)</td></tr>
<tr><td><label for='password'>Password:</label></td><td>
<div><input name='password' value="(replace with the sum of 7+4)" size=40></div>
</td><td>(Required)</td></tr>
</table>
<p>
<input type='submit' name='preview' value='update preview' style='background:#084; color:white; width:200px; font-weight:bold;' >
&nbsp;&nbsp;&nbsp;
<input type='submit' name='submit' value='submit patch'  style='background:#084; color:white; width:200px; font-weight:bold;' >
</p>
<p>&nbsp;</p>
</form>
<div style='background: white; border: 2px solid #084; padding: 0px 20px;'>
<h2>The urlparse module</h2>

<!-- ADSENSE -->
<p class='site'>[<a href='index.htm'>contents</a>]</p>
<p class='site'>[<a href='index.htm'>contents</a>]</p>

<p>This module contains functions to process uniform resource
locators (URLs), and to convert between URLs and platform-specific
filenames.</p>

<div class="example">

<b style="example">Example: Using the urlparse
module</b>
<pre>
# File: <a href="urlparse-example-1.py">urlparse-example-1.py</a>

import urlparse

print urlparse.urlparse("http://host/path;params?query#fragment")

</pre>

<pre class="computeroutput" moreinfo="NONE">
('http', 'host', '/path', 'params', 'query', 'fragment')
</pre>

</div>

<p>A common use is to split an HTTP URLs into host and path
components (an HTTP request involves asking the host to return data
identified by the path):</p>

<div class="example">

<b style="example">Example: Using the urlparse
module to parse HTTP locators</b>
<pre>
# File: <a href="urlparse-example-2.py">urlparse-example-2.py</a>

import urlparse

scheme, host, path, params, query, fragment =\
        urlparse.urlparse("http://host/path;params?query#fragment")

if scheme == "http":
    print "host", "=&gt;", host
    if params:
        path = path + ";" + params
    if query:
        path = path + "?" + query
    print "path", "=&gt;", path

</pre>

<pre class="computeroutput" moreinfo="NONE">
host =&gt; host
path =&gt; /path;params?query
</pre>

</div>

<p>Alternatively, you can use the <b>urlunparse</b> function to
put the URL back together again:</p>

<div class="example">

<b style="example">Example: Using the urlparse
module to parse HTTP locators</b>
<pre>
# File: <a href="urlparse-example-3.py">urlparse-example-3.py</a>

import urlparse

scheme, host, path, params, query, fragment =\
        urlparse.urlparse("http://host/path;params?query#fragment")

if scheme == "http":
    print "host", "=&gt;", host
    print "path", "=&gt;", urlparse.urlunparse((None, None, path, params, query, None))

</pre>

<pre class="computeroutput" moreinfo="NONE">
host =&gt; host
path =&gt; /path;params?query
</pre>

</div>

<p>The <b>urljoin</b> function is used to combine an absolute URL
with a second, possibly relative URL:</p>

<div class="example">

<b style="example">Example: Using the urlparse
module to combine relative locators</b>
<pre>
# File: <a href="urlparse-example-4.py">urlparse-example-4.py</a>

import urlparse

base = "http://spam.egg/my/little/pony"

for path in "/index", "goldfish", "../black/cat":
    print path, "=&gt;", urlparse.urljoin(base, path)

</pre>

<pre class="computeroutput" moreinfo="NONE">
/index =&gt; http://spam.egg/index
goldfish =&gt; http://spam.egg/my/little/goldfish
../black/cat =&gt; http://spam.egg/my/black/cat
</pre>

</div>
</div>
</body>
</html>
