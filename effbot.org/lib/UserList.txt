
@@module UserList

<h1>UserList&#8212;Class wrapper for list objects</h1>


<p class='note'><b>Note:</b> This module is available for backward
compatibility only. If you are writing code that does not need to work
with versions of Python earlier than Python 2.2, please consider
subclassing directly from the built-in {@link list} type.

<p>This module defines a class that acts as a wrapper around list
objects. It is a useful base class for your own list-like classes, which
can inherit from them and override existing methods or add new ones. In
this way one can add new behaviors to lists.

<p>The {@link UserList} module defines the {@link UserList} class:

@@class UserList([list])

<p>Class that simulates a list. The instance's contents are kept in a
regular list, which is accessible via the {@link data} attribute of
{@link UserList} instances. The instance's contents are initially set to
a copy of {@var list}, defaulting to the empty list {@code []}. {@var
list} can be either a regular Python list, or an instance of {@link
UserList} (or a subclass).

@@text 

<p>In addition to supporting the methods and operations of mutable
sequences (see section {@link typesseq.html#typesseq}), {@link UserList}
instances provide the following attribute:

@@attribute UserList.data

<p>A real Python list object used to store the contents of the {@link
UserList} class.

@@text 

<p>Subclassing requirements: Subclasses of {@link UserList} are expect
to offer a constructor which can be called with either no arguments or
one argument. List operations which return a new sequence attempt to
create an instance of the actual implementation class. To do so, it
assumes that the constructor can be called with a single parameter,
which is a sequence object used as a data source.

<p>If a derived class does not wish to comply with this requirement, all
of the special methods supported by this class will need to be
overridden; please consult the sources for information about the methods
which need to be provided in that case.

<p>Changed in version 2.0: Python versions 1.5.2 and 1.6 also required
that the constructor be callable with no parameters, and offer a mutable
{@link data} attribute. Earlier versions of Python did not attempt to
create instances of the derived class.
