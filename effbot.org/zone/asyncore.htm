<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>The Asyncore&nbsp;Module</title></head><body data-page-id="7"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">The Asyncore&nbsp;Module</h1></div><div class="yui-ge"><div class="yui-u first"><p><i>This is an excerpt from the <a href="librarybook-index.htm">Python Standard Library</a>.</i></p><p>
The <a href="/tag/python.asyncore">asyncore</a> module provides a
<span>&#8220;reactive&#8221;</span> socket implementation.
Instead of creating socket objects, and calling methods on them to do
things, this module lets you write code that is called when something
can be done.  To implement an asynchronous socket handler, subclass
the <b>dispatcher</b> class, and override one or more of the following
methods:
</p><ul><li><p>
<b>writable</b> is called by the asyncore framework to check if the
dispatcher has data to send.  The default implementation always returns
true.
</p></li><li><p>
<b>readable</b> is called to check if the dispatcher is ready to process
incoming data.  The default implementation always returns true.  Note that
this doesn&#8217;t mean that there is data available; the framework will call
<b>handle_read</b> when data is ready.
</p></li><li><p>
<b>handle_connect</b> is called when a connection is
successfully established.
</p></li><li><p>
<b>handle_expt</b> is called when a connection fails
(Windows) and/or out-of-band data arrives.
</p></li><li><p>
<b>handle_accept</b> is called when a connection request
is made to a listening socket.  The callback should call the
<b>accept</b> method to get the client socket.
</p></li><li><p>
<b>handle_read</b> is called when there is data waiting to
be read from the socket.  The callback should call the
<b>recv</b> method to get the data.
</p></li><li><p>
<b>handle_write</b> is called when data can be written to
the socket.  Use the <b>send</b> method to write data.
</p></li><li><p>
<b>handle_close</b> is called when the socket is closed or
reset.
</p></li><li><p>
<b>handle_error(type, value, traceback)</b> is called if a
Python error occurs in any of the other callbacks.  The default
implementation prints an abbreviated traceback to
<b>sys.stdout</b>.
</p></li></ul></div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
