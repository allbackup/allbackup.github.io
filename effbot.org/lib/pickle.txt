
@@module pickle

<h1>pickle&#8212;Python object serialization</h1>

<p>The {@link pickle} module implements a fundamental, but powerful
algorithm for serializing and de-serializing a Python object structure.
&#8220;Pickling&#8221; is the process whereby a Python object hierarchy
is converted into a byte stream, and &#8220;unpickling&#8221; is the
inverse operation, whereby a byte stream is converted back into an
object hierarchy. Pickling (and unpickling) is alternatively known as
&#8220;serialization&#8221;, &#8220;marshalling,&#8221;{@link
footnote:8963} or &#8220;flattening&#8221;, however, to avoid confusion,
the terms used here are &#8220;pickling&#8221; and
&#8220;unpickling&#8221;.

<p>This documentation describes both the {@link pickle} module and the
{@link cPickle} module.

<h4>Footnotes</h4>

@@variable ... ``marshalling,''3.2

<p>Don't confuse this with the {@link marshal} module

@@text 

<h2>Relationship to other Python modules</h2>

<p>The {@link pickle} module has an optimized cousin called the {@link
cPickle} module. As its name implies, {@link cPickle} is written in C,
so it can be up to 1000 times faster than {@link pickle}. However it
does not support subclassing of the {@link Pickler} and {@link
Unpickler} classes, because in {@link cPickle} these are functions, not
classes. Most applications have no need for this functionality, and can
benefit from the improved performance of {@link cPickle}. Other than
that, the interfaces of the two modules are nearly identical; the common
interface is described in this manual and differences are pointed out
where necessary. In the following discussions, we use the term
&#8220;pickle&#8221; to collectively describe the {@link pickle} and
{@link cPickle} modules.

<p>The data streams the two modules produce are guaranteed to be
interchangeable.

<p>Python has a more primitive serialization module called {@link
marshal}, but in general {@link pickle} should always be the preferred
way to serialize Python objects. {@link marshal} exists primarily to
support Python's .pyc files.

<p>The {@link pickle} module differs from {@link marshal} several
significant ways:
<ul>
<li>
<p>The {@link pickle} module keeps track of the objects it has already
serialized, so that later references to the same object won't be
serialized again. {@link marshal} doesn't do this.

<p>This has implications both for recursive objects and object sharing.
Recursive objects are objects that contain references to themselves.
These are not handled by marshal, and in fact, attempting to marshal
recursive objects will crash your Python interpreter. Object sharing
happens when there are multiple references to the same object in
different places in the object hierarchy being serialized. {@link
pickle} stores such objects only once, and ensures that all other
references point to the master copy. Shared objects remain shared, which
can be very important for mutable objects.
<li>
<p>{@link marshal} cannot be used to serialize user-defined classes and
their instances. {@link pickle} can save and restore class instances
transparently, however the class definition must be importable and live
in the same module as when the object was stored.
<li>
<p>The {@link marshal} serialization format is not guaranteed to be
portable across Python versions. Because its primary job in life is to
support .pyc files, the Python implementers reserve the right to change
the serialization format in non-backwards compatible ways should the
need arise. The {@link pickle} serialization format is guaranteed to be
backwards compatible across Python releases.
</ul>


<p class='warning'><b>Warning:</b> The {@link pickle} module is not
intended to be secure against erroneous or maliciously constructed data.
Never unpickle data received from an untrusted or unauthenticated
source.

<p>Note that serialization is a more primitive notion than persistence;
although {@link pickle} reads and writes file objects, it does not
handle the issue of naming persistent objects, nor the (even more
complicated) issue of concurrent access to persistent objects. The
{@link pickle} module can transform a complex object into a byte stream
and it can transform the byte stream into an object with the same
internal structure. Perhaps the most obvious thing to do with these byte
streams is to write them onto a file, but it is also conceivable to send
them across a network or store them in a database. The module {@link
shelve} provides a simple interface to pickle and unpickle objects on
DBM-style database files.

<h2>Data stream format</h2>

<p>The data format used by {@link pickle} is Python-specific. This has
the advantage that there are no restrictions imposed by external
standards such as XDR (which can't represent pointer sharing); however
it means that non-Python programs may not be able to reconstruct pickled
Python objects.

<p>By default, the {@link pickle} data format uses a printable ASCII
representation. This is slightly more voluminous than a binary
representation. The big advantage of using printable ASCII (and of some
other characteristics of {@link pickle}'s representation) is that for
debugging or recovery purposes it is possible for a human to read the
pickled file with a standard text editor.

<p>There are currently 3 different protocols which can be used for
pickling.
<ul>
<li>
<p>Protocol version 0 is the original ASCII protocol and is backwards
compatible with earlier versions of Python.
<li>
<p>Protocol version 1 is the old binary format which is also compatible
with earlier versions of Python.
<li>
<p>Protocol version 2 was introduced in Python 2.3. It provides much
more efficient pickling of new-style classes.
</ul>

<p>Refer to PEP 307 for more information.

<p>If a {@var protocol} is not specified, protocol 0 is used. If {@var
protocol} is specified as a negative value or {@code HIGHEST_PROTOCOL},
the highest protocol version available will be used.

<p>Changed in version 2.3: The {@var bin} parameter is deprecated and
only provided for backwards compatibility. You should use the {@var
protocol} parameter instead.

<p>A binary format, which is slightly more efficient, can be chosen by
specifying a true value for the {@var bin} argument to the {@link
Pickler} constructor or the {@link dump} and {@link dumps} functions. A
{@var protocol} version >= 1 implies use of a binary format.

<h2>Usage</h2>

<p>To serialize an object hierarchy, you first create a pickler, then
you call the pickler's {@link dump} method. To de-serialize a data
stream, you first create an unpickler, then you call the unpickler's
{@link load} method. The {@link pickle} module provides the following
constant:

@@variable HIGHEST_PROTOCOL

<p>The highest protocol version available. This value can be passed as a
{@var protocol} value.
<blockquote>
@since New in version 2.3. <br />
</blockquote>

@@text 

<p>The {@link pickle} module provides the following functions to make
this process more convenient:

@@function dump(obj, file[, protocol[, bin]])

<p>Write a pickled representation of {@var obj} to the open file object
{@var file}. This is equivalent to {@code Pickler(}{@var file}, {@var
protocol}, {@var bin}).dump({@var obj}).

<p>If the {@var protocol} parameter is omitted, protocol 0 is used. If
{@var protocol} is specified as a negative value or {@code
HIGHEST_PROTOCOL}, the highest protocol version will be used.

<p>If the optional {@var bin} argument is true, the binary pickle format
is used; otherwise the (less efficient) text pickle format is used (for
backwards compatibility, this is the default).

<p>{@var file} must have a {@link write} method that accepts a single
string argument. It can thus be a file object opened for writing, a
{@link StringIO} object, or any other custom object that meets this
interface.
<blockquote>
@since Changed in version 2.3: The protocol parameter was added. The bin parameter is
deprecated and only provided for backwards compatibility. You
should use the protocol parameter instead. <br />
</blockquote>

@@function load(file)

<p>Read a string from the open file object {@var file} and interpret it
as a pickle data stream, reconstructing and returning the original
object hierarchy. This is equivalent to {@code Unpickler(}{@var
file}).load().

<p>{@var file} must have two methods, a {@link read} method that takes
an integer argument, and a {@link readline} method that requires no
arguments. Both methods should return a string. Thus {@var file} can be
a file object opened for reading, a {@link StringIO} object, or any
other custom object that meets this interface.

<p>This function automatically determines whether the data stream was
written in binary mode or not.

@@function dumps(obj[, protocol[, bin]])

<p>Return the pickled representation of the object as a string, instead
of writing it to a file.

<p>If the {@var protocol} parameter is omitted, protocol 0 is used. If
{@var protocol} is specified as a negative value or {@code
HIGHEST_PROTOCOL}, the highest protocol version will be used.

<p>If the optional {@var bin} argument is true, the binary pickle format
is used; otherwise the (less efficient) text pickle format is used (this
is the default).
<blockquote>
@since Changed in version 2.3: The protocol parameter was added. The bin parameter is
deprecated and only provided for backwards compatibility. You
should use the protocol parameter instead. <br />
</blockquote>

@@function loads(string)

<p>Read a pickled object hierarchy from a string. Characters in the
string past the pickled object's representation are ignored.

@@text 

<p>The {@link pickle} module also defines three exceptions:

@@exception PickleError

<p>A common base class for the other exceptions defined below. This
inherits from {@link exceptions.Exception}.

@@exception PicklingError

<p>This exception is raised when an unpicklable object is passed to the
{@link dump} method.

@@exception UnpicklingError

<p>This exception is raised when there is a problem unpickling an
object. Note that other exceptions may also be raised during unpickling,
including (but not necessarily limited to) {@link
exceptions.AttributeError}, {@link exceptions.EOFError}, {@link
exceptions.ImportError}, and {@link exceptions.IndexError}.

@@text 

<p>The {@link pickle} module also exports two callables{@link
footnote:8968}, {@link Pickler} and {@link Unpickler}:

@@class Pickler(file[, protocol[, bin]])

<p>This takes a file-like object to which it will write a pickle data
stream.

<p>If the {@var protocol} parameter is omitted, protocol 0 is used. If
{@var protocol} is specified as a negative value, the highest protocol
version will be used.

<p>Optional {@var bin} if true, tells the pickler to use the more
efficient binary pickle format, otherwise the ASCII format is used (this
is the default).

<p>{@var file} must have a {@link write} method that accepts a single
string argument. It can thus be an open file object, a {@link StringIO}
object, or any other custom object that meets this interface.
<blockquote>
@since Changed in version 2.3: The bin parameter is deprecated and only provided for backwards
compatibility. You should use the protocol parameter
instead. <br />
</blockquote>

@@text 

<p>{@link Pickler} objects define one (or two) public methods:

@@method Pickler.dump(obj)

<p>Write a pickled representation of {@var obj} to the open file object
given in the constructor. Either the binary or ASCII format will be
used, depending on the value of the {@var bin} flag passed to the
constructor.

@@method Pickler.clear_memo()

<p>Clears the pickler's &#8220;memo&#8221;. The memo is the data
structure that remembers which objects the pickler has already seen, so
that shared or recursive objects pickled by reference and not by value.
This method is useful when re-using picklers.

<p class='note'><b>Note:</b> Prior to Python 2.3, {@link clear_memo} was
only available on the picklers created by {@link cPickle}. In the {@link
pickle} module, picklers have an instance variable called {@link memo}
which is a Python dictionary. So to clear the memo for a {@link pickle}
module pickler, you could do the following: mypickler.memo.clear() Code
that does not need to support older versions of Python should simply use
{@link clear_memo}.

@@text 

<p>It is possible to make multiple calls to the {@link dump} method of
the same {@link Pickler} instance. These must then be matched to the
same number of calls to the {@link load} method of the corresponding
{@link Unpickler} instance. If the same object is pickled by multiple
{@link dump} calls, the {@link load} will all yield references to the
same object.{@link footnote:8970}

<p>{@link Unpickler} objects are defined as:

@@class Unpickler(file)

<p>This takes a file-like object from which it will read a pickle data
stream. This class automatically determines whether the data stream was
written in binary mode or not, so it does not need a flag as in the
{@link Pickler} factory.

<p>{@var file} must have two methods, a {@link read} method that takes
an integer argument, and a {@link readline} method that requires no
arguments. Both methods should return a string. Thus {@var file} can be
a file object opened for reading, a {@link StringIO} object, or any
other custom object that meets this interface.

@@text 

<p>{@link Unpickler} objects have one (or two) public methods:

@@method Unpickler.load()

<p>Read a pickled object representation from the open file object given
in the constructor, and return the reconstituted object hierarchy
specified therein.

@@method Unpickler.noload()

<p>This is just like {@link load} except that it doesn't actually create
any objects. This is useful primarily for finding what's called
&#8220;persistent ids&#8221; that may be referenced in a pickle data
stream. See section {@link pickle-protocol.html#pickle-protocol} below
for more details.

<p>Note: the {@link noload} method is currently only available on {@link
Unpickler} objects created with the {@link cPickle} module. {@link
pickle} module {@link Unpickler}s do not have the {@link noload} method.

@@text 

<h4>Footnotes</h4>

@@variable ... callables3.3
@@unknown In the pickle module these callables are classes, which you could subclass to customize the behavior. However, in the cPickle module these callables are factory functions and so cannot be subclassed. One common reason to subclass is to control what objects can actually be unpickled. See section 3.14.6 for more details.
@@variable ... object.3.4

<p>{@em Warning}: this is intended for pickling multiple objects without
intervening modifications to the objects or their parts. If you modify
an object and then pickle it again using the same {@link Pickler}
instance, the object is not pickled again -- a reference to it is
pickled and the {@link Unpickler} will return the old value, not the
modified one. There are two problems here: (1) detecting changes, and
(2) marshalling a minimal set of changes. Garbage Collection may also
become a problem here.

@@text 

<h2>What can be pickled and unpickled?</h2>

<p>The following types can be pickled:
<ul>
<li>
<p>{@link None}, {@link True}, and {@code False}
<li>
<p>integers, long integers, floating point numbers, complex numbers
<li>
<p>normal and Unicode strings
<li>
<p>tuples, lists, sets, and dictionaries containing only picklable
objects
<li>
<p>functions defined at the top level of a module
<li>
<p>built-in functions defined at the top level of a module
<li>
<p>classes that are defined at the top level of a module
<li>
<p>instances of such classes whose {@link __dict__} or {@link
__setstate__} is picklable (see section {@link
pickle-protocol.html#pickle-protocol} for details)
</ul>

<p>Attempts to pickle unpicklable objects will raise the {@link
PicklingError} exception; when this happens, an unspecified number of
bytes may have already been written to the underlying file.

<p>Note that functions (built-in and user-defined) are pickled by
&#8220;fully qualified&#8221; name reference, not by value. This means
that only the function name is pickled, along with the name of module
the function is defined in. Neither the function's code, nor any of its
function attributes are pickled. Thus the defining module must be
importable in the unpickling environment, and the module must contain
the named object, otherwise an exception will be raised.{@link
footnote:8971}

<p>Similarly, classes are pickled by named reference, so the same
restrictions in the unpickling environment apply. Note that none of the
class's code or data is pickled, so in the following example the class
attribute {@code attr} is not restored in the unpickling environment:

<pre>
class Foo:
    attr = 'a class attr'

picklestring = pickle.dumps(Foo)
</pre>


<p>These restrictions are why picklable functions and classes must be
defined in the top level of a module.

<p>Similarly, when class instances are pickled, their class's code and
data are not pickled along with them. Only the instance data are
pickled. This is done on purpose, so you can fix bugs in a class or add
methods to the class and still load objects that were created with an
earlier version of the class. If you plan to have long-lived objects
that will see many versions of a class, it may be worthwhile to put a
version number in the objects so that suitable conversions can be made
by the class's {@link __setstate__} method.

<h4>Footnotes</h4>

@@variable ... raised.3.5

<p>The exception raised will likely be an {@link exceptions.ImportError}
or an {@link exceptions.AttributeError} but it could be something else.

@@text 

<h2>The pickle protocol</h2>

<p>This section describes the &#8220;pickling protocol&#8221; that
defines the interface between the pickler/unpickler and the objects that
are being serialized. This protocol provides a standard way for you to
define, customize, and control how your objects are serialized and
de-serialized. The description in this section doesn't cover specific
customizations that you can employ to make the unpickling environment
slightly safer from untrusted pickle data streams; see section {@link
pickle-sub.html#pickle-sub} for more details.
@@error unexpected div online-navigation

<h3>Pickling and unpickling normal class instances</h3>

<p>When a pickled class instance is unpickled, its {@link __init__}
method is normally {@em not} invoked. If it is desirable that the {@link
__init__} method be called on unpickling, an old-style class can define
a method {@link __getinitargs__}, which should return a {@em tuple}
containing the arguments to be passed to the class constructor (i.e.
{@link __init__}). The {@link __getinitargs__} method is called at
pickle time; the tuple it returns is incorporated in the pickle for the
instance.

<p>New-style types can provide a {@link __getnewargs__} method that is
used for protocol 2. Implementing this method is needed if the type
establishes some internal invariants when the instance is created, or if
the memory allocation is affected by the values passed to the {@link
__new__} method for the type (as it is for tuples and strings).
Instances of a new-style type {@link C} are created using

<pre>
<tt>obj = C.__new__(C, *<var>args</var>)
</tt>
</pre>


<p>where {@var args} is the result of calling {@link __getnewargs__} on
the original object; if there is no {@link __getnewargs__}, an empty
tuple is assumed.

<p>Classes can further influence how their instances are pickled; if the
class defines the method {@link __getstate__}, it is called and the
return state is pickled as the contents for the instance, instead of the
contents of the instance's dictionary. If there is no {@link
__getstate__} method, the instance's {@link __dict__} is pickled.

<p>Upon unpickling, if the class also defines the method {@link
__setstate__}, it is called with the unpickled state.{@link
footnote:8816} If there is no {@link __setstate__} method, the pickled
state must be a dictionary and its items are assigned to the new
instance's dictionary. If a class defines both {@link __getstate__} and
{@link __setstate__}, the state object needn't be a dictionary and these
methods can do what they want.{@link footnote:8979}


<p class='warning'><b>Warning:</b> For new-style classes, if {@link
__getstate__} returns a false value, the {@link __setstate__} method
will not be called.

<h4>Footnotes</h4>

@@variable ... state.3.6
@@unknown These methods can also be used to implement copying class instances.
@@variable ... want.3.7

<p>This protocol is also used by the shallow and deep copying operations
defined in the {@link copy} module.

@@text 

<h3>Pickling and unpickling extension types</h3>

<p>When the {@link Pickler} encounters an object of a type it knows
nothing about -- such as an extension type -- it looks in two places for
a hint of how to pickle it. One alternative is for the object to
implement a {@link __reduce__} method. If provided, at pickling time
{@link __reduce__} will be called with no arguments, and it must return
either a string or a tuple.

<p>If a string is returned, it names a global variable whose contents
are pickled as normal. The string returned by {@link __reduce__} should
be the object's local name relative to its module; the pickle module
searches the module namespace to determine the object's module.

<p>When a tuple is returned, it must be between two and five elements
long. Optional elements can either be omitted, or {@code None} can be
provided as their value. The semantics of each element are:
<ul>
<li>
<p>A callable object that will be called to create the initial version
of the object. The next element of the tuple will provide arguments for
this callable, and later elements provide additional state information
that will subsequently be used to fully reconstruct the pickled date.

<p>In the unpickling environment this object must be either a class, a
callable registered as a &#8220;safe constructor&#8221; (see below), or
it must have an attribute {@link __safe_for_unpickling__} with a true
value. Otherwise, an {@link UnpicklingError} will be raised in the
unpickling environment. Note that as usual, the callable itself is
pickled by name.
<li>
<p>A tuple of arguments for the callable object, or {@code None}.


<p>Deprecated since release 2.3. If this item is {@link None}, then
instead of calling the callable directly, its {@link __basicnew__}
method is called without arguments; this method should also return the
unpickled object. Providing {@link None} is deprecated, however; return
a tuple of arguments instead.
<li>
<p>Optionally, the object's state, which will be passed to the object's
{@link __setstate__} method as described in section {@link
pickle-inst.html#pickle-inst}. If the object has no {@link __setstate__}
method, then, as above, the value must be a dictionary and it will be
added to the object's {@link __dict__}.
<li>
<p>Optionally, an iterator (and not a sequence) yielding successive list
items. These list items will be pickled, and appended to the object
using either {@code obj.append(}{@var item}) or {@code obj.extend(}{@var
list_of_items}). This is primarily used for list subclasses, but may be
used by other classes as long as they have {@link append} and {@link
extend} methods with the appropriate signature. (Whether {@link append}
or {@link extend} is used depends on which pickle protocol version is
used as well as the number of items to append, so both must be
supported.)
<li>
<p>Optionally, an iterator (not a sequence) yielding successive
dictionary items, which should be tuples of the form {@code (}{@var
key}, {@var value}). These items will be pickled and stored to the
object using {@code obj[}{@var key}] = {@var value}. This is primarily
used for dictionary subclasses, but may be used by other classes as long
as they implement {@link __setitem__}.
</ul>

<p>It is sometimes useful to know the protocol version when implementing
{@link __reduce__}. This can be done by implementing a method named
{@link __reduce_ex__} instead of {@link __reduce__}. {@link
__reduce_ex__}, when it exists, is called in preference over {@link
__reduce__} (you may still provide {@link __reduce__} for backwards
compatibility). The {@link __reduce_ex__} method will be called with a
single integer argument, the protocol version.

<p>The {@link object} class implements both {@link __reduce__} and
{@link __reduce_ex__}; however, if a subclass overrides {@link
__reduce__} but not {@link __reduce_ex__}, the {@link __reduce_ex__}
implementation detects this and calls {@link __reduce__}.

<p>An alternative to implementing a {@link __reduce__} method on the
object to be pickled, is to register the callable with the {@link
copyreg copy_reg} module. This module provides a way for programs to
register &#8220;reduction functions&#8221; and constructors for
user-defined types. Reduction functions have the same semantics and
interface as the {@link __reduce__} method described above, except that
they are called with a single argument, the object to be pickled.

<p>The registered constructor is deemed a &#8220;safe constructor&#8221;
for purposes of unpickling as described above.

<h3>Pickling and unpickling external objects</h3>

<p>For the benefit of object persistence, the {@link pickle} module
supports the notion of a reference to an object outside the pickled data
stream. Such objects are referenced by a &#8220;persistent id&#8221;,
which is just an arbitrary string of printable ASCII characters. The
resolution of such names is not defined by the {@link pickle} module; it
will delegate this resolution to user defined functions on the pickler
and unpickler.{@link footnote:8985}

<p>To define external persistent id resolution, you need to set the
{@link persistent_id} attribute of the pickler object and the {@link
persistent_load} attribute of the unpickler object.

<p>To pickle objects that have an external persistent id, the pickler
must have a custom {@link persistent_id} method that takes an object as
an argument and returns either {@link None} or the persistent id for
that object. When {@link None} is returned, the pickler simply pickles
the object as normal. When a persistent id string is returned, the
pickler will pickle that string, along with a marker so that the
unpickler will recognize the string as a persistent id.

<p>To unpickle external objects, the unpickler must have a custom {@link
persistent_load} function that takes a persistent id string and returns
the referenced object.

<p>Here's a silly example that {@em might} shed more light:

<pre>
import pickle
from cStringIO import StringIO

src = StringIO()
p = pickle.Pickler(src)

def persistent_id(obj):
    if hasattr(obj, 'x'):
        return 'the value %d' % obj.x
    else:
        return None

p.persistent_id = persistent_id

class Integer:
    def __init__(self, x):
        self.x = x
    def __str__(self):
        return 'My name is integer %d' % self.x

i = Integer(7)
print i
p.dump(i)

datastream = src.getvalue()
print repr(datastream)
dst = StringIO(datastream)

up = pickle.Unpickler(dst)

class FancyInteger(Integer):
    def __str__(self):
        return 'I am the integer %d' % self.x

def persistent_load(persid):
    if persid.startswith('the value '):
        value = int(persid.split()[2])
        return FancyInteger(value)
    else:
        raise pickle.UnpicklingError, 'Invalid persistent id'

up.persistent_load = persistent_load

j = up.load()
print j
</pre>


<p>In the {@link cPickle} module, the unpickler's {@link
persistent_load} attribute can also be set to a Python list, in which
case, when the unpickler reaches a persistent id, the persistent id
string will simply be appended to this list. This functionality exists
so that a pickle data stream can be &#8220;sniffed&#8221; for object
references without actually instantiating all the objects in a
pickle.{@link footnote:8892} Setting {@link persistent_load} to a list
is usually used in conjunction with the {@link noload} method on the
Unpickler.

<h4>Footnotes</h4>

@@variable ... unpickler.3.8
@@method Unpickler.The actual mechanism for associating these user defined functions is slightly different for pickle and cPickle. The description given here works the same for both implementations. Users of the pickle module could also use subclassing to effect the same results, overriding the persistent_id() and persistent_load() methods in the derived classes.
@@variable ... pickle.3.9

<p>We'll leave you with the image of Guido and Jim sitting around
sniffing pickles in their living rooms.

@@text 

<h2>Subclassing Unpicklers</h2>

<p>By default, unpickling will import any class that it finds in the
pickle data. You can control exactly what gets unpickled and what gets
called by customizing your unpickler. Unfortunately, exactly how you do
this is different depending on whether you're using {@link pickle} or
{@link cPickle}.{@link footnote:8987}

<p>In the {@link pickle} module, you need to derive a subclass from
{@link Unpickler}, overriding the {@link load_global} method. {@link
load_global} should read two lines from the pickle data stream where the
first line will the name of the module containing the class and the
second line will be the name of the instance's class. It then looks up
the class, possibly importing the module and digging out the attribute,
then it appends what it finds to the unpickler's stack. Later on, this
class will be assigned to the {@link __class__} attribute of an empty
class, as a way of magically creating an instance without calling its
class's {@link __init__}. Your job (should you choose to accept it),
would be to have {@link load_global} push onto the unpickler's stack, a
known safe version of any class you deem safe to unpickle. It is up to
you to produce such a class. Or you could raise an error if you want to
disallow all unpickling of instances. If this sounds like a hack, you're
right. Refer to the source code to make this work.

<p>Things are a little cleaner with {@link cPickle}, but not by much. To
control what gets unpickled, you can set the unpickler's {@link
find_global} attribute to a function or {@link None}. If it is {@code
None} then any attempts to unpickle instances will raise an {@link
UnpicklingError}. If it is a function, then it should accept a module
name and a class name, and return the corresponding class object. It is
responsible for looking up the class and performing any necessary
imports, and it may raise an error to prevent instances of the class
from being unpickled.

<p>The moral of the story is that you should be really careful about the
source of the strings your application unpickles.

<h4>Footnotes</h4>

@@variable ...cPickle.3.10

<p>A word of caution: the mechanisms described here use internal
attributes and methods, which are subject to change in future versions
of Python. We intend to someday provide a common interface for
controlling this behavior, which will work in either {@link pickle} or
{@link cPickle}.

@@text 

<h2>Example</h2>

<p>Here's a simple example of how to modify pickling behavior for a
class. The {@link TextReader} class opens a text file, and returns the
line number and line contents each time its {@link readline} method is
called. If a {@link TextReader} instance is pickled, all attributes {@em
except} the file object member are saved. When the instance is
unpickled, the file is reopened, and reading resumes from the last
location. The {@link __setstate__} and {@link __getstate__} methods are
used to implement this behavior.

<pre>
class TextReader:
    """Print and number lines in a text file."""
    def __init__(self, file):
        self.file = file
        self.fh = open(file)
        self.lineno = 0

    def readline(self):
        self.lineno = self.lineno + 1
        line = self.fh.readline()
        if not line:
            return None
        if line.endswith("\n"):
            line = line[:-1]
        return "%d: %s" % (self.lineno, line)

    def __getstate__(self):
        odict = self.__dict__.copy() # copy the dict since we change it
        del odict['fh']              # remove filehandle entry
        return odict

    def __setstate__(self,dict):
        fh = open(dict['file'])      # reopen file
        count = dict['lineno']       # read from file...
        while count:                 # until line count is restored
            fh.readline()
            count = count - 1
        self.__dict__.update(dict)   # update attributes
        self.fh = fh                 # save the file object
</pre>


<p>A sample usage might be something like this:

<pre>
&gt;&gt;&gt; import TextReader
&gt;&gt;&gt; obj = TextReader.TextReader("TextReader.py")
&gt;&gt;&gt; obj.readline()
'1: #!/usr/local/bin/python'
&gt;&gt;&gt; # (more invocations of obj.readline() here)
... obj.readline()
'7: class TextReader:'
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; pickle.dump(obj,open('save.p','w'))
</pre>


<p>If you want to see that {@link pickle} works across Python processes,
start another Python session, before continuing. What follows can happen
from either the same process or a new process.

<pre>
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; reader = pickle.load(open('save.p'))
&gt;&gt;&gt; reader.readline()
'8:     "Print and number lines in a text file."'
</pre>


@see 
{@link copyreg Module copy_reg}

Pickle interface constructor registration for extension types.
@see 
{@link shelve Module shelve}

Indexed databases of objects; uses pickle.
@see 
{@link copy Module copy}

Shallow and deep object copying.
@see 
{@link marshal Module marshal}

High-performance serialization of built-in types.
