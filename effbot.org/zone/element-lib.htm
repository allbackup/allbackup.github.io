<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"><link rel="shortcut icon" href="/media/img/effbot.ico"><link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"><link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"><title>Element Library&nbsp;Functions</title></head><body data-page-id="82"><div id="doc2" class="yui-t2"><div id="hd"></div><div id="bd"><div id="yui-main"><div class="yui-b"><div class="content"><div class="yui-g"><h1 class="maintitle">Element Library&nbsp;Functions</h1></div><div class="yui-ge"><div class="yui-u first"><p class="info">March 22, 2004 | Fredrik Lundh</p><p>ElementTree 1.3 may include a new module, <b>ElementLib</b>, with
a number of convenient helper functions.</p><p>The exact contents are yet to be determined; here are some of the
current proposals (from various sources, in no specific order):</p><p>Helpers to add subelements, with a nicer syntax.</p><p>Wrappers to access elements via attributes (templating).</p><h3 id="copy">copy&#160;<a class="nav" href="#copy" title="bookmark!">#</a></h3><p><b>copy/deepcopy</b>: Copy element structures. [<i>the copy module
is supposed to work /F</i>]</p><h3 id="flatten">flatten&#160;<a class="nav" href="#flatten" title="bookmark!">#</a></h3><p><b>flatten</b>: Recursively extract text content.</p><pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">flatten</span>(elem, include_tail=0):
    text = elem.text <span class="pykeyword">or</span> <span class="pystring">""</span>
    <span class="pykeyword">for</span> e <span class="pykeyword">in</span> elem:
        text += flatten(e, 1)
    <span class="pykeyword">if</span> include_tail <span class="pykeyword">and</span> elem.tail: text += elem.tail
    <span class="pykeyword">return</span> text</pre><p>To get rid of all subelements to a given element, and keep just the
text, you can do:

<pre class="python">
elem.text = flatten(elem); <span class="pykeyword">del</span> elem[:]</pre><h3 id="append">append&#160;<a class="nav" href="#append" title="bookmark!">#</a></h3></p><p><b>append</b>: Like elem.append, but accepts either an element or a string (which is added to the tail).</p><pre class="python">
<span class="pykeyword">def</span> <span class="pyfunction">append</span>(elem, item):
    <span class="pykeyword">if</span> isinstance(item, basestring):
        <span class="pykeyword">if</span> len(elem):
            elem[-1].tail = (elem[-1].tail <span class="pykeyword">or</span> <span class="pystring">""</span>) + item
        <span class="pykeyword">else</span>:
            elem.text = (elem.text <span class="pykeyword">or</span> <span class="pystring">""</span>) + item
    <span class="pykeyword">else</span>:
        elem.append(item)</pre><h3 id="walk">walk&#160;<a class="nav" href="#walk" title="bookmark!">#</a></h3><p><b>walk</b>: A generator that walks a tree in depth-first order. I think this
is the same as &#8220;getiterator&#8221; but the docs are confusing. [<i>the docs say
&#8220;document order&#8221;, which is the order elements are stored in an XML
document.  same as depth-first, in other words /F</i>]</p><p><b>reverse_walk</b>: Like walk but in the reverse order.</p><p><b>walkaround</b>: Walks around the outside of a tree. Each non-terminal node
is visited twice. Each node should have a attribute whose values can
be NONE, DONE, FIRST, SECOND, and LEAF.</p><h3 id="kill">kill&#160;<a class="nav" href="#kill" title="bookmark!">#</a></h3><p><b>kill/hoist</b>: Removes a node from a tree. It is replaced by its children.</p><h3 id="prettyprint">prettyprint&#160;<a class="nav" href="#prettyprint" title="bookmark!">#</a></h3><p><b>prettyprint</b>: Prints a tree with each node indented according to its
depth.  This is done by first indenting the tree (see below), and then serializing it as usual.</p><p><b>indent</b>: Adds whitespace to the tree, so that saving it as usual 
results in a prettyprinted tree.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pycomment"># in-place prettyprint formatter</span>

<span class="pykeyword">def</span> <span class="pyfunction">indent</span>(elem, level=0):
    i = <span class="pystring">"\n"</span> + level*<span class="pystring">"  "</span>
    <span class="pykeyword">if</span> len(elem):
        <span class="pykeyword">if</span> <span class="pykeyword">not</span> elem.text <span class="pykeyword">or</span> <span class="pykeyword">not</span> elem.text.strip():
            elem.text = i + <span class="pystring">"  "</span>
        <span class="pykeyword">if</span> <span class="pykeyword">not</span> elem.tail <span class="pykeyword">or</span> <span class="pykeyword">not</span> elem.tail.strip():
            elem.tail = i
        <span class="pykeyword">for</span> elem <span class="pykeyword">in</span> elem:
            indent(elem, level+1)
        <span class="pykeyword">if</span> <span class="pykeyword">not</span> elem.tail <span class="pykeyword">or</span> <span class="pykeyword">not</span> elem.tail.strip():
            elem.tail = i
    <span class="pykeyword">else</span>:
        <span class="pykeyword">if</span> level <span class="pykeyword">and</span> (<span class="pykeyword">not</span> elem.tail <span class="pykeyword">or</span> <span class="pykeyword">not</span> elem.tail.strip()):
            elem.tail = i</pre></div><div class="yui-ge"><div class="yui-u first"><h3 id="tostringlist">tostringlist, fromstringlist&#160;<a class="nav" href="#tostringlist" title="bookmark!">#</a></h3><p><b>tostringlist</b> and <b>fromstringlist</b> to serialize to and from
lists of string fragments.  This can improve performance a lot when you&#8217;re
not really interested in the entire string:</p><pre class="python">
out.write(tostring(elem))

out.writelines(tostringlist(elem))

<span class="pykeyword">class</span> <span class="pyclass">XMLGenerator</span>:
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, elem):
        self.iter = iter(tostringlist(elem))
    <span class="pykeyword">def</span> <span class="pyfunction">more</span>(self):
        <span class="pykeyword">try</span>:
            <span class="pykeyword">return</span> self.iter.next()
        <span class="pykeyword">except</span> StopIteration:
            <span class="pykeyword">return</span> None</pre><p>Namespace helpers.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><pre class="python wide wide">
<span class="pykeyword">class</span> <span class="pyclass">NS</span>:
    <span class="pykeyword">def</span> <span class="pyfunction">__init__</span>(self, uri):
        self.uri = uri
    <span class="pykeyword">def</span> <span class="pyfunction">__getattr__</span>(self, tag):
        <span class="pykeyword">return</span> self.uri + tag
    <span class="pykeyword">def</span> <span class="pyfunction">__call__</span>(self, path):
        <span class="pykeyword">return</span> <span class="pystring">"/"</span>.join(getattr(self, tag) <span class="pykeyword">for</span> tag <span class="pykeyword">in</span> path.split(<span class="pystring">"/"</span>))

XHTML = NS(<span class="pystring">"{http://www.w3.org/1999/xhtml}"</span>)

<span class="pykeyword">for</span> elem <span class="pykeyword">in</span> tree.findall(XHTML(<span class="pystring">"ul/li"</span>)):
    ...</pre></div><div class="yui-ge"><div class="yui-u first"><h3>See also</h3><a href="element-bits-and-pieces.htm"><cite>Bits and Pieces</cite></a>
<h3 id="notes">Notes&#160;<a class="nav" href="#notes" title="bookmark!">#</a></h3><a href="http://article.gmane.org/gmane.comp.python.announce/4430">Suggestions</a> (included above) from Ed Jones, and 
<a href="http://article.gmane.org/gmane.comp.python.general/351050">additional comments</a> by Fran&#231;ois Pinard.</div><div class="yui-u">&#160;</div></div><div class="yui-g"></div></div></div></div><div class="yui-b"><div id='menu'><ul><li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li><li><b><a href="." title="Go to zone index page.">::: zone :::</a></b></li></ul><ul><li><b>::: contents</b></li></ul><ul><li><ul><li><ul><li><a href="#copy">copy</a></li><li><a href="#flatten">flatten</a></li><li><a href="#append">append</a></li><li><a href="#walk">walk</a></li><li><a href="#kill">kill</a></li><li><a href="#prettyprint">prettyprint</a></li><li><a href="#tostringlist">tostringlist, fromstringlist</a></li><li><a href="#notes">Notes</a></li></ul></li></ul></li></ul></div></div></div><div id="ft"><p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;" width="80" height="15" ></a>
rendered by a <a href="http://www.djangoproject.com/">django</a> application.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p></div></div><script src="/media/js/effbot-min.js" type="text/javascript"></script></body></html>
