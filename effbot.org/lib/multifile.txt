
@@module multifile

<h1>multifile&#8212;Support for files containing distinct parts</h1>

<p>The {@link MultiFile} object enables you to treat sections of a text
file as file-like input objects, with {@code &#8221;} being returned by
{@link readline} when a given delimiter pattern is encountered. The
defaults of this class are designed to make it useful for parsing MIME
multipart messages, but by subclassing it and overriding methods it can
be easily adapted for more general use.

@@class MultiFile(fp[, seekable])

<p>Create a multi-file. You must instantiate this class with an input
object argument for the {@link MultiFile} instance to get lines from,
such as a file object returned by {@link open}.

<p>{@link MultiFile} only ever looks at the input object's {@link
readline}, {@link seek} and {@link tell} methods, and the latter two are
only needed if you want random access to the individual MIME parts. To
use {@link MultiFile} on a non-seekable stream object, set the optional
{@var seekable} argument to false; this will prevent using the input
object's {@link seek} and {@link tell} methods.

@@text 

<p>It will be useful to know that in {@link MultiFile}'s view of the
world, text is composed of three kinds of lines: data, section-dividers,
and end-markers. MultiFile is designed to support parsing of messages
that may have multiple nested message parts, each with its own pattern
for section-divider and end-marker lines.

@see 
{@link email Module email}

Comprehensive email handling package; supersedes the multifile module.

<h2>MultiFile Objects</h2>

<p>A {@link MultiFile} instance has the following methods:

@@method MultiFile.readline(str)

<p>Read a line. If the line is data (not a section-divider or end-marker
or real EOF) return it. If the line matches the most-recently-stacked
boundary, return {@code &#8221;} and set {@code self.last} to 1 or 0
according as the match is or is not an end-marker. If the line matches
any other stacked boundary, raise an error. On encountering end-of-file
on the underlying stream object, the method raises {@link Error} unless
all boundaries have been popped.

@@method MultiFile.readlines(str)

<p>Return all lines remaining in this part as a list of strings.

@@method MultiFile.read()

<p>Read all lines, up to the next section. Return them as a single
(multiline) string. Note that this doesn't take a size argument!

@@method MultiFile.seek(pos[, whence])

<p>Seek. Seek indices are relative to the start of the current section.
The {@var pos} and {@var whence} arguments are interpreted as for a file
seek.

@@method MultiFile.tell()

<p>Return the file position relative to the start of the current
section.

@@method MultiFile.next()

<p>Skip lines to the next section (that is, read lines until a
section-divider or end-marker has been consumed). Return true if there
is such a section, false if an end-marker is seen. Re-enable the
most-recently-pushed boundary.

@@method MultiFile.is_data(str)

<p>Return true if {@var str} is data and false if it might be a section
boundary. As written, it tests for a prefix other than {@code '-}{@code
-'} at start of line (which all MIME boundaries have) but it is declared
so it can be overridden in derived classes.

<p>Note that this test is used intended as a fast guard for the real
boundary tests; if it always returns false it will merely slow
processing, not cause it to fail.

@@method MultiFile.push(str)

<p>Push a boundary string. When an appropriately decorated version of
this boundary is found as an input line, it will be interpreted as a
section-divider or end-marker. All subsequent reads will return the
empty string to indicate end-of-file, until a call to {@link pop}
removes the boundary a or {@link next} call reenables it.

<p>It is possible to push more than one boundary. Encountering the
most-recently-pushed boundary will return EOF; encountering any other
boundary will raise an error.

@@method MultiFile.pop()

<p>Pop a section boundary. This boundary will no longer be interpreted
as EOF.

@@method MultiFile.section_divider(str)

<p>Turn a boundary into a section-divider line. By default, this method
prepends {@code '-}{@code -'} (which MIME section boundaries have) but
it is declared so it can be overridden in derived classes. This method
need not append LF or CR-LF, as comparison with the result ignores
trailing whitespace.

@@method MultiFile.end_marker(str)

<p>Turn a boundary string into an end-marker line. By default, this
method prepends {@code '-}{@code -'} and appends {@code '-}{@code -'}
(like a MIME-multipart end-of-message marker) but it is declared so it
can be overridden in derived classes. This method need not append LF or
CR-LF, as comparison with the result ignores trailing whitespace.

@@text 

<p>Finally, {@link MultiFile} instances have two public instance
variables:

@@attribute MultiFile.level

<p>Nesting depth of the current part.

@@attribute MultiFile.last

<p>True if the last end-of-file was for an end-of-message marker.

@@text 

<h2>MultiFile Example</h2>

<pre>
import mimetools
import multifile
import StringIO

def extract_mime_part_matching(stream, mimetype):
    """Return the first element in a multipart MIME message on stream
    matching mimetype."""

    msg = mimetools.Message(stream)
    msgtype = msg.gettype()
    params = msg.getplist()

    data = StringIO.StringIO()
    if msgtype[:10] == "multipart/":

        file = multifile.MultiFile(stream)
        file.push(msg.getparam("boundary"))
        while file.next():
            submsg = mimetools.Message(file)
            try:
                data = StringIO.StringIO()
                mimetools.decode(file, data, submsg.getencoding())
            except ValueError:
                continue
            if submsg.gettype() == mimetype:
                break
        file.pop()
    return data.getvalue()
</pre>

