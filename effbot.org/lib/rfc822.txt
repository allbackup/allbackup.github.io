
@@module rfc822

<h1>rfc822&#8212;Parse RFC 2822 mail headers</h1>
@@error unexpected div versionnote

<p>This module defines a class, {@link Message}, which represents an
&#8220;email message&#8221; as defined by the Internet standard {@link
http://www.faqs.org/rfcs/rfc2822.html RFC 2822}.{@link footnote:60406}
Such messages consist of a collection of message headers, and a message
body. This module also defines a helper class {@link AddressList} for
parsing {@link http://www.faqs.org/rfcs/rfc2822.html RFC 2822}
addresses. Please refer to the RFC for information on the specific
syntax of {@link http://www.faqs.org/rfcs/rfc2822.html RFC 2822}
messages.

<p>The {@link mailbox} module provides classes to read mailboxes
produced by various end-user mail programs.

@@class Message(file[, seekable])

<p>A {@link Message} instance is instantiated with an input object as
parameter. Message relies only on the input object having a {@link
readline} method; in particular, ordinary file objects qualify.
Instantiation reads headers from the input object up to a delimiter line
(normally a blank line) and stores them in the instance. The message
body, following the headers, is not consumed.

<p>This class can work with any input object that supports a {@link
readline} method. If the input object has seek and tell capability, the
{@link rewindbody} method will work; also, illegal lines will be pushed
back onto the input stream. If the input object lacks seek but has an
{@link unread} method that can push back a line of input, {@link
Message} will use that to push back illegal lines. Thus this class can
be used to parse messages coming from a buffered stream.

<p>The optional {@var seekable} argument is provided as a workaround for
certain stdio libraries in which {@link c:tell} discards buffered data
before discovering that the {@link c:lseek} system call doesn't work.
For maximum portability, you should set the seekable argument to zero to
prevent that initial {@link tell} when passing in an unseekable object
such as a file object created from a socket object.

<p>Input lines as read from the file may either be terminated by CR-LF
or by a single linefeed; a terminating CR-LF is replaced by a single
linefeed before the line is stored.

<p>All header matching is done independent of upper or lower case; e.g.
{@var m}['From'], {@var m}['from'] and {@var m}['FROM'] all yield the
same result.

@@class AddressList(field)

<p>You may instantiate the {@link AddressList} helper class using a
single string parameter, a comma-separated list of {@link
http://www.faqs.org/rfcs/rfc2822.html RFC 2822} addresses to be parsed.
(The parameter {@link None} yields an empty list.)

@@function quote(str)

<p>Return a new string with backslashes in {@var str} replaced by two
backslashes and double quotes replaced by backslash-double quote.

@@function unquote(str)

<p>Return a new string which is an {@em unquoted} version of {@var str}.
If {@var str} ends and begins with double quotes, they are stripped off.
Likewise if {@var str} ends and begins with angle brackets, they are
stripped off.

@@function parseaddr(address)

<p>Parse {@var address}, which should be the value of some
address-containing field such as To: or Cc:, into its constituent
&#8220;realname&#8221; and &#8220;email address&#8221; parts. Returns a
tuple of that information, unless the parse fails, in which case a
2-tuple {@code (None, None)} is returned.

@@function dump_address_pair(pair)

<p>The inverse of {@link parseaddr}, this takes a 2-tuple of the form
{@code (}{@var realname}, {@var email_address}) and returns the string
value suitable for a To: or Cc: header. If the first element of {@var
pair} is false, then the second element is returned unmodified.

@@function parsedate(date)

<p>Attempts to parse a date according to the rules in {@link
http://www.faqs.org/rfcs/rfc2822.html RFC 2822}. however, some mailers
don't follow that format as specified, so {@link parsedate} tries to
guess correctly in such cases. {@var date} is a string containing an
{@link http://www.faqs.org/rfcs/rfc2822.html RFC 2822} date, such as
{@code 'Mon, 20 Nov 1995 19:12:08 -0500'}. If it succeeds in parsing the
date, {@link parsedate} returns a 9-tuple that can be passed directly to
{@link time.mktime}; otherwise {@link None} will be returned. Note that
fields 6, 7, and 8 of the result tuple are not usable.

@@function parsedate_tz(date)

<p>Performs the same function as {@link parsedate}, but returns either
{@link None} or a 10-tuple; the first 9 elements make up a tuple that
can be passed directly to {@link time.mktime}, and the tenth is the
offset of the date's timezone from UTC (which is the official term for
Greenwich Mean Time). (Note that the sign of the timezone offset is the
opposite of the sign of the {@code time.timezone} variable for the same
timezone; the latter variable follows the POSIX standard while this
module follows {@link http://www.faqs.org/rfcs/rfc2822.html RFC 2822}.)
If the input string has no timezone, the last element of the tuple
returned is {@link None}. Note that fields 6, 7, and 8 of the result
tuple are not usable.

@@function mktime_tz(tuple)

<p>Turn a 10-tuple as returned by {@link parsedate_tz} into a UTC
timestamp. If the timezone item in the tuple is {@link None}, assume
local time. Minor deficiency: this first interprets the first 8 elements
as a local time and then compensates for the timezone difference; this
may yield a slight error around daylight savings time switch dates. Not
enough to worry about for common use.

@@text 

@see 
{@link email Module email}

Comprehensive email handling package; supersedes the rfc822 module.
@see 
{@link mailbox Module mailbox}

Classes to read various mailbox formats produced by end-user mail
programs.
@see 
{@link mimetools Module mimetools}

Subclass of rfc822.Message that handles MIME encoded messages.

<h4>Footnotes</h4>

@@variable ...2822.12.6

<p>This module originally conformed to {@link
http://www.faqs.org/rfcs/rfc822.html RFC 822}, hence the name. Since
then, {@link http://www.faqs.org/rfcs/rfc2822.html RFC 2822} has been
released as an update to {@link http://www.faqs.org/rfcs/rfc822.html RFC
822}. This module should be considered {@link
http://www.faqs.org/rfcs/rfc2822.html RFC 2822}-conformant, especially
in cases where the syntax or semantics have changed since {@link
http://www.faqs.org/rfcs/rfc822.html RFC 822}.

@@text 

<h2>Message Objects</h2>

<p>A {@link Message} instance has the following methods:

@@method Message.rewindbody()

<p>Seek to the start of the message body. This only works if the file
object is seekable.

@@method Message.isheader(line)

<p>Returns a line's canonicalized fieldname (the dictionary key that
will be used to index it) if the line is a legal {@link
http://www.faqs.org/rfcs/rfc2822.html RFC 2822} header; otherwise
returns {@link None} (implying that parsing should stop here and the
line be pushed back on the input stream). It is sometimes useful to
override this method in a subclass.

@@method Message.islast(line)

<p>Return true if the given line is a delimiter on which Message should
stop. The delimiter line is consumed, and the file object's read
location positioned immediately after it. By default this method just
checks that the line is blank, but you can override it in a subclass.

@@method Message.iscomment(line)

<p>Return {@link True} if the given line should be ignored entirely,
just skipped. By default this is a stub that always returns {@link
False}, but you can override it in a subclass.

@@method Message.getallmatchingheaders(name)

<p>Return a list of lines consisting of all headers matching {@var
name}, if any. Each physical line, whether it is a continuation line or
not, is a separate list item. Return the empty list if no header matches
{@var name}.

@@method Message.getfirstmatchingheader(name)

<p>Return a list of lines comprising the first header matching {@var
name}, and its continuation line(s), if any. Return {@link None} if
there is no header matching {@var name}.

@@method Message.getrawheader(name)

<p>Return a single string consisting of the text after the colon in the
first header matching {@var name}. This includes leading whitespace, the
trailing linefeed, and internal linefeeds and whitespace if there any
continuation line(s) were present. Return {@link None} if there is no
header matching {@var name}.

@@method Message.getheader(name[, default])

<p>Like {@code getrawheader(}{@var name}), but strip leading and
trailing whitespace. Internal whitespace is not stripped. The optional
{@var default} argument can be used to specify a different default to be
returned when there is no header matching {@var name}.

@@method Message.get(name[, default])

<p>An alias for {@link getheader}, to make the interface more compatible
with regular dictionaries.

@@method Message.getaddr(name)

<p>Return a pair {@code (}{@var full name}, {@var email address}) parsed
from the string returned by {@code getheader(}{@var name}). If no header
matching {@var name} exists, return {@code (None, None)}; otherwise both
the full name and the address are (possibly empty) strings.

<p>Example: If {@var m}'s first From: header contains the string {@code
'jack@cwi.nl (Jack Jansen)'}, then {@code m.getaddr('From')} will yield
the pair {@code ('Jack Jansen', 'jack@cwi.nl')}. If the header contained
{@code 'Jack Jansen &ltjack@cwi.nl>'} instead, it would yield the exact
same result.

@@method Message.getaddrlist(name)

<p>This is similar to {@code getaddr(}{@var list}), but parses a header
containing a list of email addresses (e.g. a To: header) and returns a
list of {@code (}{@var full name}, {@var email address}) pairs (even if
there was only one address in the header). If there is no header
matching {@var name}, return an empty list.

<p>If multiple headers exist that match the named header (e.g. if there
are several Cc: headers), all are parsed for addresses. Any continuation
lines the named headers contain are also parsed.

@@method Message.getdate(name)

<p>Retrieve a header using {@link getheader} and parse it into a 9-tuple
compatible with {@link time.mktime}; note that fields 6, 7, and 8 are
not usable. If there is no header matching {@var name}, or it is
unparsable, return {@link None}.

<p>Date parsing appears to be a black art, and not all mailers adhere to
the standard. While it has been tested and found correct on a large
collection of email from many sources, it is still possible that this
function may occasionally yield an incorrect result.

@@method Message.getdate_tz(name)

<p>Retrieve a header using {@link getheader} and parse it into a
10-tuple; the first 9 elements will make a tuple compatible with {@link
time.mktime}, and the 10th is a number giving the offset of the date's
timezone from UTC. Note that fields 6, 7, and 8 are not usable.
Similarly to {@link getdate}, if there is no header matching {@var
name}, or it is unparsable, return {@link None}.

@@text 

<p>{@link Message} instances also support a limited mapping interface.
In particular: {@var m}[name] is like {@var m}.getheader(name) but
raises {@link exceptions.KeyError} if there is no matching header; and
{@code len(}{@var m}), {@var m}.get({@var name}[, {@var default}]),
{@var m}.has_key({@var name}), {@var m}.keys(), {@var m}.values() {@code
}{@var m}.items(), and {@var m}.setdefault({@var name}[, {@var
default}]) act as expected, with the one difference that {@link
setdefault} uses an empty string as the default value. {@link Message}
instances also support the mapping writable interface {@var m}[name] =
value and {@code del }{@var m}[name]. {@link Message} objects do not
support the {@link clear}, {@link copy}, {@link popitem}, or {@link
update} methods of the mapping interface. (Support for {@link get} and
{@link setdefault} was only added in Python 2.2.)

<p>Finally, {@link Message} instances have some public instance
variables:

@@attribute Message.headers

<p>A list containing the entire set of header lines, in the order in
which they were read (except that setitem calls may disturb this order).
Each line contains a trailing newline. The blank line terminating the
headers is not contained in the list.

@@attribute Message.fp

<p>The file or file-like object passed at instantiation time. This can
be used to read the message content.

@@attribute Message.unixfrom

<p>The Unix "{@code From } " line, if the message had one, or an empty
string. This is needed to regenerate the message in some contexts, such
as an {@code mbox}-style mailbox file.

@@text 

<h2>AddressList Objects</h2>

<p>An {@link AddressList} instance has the following methods:

@@method AddressList.__len__()

<p>Return the number of addresses in the address list.

@@method AddressList.__str__()

<p>Return a canonicalized string representation of the address list.
Addresses are rendered in "name" &lthost@domain> form, comma-separated.

@@method AddressList.__add__(alist)

<p>Return a new {@link AddressList} instance that contains all addresses
in both {@link AddressList} operands, with duplicates removed (set
union).

@@method AddressList.__iadd__(alist)

<p>In-place version of {@link __add__}; turns this {@link AddressList}
instance into the union of itself and the right-hand instance, {@var
alist}.

@@method AddressList.__sub__(alist)

<p>Return a new {@link AddressList} instance that contains every address
in the left-hand {@link AddressList} operand that is not present in the
right-hand address operand (set difference).

@@method AddressList.__isub__(alist)

<p>In-place version of {@link __sub__}, removing addresses in this list
which are also in {@var alist}.

@@text 

<p>Finally, {@link AddressList} instances have one public instance
variable:

@@attribute AddressList.addresslist

<p>A list of tuple string pairs, one per address. In each member, the
first is the canonicalized name part, the second is the actual
route-address ("{@code @}"-separated username-host.domain pair).

@@text 
